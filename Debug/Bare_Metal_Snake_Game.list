
Bare_Metal_Snake_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000219c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800236c  0800236c  0000336c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800249c  0800249c  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800249c  0800249c  0000349c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024a4  080024a4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024a4  080024a4  000034a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024a8  080024a8  000034a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080024ac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000068  08002514  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08002514  000041d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e87  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000274  00000000  00000000  00004f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00005198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000125  00000000  00000000  00005320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001ea0  00000000  00000000  00005445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000101f  00000000  00000000  000072e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000085cd  00000000  00000000  00008304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000108d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001150  00000000  00000000  00010914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00011a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002354 	.word	0x08002354

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08002354 	.word	0x08002354

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:

static void DisplayGame(snake_Type *snake, apple_Type *apple);
static void MoveSnake(snake_Type *snake, apple_Type *apple);

int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b0a8      	sub	sp, #160	@ 0xa0
 80002b4:	af00      	add	r7, sp, #0
	srand(time(NULL));
 80002b6:	2000      	movs	r0, #0
 80002b8:	f001 f960 	bl	800157c <time>
 80002bc:	4602      	mov	r2, r0
 80002be:	460b      	mov	r3, r1
 80002c0:	4613      	mov	r3, r2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 ffe0 	bl	8001288 <srand>

	SetSystemClockto16MHz();
 80002c8:	f000 f84c 	bl	8000364 <SetSystemClockto16MHz>
	ConfigureTimer3();
 80002cc:	f000 f89a 	bl	8000404 <ConfigureTimer3>
	SPI1ClockEnable();
 80002d0:	f000 f8fe 	bl	80004d0 <SPI1ClockEnable>
	GPIOAClockEnable();
 80002d4:	f000 f910 	bl	80004f8 <GPIOAClockEnable>

	// Now, set up user buttons
	GPIOCClockEnable();
 80002d8:	f000 f922 	bl	8000520 <GPIOCClockEnable>
	MovementButtonsInit();
 80002dc:	f000 fb28 	bl	8000930 <MovementButtonsInit>

	// Enable Interrupts
	NVIC_EnableIRQ(EXTI0IRQn);
 80002e0:	2006      	movs	r0, #6
 80002e2:	f000 fb99 	bl	8000a18 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI1IRQn);
 80002e6:	2007      	movs	r0, #7
 80002e8:	f000 fb96 	bl	8000a18 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2IRQn);
 80002ec:	2008      	movs	r0, #8
 80002ee:	f000 fb93 	bl	8000a18 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3IRQn);
 80002f2:	2009      	movs	r0, #9
 80002f4:	f000 fb90 	bl	8000a18 <NVIC_EnableIRQ>

	SPI1PinsInit();
 80002f8:	f000 f9e4 	bl	80006c4 <SPI1PinsInit>
	SPI1Init();
 80002fc:	f000 f924 	bl	8000548 <SPI1Init>

	matrixInit();
 8000300:	f000 fa5a 	bl	80007b8 <matrixInit>

	// Write data here
	// Snake starts with head at (3, 2), tail at (1, 2), and size 3
	snake_Type snake;
	snake_Type *snake_Ptr = &snake;
 8000304:	f107 0308 	add.w	r3, r7, #8
 8000308:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	SnakeInit(snake_Ptr);
 800030c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000310:	f000 fc29 	bl	8000b66 <SnakeInit>

	// Apple starts at (3, 7) and will update to a random square after collected
	apple_Type apple;
	apple_Type *apple_Ptr = &apple;
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	AppleInit(apple_Ptr);
 800031a:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800031e:	f000 fd93 	bl	8000e48 <AppleInit>

	while(1)
	{
		// If dead, play the dead sequence and queue for restart
		if (alive == false)
 8000322:	4b0f      	ldr	r3, [pc, #60]	@ (8000360 <main+0xb0>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	f083 0301 	eor.w	r3, r3, #1
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <main+0x86>
		{
			playLoseScreen();
 8000332:	f000 fc5f 	bl	8000bf4 <playLoseScreen>
		}

		// First, display to screen
		DisplayGame(snake_Ptr, apple_Ptr);
 8000336:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800033a:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800033e:	f000 feea 	bl	8001116 <DisplayGame>

		// Next, delay by set amount (default 1 second)
		Delay(1000);
 8000342:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000346:	f000 f895 	bl	8000474 <Delay>

		// Then, move the snake by one
		MoveSnake(snake_Ptr, apple_Ptr);
 800034a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800034e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000352:	f000 fef9 	bl	8001148 <MoveSnake>

		// Finally, check if head is currently at an apple (then set that bool)
		// and lastly check if we are alive (Are we out of bounds or have we hit ourself)
		SnakeCheckAfterMove(snake_Ptr);
 8000356:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800035a:	f000 fd0f 	bl	8000d7c <SnakeCheckAfterMove>
		if (alive == false)
 800035e:	e7e0      	b.n	8000322 <main+0x72>
 8000360:	20000008 	.word	0x20000008

08000364 <SetSystemClockto16MHz>:
	}
}

void SetSystemClockto16MHz(void)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
	// Initialize System Clock
	uint32_t *RCC_CR_Ptr = (uint32_t*)RCC_CR;
 800036a:	4b23      	ldr	r3, [pc, #140]	@ (80003f8 <SetSystemClockto16MHz+0x94>)
 800036c:	60fb      	str	r3, [r7, #12]
	// Turn on HSI
	*RCC_CR_Ptr |= (uint32_t)0x1;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f043 0201 	orr.w	r2, r3, #1
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]
	// Wait for HSI Clock to be ready
	while ((*RCC_CR_Ptr & 0x2) == 0);
 800037a:	bf00      	nop
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f003 0302 	and.w	r3, r3, #2
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0f9      	beq.n	800037c <SetSystemClockto16MHz+0x18>

	// Configure Prescalers
	uint32_t *RCC_CFGR_Ptr = (uint32_t*)RCC_CFGR;
 8000388:	4b1c      	ldr	r3, [pc, #112]	@ (80003fc <SetSystemClockto16MHz+0x98>)
 800038a:	60bb      	str	r3, [r7, #8]
	// HPRE
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b1111 << 4);
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	601a      	str	r2, [r3, #0]
	// PPRE1
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b111 << 10);
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	601a      	str	r2, [r3, #0]
	// PPRE2
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b111 << 13);
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	601a      	str	r2, [r3, #0]

	// Set HSI as Clock Source
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b11);
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f023 0203 	bic.w	r2, r3, #3
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	601a      	str	r2, [r3, #0]

	// Configure Flash
	uint32_t *FLASH_ACR_Ptr = (uint32_t*)FLASH_ACR;
 80003bc:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <SetSystemClockto16MHz+0x9c>)
 80003be:	607b      	str	r3, [r7, #4]
	// Latency
	*FLASH_ACR_Ptr |= (uint32_t)(0b0000 << 0);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	601a      	str	r2, [r3, #0]
	// ICEN
	*FLASH_ACR_Ptr |= (uint32_t)(0b1 << 9);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	601a      	str	r2, [r3, #0]
	// DCEN
	*FLASH_ACR_Ptr |= (uint32_t)(0b1 << 10);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	601a      	str	r2, [r3, #0]

	// Turn off HSE
	*RCC_CR_Ptr &= ~((uint32_t)0x1 << 16);
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	601a      	str	r2, [r3, #0]
}
 80003ec:	bf00      	nop
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40023800 	.word	0x40023800
 80003fc:	40023808 	.word	0x40023808
 8000400:	40023c00 	.word	0x40023c00

08000404 <ConfigureTimer3>:

void ConfigureTimer3(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
	// Enable TIM3 Clock
	uint32_t *RCC_APB1_Ptr = (uint32_t*)RCC_APB1;
 800040a:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <ConfigureTimer3+0x5c>)
 800040c:	617b      	str	r3, [r7, #20]
	*RCC_APB1_Ptr |= (uint32_t)0x2;
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f043 0202 	orr.w	r2, r3, #2
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	601a      	str	r2, [r3, #0]

	// Set Prescaler
	uint32_t *TIM3_PSC_Ptr = (uint32_t*)TIM3_PSC;
 800041a:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <ConfigureTimer3+0x60>)
 800041c:	613b      	str	r3, [r7, #16]
	*TIM3_PSC_Ptr |= (uint32_t)0xF;
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f043 020f 	orr.w	r2, r3, #15
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	601a      	str	r2, [r3, #0]

	// Set Auto-Reload
	uint32_t *TIM3_ARR_Ptr = (uint32_t*)TIM3_ARR;
 800042a:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <ConfigureTimer3+0x64>)
 800042c:	60fb      	str	r3, [r7, #12]
	*TIM3_ARR_Ptr = (uint32_t)0x3E7;
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000434:	601a      	str	r2, [r3, #0]
//	// Enable Interrupt
//	uint32_t *TIM3_DIER_Ptr = (uint32_t*)TIM3_DIER;
//	*TIM3_DIER_Ptr |= (uint32_t)0x1;

	// Clear UIF Bit
	uint32_t *TIM3_SR_Ptr = (uint32_t*)TIM3_SR;
 8000436:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <ConfigureTimer3+0x68>)
 8000438:	60bb      	str	r3, [r7, #8]
	*TIM3_SR_Ptr &= (uint32_t)0xFFFE;
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8000442:	4013      	ands	r3, r2
 8000444:	68ba      	ldr	r2, [r7, #8]
 8000446:	6013      	str	r3, [r2, #0]

//	// Enable NVIC Interrupt for Timer 3
//	NVIC_EnableIRQ(TIM3_IRQn);

	// Enable TIM3
	uint32_t *TIM3_CR1_Ptr = (uint32_t*)TIM3_CR1;
 8000448:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <ConfigureTimer3+0x6c>)
 800044a:	607b      	str	r3, [r7, #4]
	*TIM3_CR1_Ptr = (uint32_t)0b1 << 0;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2201      	movs	r2, #1
 8000450:	601a      	str	r2, [r3, #0]
}
 8000452:	bf00      	nop
 8000454:	371c      	adds	r7, #28
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40023840 	.word	0x40023840
 8000464:	40000428 	.word	0x40000428
 8000468:	4000042c 	.word	0x4000042c
 800046c:	40000410 	.word	0x40000410
 8000470:	40000400 	.word	0x40000400

08000474 <Delay>:

void Delay(uint32_t ms)
{
 8000474:	b480      	push	{r7}
 8000476:	b087      	sub	sp, #28
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	volatile uint32_t i;
	uint32_t *TIM3_CNT_Ptr = (uint32_t*)TIM3_CNT;
 800047c:	4b12      	ldr	r3, [pc, #72]	@ (80004c8 <Delay+0x54>)
 800047e:	617b      	str	r3, [r7, #20]
	uint32_t *TIM3_SR_Ptr = (uint32_t*)TIM3_SR;
 8000480:	4b12      	ldr	r3, [pc, #72]	@ (80004cc <Delay+0x58>)
 8000482:	613b      	str	r3, [r7, #16]
	for (i = 0; i <= ms; i++)
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	e013      	b.n	80004b2 <Delay+0x3e>
	{
		// Clear TIM3 Count
		*TIM3_CNT_Ptr = 0;
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]

		// Wait for UIF (1 cycle of 1kHz clocking)
		while((*TIM3_SR_Ptr & 0x1) == 0);	// This will make a 1ms delay
 8000490:	bf00      	nop
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	2b00      	cmp	r3, #0
 800049c:	d0f9      	beq.n	8000492 <Delay+0x1e>

		// Reset UIF
		*TIM3_SR_Ptr &= (uint32_t)0xFFFE;
 800049e:	693b      	ldr	r3, [r7, #16]
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80004a6:	4013      	ands	r3, r2
 80004a8:	693a      	ldr	r2, [r7, #16]
 80004aa:	6013      	str	r3, [r2, #0]
	for (i = 0; i <= ms; i++)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	3301      	adds	r3, #1
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d2e7      	bcs.n	800048a <Delay+0x16>
	}
}
 80004ba:	bf00      	nop
 80004bc:	bf00      	nop
 80004be:	371c      	adds	r7, #28
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	40000424 	.word	0x40000424
 80004cc:	40000410 	.word	0x40000410

080004d0 <SPI1ClockEnable>:

void SPI1ClockEnable(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
	// First, SPI clock through APB2 Bus
	uint32_t *RCC_APB2ENR_Ptr = (uint32_t*)RCC_APB2ENR;
 80004d6:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <SPI1ClockEnable+0x24>)
 80004d8:	607b      	str	r3, [r7, #4]
	*RCC_APB2ENR_Ptr |= (uint32_t)(0x1 << 12);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40023844 	.word	0x40023844

080004f8 <GPIOAClockEnable>:

void GPIOAClockEnable(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
	// Now, Enable GPIOA Clock through AHB1 Bus
	uint32_t *RCC_AHB1ENR_Ptr = (uint32_t*)RCC_AHB1ENR;
 80004fe:	4b07      	ldr	r3, [pc, #28]	@ (800051c <GPIOAClockEnable+0x24>)
 8000500:	607b      	str	r3, [r7, #4]
	*RCC_AHB1ENR_Ptr |= (uint32_t)0x1;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f043 0201 	orr.w	r2, r3, #1
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	601a      	str	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40023830 	.word	0x40023830

08000520 <GPIOCClockEnable>:

void GPIOCClockEnable(void)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
	// Now, Enable GPIOC Clock through AHB1 Bus
	uint32_t *RCC_AHB1ENR_Ptr = (uint32_t*)RCC_AHB1ENR;
 8000526:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <GPIOCClockEnable+0x24>)
 8000528:	607b      	str	r3, [r7, #4]
	*RCC_AHB1ENR_Ptr |= (uint32_t)0b1 << 2;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f043 0204 	orr.w	r2, r3, #4
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40023830 	.word	0x40023830

08000548 <SPI1Init>:

void SPI1Init(void)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
	// Set Up SPI Init
	uint32_t *SPI1_CR1_Ptr = (uint32_t*)SPI1_CR1;
 800054e:	4b26      	ldr	r3, [pc, #152]	@ (80005e8 <SPI1Init+0xa0>)
 8000550:	607b      	str	r3, [r7, #4]

	// NOTE: Simplex is basically just full duplex but we don't use MISO

	// BIDIMODE off
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 15);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	601a      	str	r2, [r3, #0]
	// CRC Calculations off
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 13);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	601a      	str	r2, [r3, #0]
	// DFF to 16 bits
	*SPI1_CR1_Ptr |= (uint32_t)(0x1 << 11);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	601a      	str	r2, [r3, #0]
	// RXOnly off since we are transferring from master to slave
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 10);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	601a      	str	r2, [r3, #0]
	// SSM Disabled
	// MSB Selected
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 7);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
	// Baud Rate of 2 MBits/S
	*SPI1_CR1_Ptr &= ~(uint32_t)(0b111 << 3);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	601a      	str	r2, [r3, #0]
	*SPI1_CR1_Ptr |= (uint32_t)(0b010 << 3);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f043 0210 	orr.w	r2, r3, #16
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	601a      	str	r2, [r3, #0]
	// Put into Master Mode
	*SPI1_CR1_Ptr |= (uint32_t)(0x1 << 2);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f043 0204 	orr.w	r2, r3, #4
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	601a      	str	r2, [r3, #0]
	// Set CPOL and CPHA
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x3);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f023 0203 	bic.w	r2, r3, #3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	601a      	str	r2, [r3, #0]

	// SSOE enabled
	uint32_t *SPI1_CR2_Ptr = (uint32_t*)SPI1_CR2;
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <SPI1Init+0xa4>)
 80005c0:	603b      	str	r3, [r7, #0]
	*SPI1_CR2_Ptr |= 0x4;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f043 0204 	orr.w	r2, r3, #4
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	601a      	str	r2, [r3, #0]

	// Finally, enable SPI
	*SPI1_CR1_Ptr |= (uint32_t)(0x1 << 6);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	601a      	str	r2, [r3, #0]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40013000 	.word	0x40013000
 80005ec:	40013004 	.word	0x40013004

080005f0 <SPI1WriteToDR>:

void SPI1WriteToDR(uint16_t data)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
	// Load data into SPI1 data register
	uint32_t *SPI1_DR_Ptr = (uint32_t*)SPI1_DR;
 80005fa:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <SPI1WriteToDR+0x20>)
 80005fc:	60fb      	str	r3, [r7, #12]
	*SPI1_DR_Ptr = (uint32_t)data;
 80005fe:	88fa      	ldrh	r2, [r7, #6]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	601a      	str	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	4001300c 	.word	0x4001300c

08000614 <WaitForTransmissionEnd>:

void WaitForTransmissionEnd(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
	// Wait for transmission to end by checking BSY and TXE
	uint32_t *SPI1_SR_Ptr = (uint32_t*)SPI1_SR;
 800061a:	4b0b      	ldr	r3, [pc, #44]	@ (8000648 <WaitForTransmissionEnd+0x34>)
 800061c:	607b      	str	r3, [r7, #4]
	while ((*SPI1_SR_Ptr & (0b1 << 7)) != 0);
 800061e:	bf00      	nop
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1f9      	bne.n	8000620 <WaitForTransmissionEnd+0xc>
	while ((*SPI1_SR_Ptr & (0b1 << 1)) == 0);
 800062c:	bf00      	nop
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	2b00      	cmp	r3, #0
 8000638:	d0f9      	beq.n	800062e <WaitForTransmissionEnd+0x1a>
}
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	40013008 	.word	0x40013008

0800064c <EnableSlave>:

void EnableSlave(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
	// Enable Slave
	uint32_t *CS_BSRR_Ptr = (uint32_t*)CS_BSRR;
 8000652:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <EnableSlave+0x24>)
 8000654:	607b      	str	r3, [r7, #4]
	*CS_BSRR_Ptr |= (uint32_t)(0b1 << (CS_Pin + 16));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40020018 	.word	0x40020018

08000674 <DisableSlave>:

void DisableSlave(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
	// Disable Slave
	uint32_t *CS_BSRR_Ptr = (uint32_t*)CS_BSRR;
 800067a:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <DisableSlave+0x24>)
 800067c:	607b      	str	r3, [r7, #4]
	*CS_BSRR_Ptr |= (uint32_t)(0b1 << CS_Pin);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f043 0210 	orr.w	r2, r3, #16
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40020018 	.word	0x40020018

0800069c <SPI1_Transmit>:

void SPI1_Transmit(uint16_t data)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
	EnableSlave();
 80006a6:	f7ff ffd1 	bl	800064c <EnableSlave>
	SPI1WriteToDR(data);
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff9f 	bl	80005f0 <SPI1WriteToDR>
	WaitForTransmissionEnd();
 80006b2:	f7ff ffaf 	bl	8000614 <WaitForTransmissionEnd>
	DisableSlave();
 80006b6:	f7ff ffdd 	bl	8000674 <DisableSlave>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <SPI1PinsInit>:

void SPI1PinsInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
	// Initialize SPI GPIO Pins
	// First, PinA5 for SCLK
	uint32_t *GPIOA_MODER_Ptr = (uint32_t*)GPIOA_MODER;
 80006ca:	4b21      	ldr	r3, [pc, #132]	@ (8000750 <SPI1PinsInit+0x8c>)
 80006cc:	60fb      	str	r3, [r7, #12]
	// Set to Alternate Function
	*GPIOA_MODER_Ptr &= ~(uint32_t)(0b11 << 10);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER_Ptr |= (uint32_t)(0b10 << 10);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	601a      	str	r2, [r3, #0]
	// Next, PinA7 for MOSI
	*GPIOA_MODER_Ptr &= ~(uint32_t)(0b11 << 14);
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER_Ptr |= (uint32_t)(0b10 << 14);
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	601a      	str	r2, [r3, #0]

	// Set a GPIO Pin for CS Pin
	uint32_t *CS_Port_Ptr = (uint32_t*)CS_Port;
 80006fe:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <SPI1PinsInit+0x8c>)
 8000700:	60bb      	str	r3, [r7, #8]
	// Set Pin 4 to output
	*CS_Port_Ptr &= ~(uint32_t)(0b11 << 2 * CS_Pin);
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	601a      	str	r2, [r3, #0]
	*CS_Port_Ptr |= (uint32_t)(0b01 << 2 * CS_Pin);
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	601a      	str	r2, [r3, #0]

	// Set up alternate function by selecting AF5 (According to datasheet)
	uint32_t *GPIOA_AFRL_Ptr = (uint32_t*)GPIOA_AFRL;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <SPI1PinsInit+0x90>)
 800071c:	607b      	str	r3, [r7, #4]
	*GPIOA_AFRL_Ptr |= (uint32_t)(0b0101 << 16);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f443 22a0 	orr.w	r2, r3, #327680	@ 0x50000
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL_Ptr |= (uint32_t)(0b0101 << 20);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL_Ptr |= (uint32_t)(0b0101 << 28);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f043 42a0 	orr.w	r2, r3, #1342177280	@ 0x50000000
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	601a      	str	r2, [r3, #0]
	// Initialize to High
	DisableSlave();
 8000742:	f7ff ff97 	bl	8000674 <DisableSlave>
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40020000 	.word	0x40020000
 8000754:	40020020 	.word	0x40020020

08000758 <max7219_write>:

void max7219_write(uint8_t addr, uint8_t data)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	460a      	mov	r2, r1
 8000762:	71fb      	strb	r3, [r7, #7]
 8000764:	4613      	mov	r3, r2
 8000766:	71bb      	strb	r3, [r7, #6]
	uint16_t writeData = (addr << 8) | data;
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	b21b      	sxth	r3, r3
 800076c:	021b      	lsls	r3, r3, #8
 800076e:	b21a      	sxth	r2, r3
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	b21b      	sxth	r3, r3
 8000774:	4313      	orrs	r3, r2
 8000776:	b21b      	sxth	r3, r3
 8000778:	81fb      	strh	r3, [r7, #14]
	SPI1_Transmit(writeData);
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff8d 	bl	800069c <SPI1_Transmit>
}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <matrixClear>:

void matrixClear(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
	for (int i = 1; i <= 8; i++)
 8000790:	2301      	movs	r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	e008      	b.n	80007a8 <matrixClear+0x1e>
	{
		max7219_write(i, 0x00);	// Clear Screen
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffdb 	bl	8000758 <max7219_write>
	for (int i = 1; i <= 8; i++)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3301      	adds	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b08      	cmp	r3, #8
 80007ac:	ddf3      	ble.n	8000796 <matrixClear+0xc>
	}
}
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <matrixInit>:

void matrixInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	max7219_write(0x09, 0);		// No Decoding
 80007bc:	2100      	movs	r1, #0
 80007be:	2009      	movs	r0, #9
 80007c0:	f7ff ffca 	bl	8000758 <max7219_write>
	max7219_write(0x0A, 0x02);	// 5/32 Light Intensity
 80007c4:	2102      	movs	r1, #2
 80007c6:	200a      	movs	r0, #10
 80007c8:	f7ff ffc6 	bl	8000758 <max7219_write>
	max7219_write(0x0B, 0x07);	// Scan all columns (Turn them all on)
 80007cc:	2107      	movs	r1, #7
 80007ce:	200b      	movs	r0, #11
 80007d0:	f7ff ffc2 	bl	8000758 <max7219_write>
	max7219_write(0x0C, 0x01);	// Normal Operation (No shutdown mode)
 80007d4:	2101      	movs	r1, #1
 80007d6:	200c      	movs	r0, #12
 80007d8:	f7ff ffbe 	bl	8000758 <max7219_write>
	max7219_write(0x0F, 0x00);	// No Display Test
 80007dc:	2100      	movs	r1, #0
 80007de:	200f      	movs	r0, #15
 80007e0:	f7ff ffba 	bl	8000758 <max7219_write>

	matrixClear();
 80007e4:	f7ff ffd1 	bl	800078a <matrixClear>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <intToHexPosition>:

uint8_t intToHexPosition(uint8_t val)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
	switch (val)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	2b07      	cmp	r3, #7
 80007fc:	d822      	bhi.n	8000844 <intToHexPosition+0x58>
 80007fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000804 <intToHexPosition+0x18>)
 8000800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000804:	08000825 	.word	0x08000825
 8000808:	08000829 	.word	0x08000829
 800080c:	0800082d 	.word	0x0800082d
 8000810:	08000831 	.word	0x08000831
 8000814:	08000835 	.word	0x08000835
 8000818:	08000839 	.word	0x08000839
 800081c:	0800083d 	.word	0x0800083d
 8000820:	08000841 	.word	0x08000841
	{
		case 1:
			return 0x01;
 8000824:	2301      	movs	r3, #1
 8000826:	e00e      	b.n	8000846 <intToHexPosition+0x5a>
			break;
		case 2:
			return 0x02;
 8000828:	2302      	movs	r3, #2
 800082a:	e00c      	b.n	8000846 <intToHexPosition+0x5a>
			break;
		case 3:
			return 0x04;
 800082c:	2304      	movs	r3, #4
 800082e:	e00a      	b.n	8000846 <intToHexPosition+0x5a>
			break;
		case 4:
			return 0x08;
 8000830:	2308      	movs	r3, #8
 8000832:	e008      	b.n	8000846 <intToHexPosition+0x5a>
			break;
		case 5:
			return 0x10;
 8000834:	2310      	movs	r3, #16
 8000836:	e006      	b.n	8000846 <intToHexPosition+0x5a>
			break;
		case 6:
			return 0x20;
 8000838:	2320      	movs	r3, #32
 800083a:	e004      	b.n	8000846 <intToHexPosition+0x5a>
			break;
		case 7:
			return 0x40;
 800083c:	2340      	movs	r3, #64	@ 0x40
 800083e:	e002      	b.n	8000846 <intToHexPosition+0x5a>
			break;
		case 8:
			return 0x80;
 8000840:	2380      	movs	r3, #128	@ 0x80
 8000842:	e000      	b.n	8000846 <intToHexPosition+0x5a>
			break;
		default:
			return -1;		// Should never get this, only enter values between 1 and 8
 8000844:	23ff      	movs	r3, #255	@ 0xff
	}
}
 8000846:	4618      	mov	r0, r3
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <positionToMatrixPos>:

void positionToMatrixPos(uint8_t x_pos[], uint8_t y_pos[], int numberOfCords, uint8_t outputArray[])
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
 8000860:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < numberOfCords; i++)
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	e01d      	b.n	80008a4 <positionToMatrixPos+0x50>
	{
		uint8_t x = x_pos[i];
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	74fb      	strb	r3, [r7, #19]
		uint8_t y = y_pos[i];
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	4413      	add	r3, r2
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	74bb      	strb	r3, [r7, #18]
		x = intToHexPosition(x);
 800087c:	7cfb      	ldrb	r3, [r7, #19]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ffb4 	bl	80007ec <intToHexPosition>
 8000884:	4603      	mov	r3, r0
 8000886:	74fb      	strb	r3, [r7, #19]
		outputArray[y] |= x;
 8000888:	7cbb      	ldrb	r3, [r7, #18]
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	4413      	add	r3, r2
 800088e:	7819      	ldrb	r1, [r3, #0]
 8000890:	7cbb      	ldrb	r3, [r7, #18]
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	4413      	add	r3, r2
 8000896:	7cfa      	ldrb	r2, [r7, #19]
 8000898:	430a      	orrs	r2, r1
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < numberOfCords; i++)
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3301      	adds	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dbdd      	blt.n	8000868 <positionToMatrixPos+0x14>
	}
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <LEDMatrixWrite>:

void LEDMatrixWrite(uint8_t outputArray[])
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b084      	sub	sp, #16
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
	uint16_t writePos;
	for (int i = 1; i <= 8; i++)
 80008be:	2301      	movs	r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	e012      	b.n	80008ea <LEDMatrixWrite+0x34>
	{
		writePos = (i << 8) | outputArray[i];
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	440b      	add	r3, r1
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b21b      	sxth	r3, r3
 80008da:	817b      	strh	r3, [r7, #10]
		SPI1_Transmit(writePos);
 80008dc:	897b      	ldrh	r3, [r7, #10]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fedc 	bl	800069c <SPI1_Transmit>
	for (int i = 1; i <= 8; i++)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	3301      	adds	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b08      	cmp	r3, #8
 80008ee:	dde9      	ble.n	80008c4 <LEDMatrixWrite+0xe>
	}
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <LEDMatrixRowWrite>:

void LEDMatrixRowWrite(uint8_t outputArray[], uint8_t row)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	460b      	mov	r3, r1
 8000904:	70fb      	strb	r3, [r7, #3]
	uint16_t writePos;
	writePos = (row << 8) | outputArray[row];
 8000906:	78fb      	ldrb	r3, [r7, #3]
 8000908:	b21b      	sxth	r3, r3
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	78fb      	ldrb	r3, [r7, #3]
 8000910:	6879      	ldr	r1, [r7, #4]
 8000912:	440b      	add	r3, r1
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b21b      	sxth	r3, r3
 8000918:	4313      	orrs	r3, r2
 800091a:	b21b      	sxth	r3, r3
 800091c:	81fb      	strh	r3, [r7, #14]
	SPI1_Transmit(writePos);
 800091e:	89fb      	ldrh	r3, [r7, #14]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff febb 	bl	800069c <SPI1_Transmit>
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <MovementButtonsInit>:
		SPI1_Transmit(writeRow);
	}
}

void MovementButtonsInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b089      	sub	sp, #36	@ 0x24
 8000934:	af00      	add	r7, sp, #0
	// Sets buttons as inputs
	uint32_t *GPIOC_MODER_Ptr = (uint32_t*)GPIOC_MODER;
 8000936:	4b33      	ldr	r3, [pc, #204]	@ (8000a04 <MovementButtonsInit+0xd4>)
 8000938:	613b      	str	r3, [r7, #16]
	// Up Pin PC0
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (0 * 2));
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f023 0203 	bic.w	r2, r3, #3
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	601a      	str	r2, [r3, #0]
	// Right Pin PC1
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (1 * 2));
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f023 020c 	bic.w	r2, r3, #12
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	601a      	str	r2, [r3, #0]
	// Down Pin PC2
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (2 * 2));
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	601a      	str	r2, [r3, #0]
	// Left Pin PC3
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (3 * 2));
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	601a      	str	r2, [r3, #0]

	// Now set up falling edge interrupt for buttons
	// Enable SYSCFG Clock
	uint32_t *RCC_APB2ENR_Ptr = (uint32_t*)RCC_APB2ENR;
 800096a:	4b27      	ldr	r3, [pc, #156]	@ (8000a08 <MovementButtonsInit+0xd8>)
 800096c:	60fb      	str	r3, [r7, #12]
	*RCC_APB2ENR_Ptr |= (uint32_t)0b1 << 14;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	601a      	str	r2, [r3, #0]

	// Configure EXTI0 to EXTI3 for PC0-PC3
	uint32_t *SYSCFG_EXTICR1_Ptr = (uint32_t*)SYSCFG_EXTICR1;
 800097a:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <MovementButtonsInit+0xdc>)
 800097c:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 4; i++)
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
 8000982:	e00c      	b.n	800099e <MovementButtonsInit+0x6e>
	{
		*SYSCFG_EXTICR1_Ptr |= (uint32_t)0b0010 << (i * 4);
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	2102      	movs	r1, #2
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	431a      	orrs	r2, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	3301      	adds	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	ddef      	ble.n	8000984 <MovementButtonsInit+0x54>
	}

	// Enable falling trigger
	uint32_t *EXTI_FTSR_Ptr = (uint32_t*)EXTI_FTSR;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MovementButtonsInit+0xe0>)
 80009a6:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
 80009ac:	e00b      	b.n	80009c6 <MovementButtonsInit+0x96>
	{
		*EXTI_FTSR_Ptr |= (uint32_t)0b1 << i;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	2101      	movs	r1, #1
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	3301      	adds	r3, #1
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	ddf0      	ble.n	80009ae <MovementButtonsInit+0x7e>
	}

	// Unmask the interrupt
	uint32_t *EXTI_IMR_Ptr = (uint32_t*)EXTI_IMR;
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MovementButtonsInit+0xe4>)
 80009ce:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 4; i++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	e00b      	b.n	80009ee <MovementButtonsInit+0xbe>
	{
		*EXTI_IMR_Ptr |= (uint32_t)0b1 << i;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	2101      	movs	r1, #1
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	431a      	orrs	r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	3301      	adds	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	ddf0      	ble.n	80009d6 <MovementButtonsInit+0xa6>
	}
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	3724      	adds	r7, #36	@ 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40023844 	.word	0x40023844
 8000a0c:	40013808 	.word	0x40013808
 8000a10:	40013c0c 	.word	0x40013c0c
 8000a14:	40013c00 	.word	0x40013c00

08000a18 <NVIC_EnableIRQ>:

void NVIC_EnableIRQ(uint32_t IRQn)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	if (IRQn <= 96)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b60      	cmp	r3, #96	@ 0x60
 8000a24:	d813      	bhi.n	8000a4e <NVIC_EnableIRQ+0x36>
	{
		uint32_t iserIndex = IRQn >> 5;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	095b      	lsrs	r3, r3, #5
 8000a2a:	60fb      	str	r3, [r7, #12]
		uint32_t iserBit = IRQn & 0x1F;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 031f 	and.w	r3, r3, #31
 8000a32:	60bb      	str	r3, [r7, #8]

		NVIC->ISER[iserIndex] |= (0x1 << iserBit);
 8000a34:	4a09      	ldr	r2, [pc, #36]	@ (8000a5c <NVIC_EnableIRQ+0x44>)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	fa01 f202 	lsl.w	r2, r1, r2
 8000a44:	4905      	ldr	r1, [pc, #20]	@ (8000a5c <NVIC_EnableIRQ+0x44>)
 8000a46:	431a      	orrs	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e100 	.word	0xe000e100

08000a60 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <EXTI0_IRQHandler+0x2c>)
 8000a68:	607b      	str	r3, [r7, #4]

	if (previous_direction != DOWN)
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <EXTI0_IRQHandler+0x30>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d002      	beq.n	8000a78 <EXTI0_IRQHandler+0x18>
	{
		snake_direction = UP;
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <EXTI0_IRQHandler+0x34>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC0 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 0;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40013c14 	.word	0x40013c14
 8000a90:	20000004 	.word	0x20000004
 8000a94:	20000000 	.word	0x20000000

08000a98 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <EXTI1_IRQHandler+0x2c>)
 8000aa0:	607b      	str	r3, [r7, #4]

	if (previous_direction != LEFT)
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <EXTI1_IRQHandler+0x30>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d002      	beq.n	8000ab0 <EXTI1_IRQHandler+0x18>
	{
		snake_direction = RIGHT;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <EXTI1_IRQHandler+0x34>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC1 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 1;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	601a      	str	r2, [r3, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40013c14 	.word	0x40013c14
 8000ac8:	20000004 	.word	0x20000004
 8000acc:	20000000 	.word	0x20000000

08000ad0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <EXTI2_IRQHandler+0x2c>)
 8000ad8:	607b      	str	r3, [r7, #4]

	if (previous_direction != UP)
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <EXTI2_IRQHandler+0x30>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <EXTI2_IRQHandler+0x18>
	{
		snake_direction = DOWN;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <EXTI2_IRQHandler+0x34>)
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC2 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 2;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2204      	movs	r2, #4
 8000aec:	601a      	str	r2, [r3, #0]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40013c14 	.word	0x40013c14
 8000b00:	20000004 	.word	0x20000004
 8000b04:	20000000 	.word	0x20000000

08000b08 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <EXTI3_IRQHandler+0x2c>)
 8000b10:	607b      	str	r3, [r7, #4]

	if (previous_direction != RIGHT)
 8000b12:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <EXTI3_IRQHandler+0x30>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d002      	beq.n	8000b20 <EXTI3_IRQHandler+0x18>
	{
		snake_direction = LEFT;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <EXTI3_IRQHandler+0x34>)
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC3 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 3;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2208      	movs	r2, #8
 8000b24:	601a      	str	r2, [r3, #0]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40013c14 	.word	0x40013c14
 8000b38:	20000004 	.word	0x20000004
 8000b3c:	20000000 	.word	0x20000000

08000b40 <DisplaySnake>:

void DisplaySnake(snake_Type *snake)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	positionToMatrixPos(snake->x_pos, snake->y_pos, snake->snakeSize, snake->outputArray);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	1d18      	adds	r0, r3, #4
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3384      	adds	r3, #132	@ 0x84
 8000b5a:	f7ff fe7b 	bl	8000854 <positionToMatrixPos>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <SnakeInit>:

void SnakeInit(snake_Type *snake)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b085      	sub	sp, #20
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
	snake->snakeSize = 3;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2203      	movs	r2, #3
 8000b72:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 64; i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	e00e      	b.n	8000b98 <SnakeInit+0x32>
	{
		snake->x_pos[i] = 0;
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	3304      	adds	r3, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
		snake->y_pos[i] = 0;
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	3344      	adds	r3, #68	@ 0x44
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 64; i++)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3301      	adds	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b9c:	dded      	ble.n	8000b7a <SnakeInit+0x14>
	}
	snake->x_pos[0] = 3;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	711a      	strb	r2, [r3, #4]
	snake->x_pos[1] = 2;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	715a      	strb	r2, [r3, #5]
	snake->y_pos[0] = 2;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2202      	movs	r2, #2
 8000bae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	snake->y_pos[1] = 2;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	snake->x_pos[2] = 1;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	719a      	strb	r2, [r3, #6]
	snake->y_pos[2] = 2;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	for (int i = 0; i < 9; i++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	e008      	b.n	8000be0 <SnakeInit+0x7a>
	{
		snake->outputArray[i] = 0;
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	3384      	adds	r3, #132	@ 0x84
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	ddf3      	ble.n	8000bce <SnakeInit+0x68>
	}
}
 8000be6:	bf00      	nop
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <playLoseScreen>:

void playLoseScreen(void)
{
 8000bf4:	b5b0      	push	{r4, r5, r7, lr}
 8000bf6:	b09e      	sub	sp, #120	@ 0x78
 8000bf8:	af00      	add	r7, sp, #0
	// Double X
	int doubleXSize = 16;
 8000bfa:	2310      	movs	r3, #16
 8000bfc:	677b      	str	r3, [r7, #116]	@ 0x74
	uint8_t doubleX_x_pos[] = {1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8};
 8000bfe:	4b55      	ldr	r3, [pc, #340]	@ (8000d54 <playLoseScreen+0x160>)
 8000c00:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8000c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t doubleX_y_pos[] = {1,8,2,7,3,6,4,5,4,5,3,6,2,7,1,8};
 8000c0a:	4b53      	ldr	r3, [pc, #332]	@ (8000d58 <playLoseScreen+0x164>)
 8000c0c:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8000c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t doubleXoutputArray[9] = {0};
 8000c16:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	721a      	strb	r2, [r3, #8]
	positionToMatrixPos(doubleX_x_pos, doubleX_y_pos, doubleXSize, doubleXoutputArray);
 8000c22:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c26:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000c2a:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8000c2e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c30:	f7ff fe10 	bl	8000854 <positionToMatrixPos>

	LEDMatrixWrite(doubleXoutputArray);
 8000c34:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fe3c 	bl	80008b6 <LEDMatrixWrite>
	Delay(500);
 8000c3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c42:	f7ff fc17 	bl	8000474 <Delay>
	matrixClear();
 8000c46:	f7ff fda0 	bl	800078a <matrixClear>
	Delay(500);
 8000c4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c4e:	f7ff fc11 	bl	8000474 <Delay>
	LEDMatrixWrite(doubleXoutputArray);
 8000c52:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fe2d 	bl	80008b6 <LEDMatrixWrite>
	Delay(500);
 8000c5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c60:	f7ff fc08 	bl	8000474 <Delay>
	matrixClear();
 8000c64:	f7ff fd91 	bl	800078a <matrixClear>
	Delay(500);
 8000c68:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c6c:	f7ff fc02 	bl	8000474 <Delay>

	// R? (Restart question)
	int RSize = 23;
 8000c70:	2317      	movs	r3, #23
 8000c72:	673b      	str	r3, [r7, #112]	@ 0x70
	uint8_t R_x_pos[] = {1,1,1,1,1,1,2,2,3,3,3,4,4,4,6,6,7,7,7,8,8,8,8};
 8000c74:	4b39      	ldr	r3, [pc, #228]	@ (8000d5c <playLoseScreen+0x168>)
 8000c76:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000c7a:	461d      	mov	r5, r3
 8000c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c84:	6020      	str	r0, [r4, #0]
 8000c86:	3404      	adds	r4, #4
 8000c88:	8021      	strh	r1, [r4, #0]
 8000c8a:	3402      	adds	r4, #2
 8000c8c:	0c0b      	lsrs	r3, r1, #16
 8000c8e:	7023      	strb	r3, [r4, #0]
	uint8_t R_y_pos[] = {1,2,3,4,5,6,4,6,3,4,6,1,2,5,5,6,1,3,6,3,4,5,6};
 8000c90:	4b33      	ldr	r3, [pc, #204]	@ (8000d60 <playLoseScreen+0x16c>)
 8000c92:	f107 0414 	add.w	r4, r7, #20
 8000c96:	461d      	mov	r5, r3
 8000c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ca0:	6020      	str	r0, [r4, #0]
 8000ca2:	3404      	adds	r4, #4
 8000ca4:	8021      	strh	r1, [r4, #0]
 8000ca6:	3402      	adds	r4, #2
 8000ca8:	0c0b      	lsrs	r3, r1, #16
 8000caa:	7023      	strb	r3, [r4, #0]
	uint8_t RoutputArray[9] = {0};
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	721a      	strb	r2, [r3, #8]
	positionToMatrixPos(R_x_pos, R_y_pos, RSize, RoutputArray);
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	f107 0114 	add.w	r1, r7, #20
 8000cc0:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000cc4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000cc6:	f7ff fdc5 	bl	8000854 <positionToMatrixPos>

	while(1)
	{
		for (volatile int i = 1; i <= 8; i++)
 8000cca:	2301      	movs	r3, #1
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	e018      	b.n	8000d02 <playLoseScreen+0x10e>
		{
			for (volatile int j = 1; j <= i; j++)
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	e00a      	b.n	8000cec <playLoseScreen+0xf8>
			{
				LEDMatrixRowWrite(RoutputArray, j);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fe0a 	bl	80008fa <LEDMatrixRowWrite>
			for (volatile int j = 1; j <= i; j++)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	ddf0      	ble.n	8000cd6 <playLoseScreen+0xe2>
			}
			Delay(500);
 8000cf4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cf8:	f7ff fbbc 	bl	8000474 <Delay>
		for (volatile int i = 1; i <= 8; i++)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	dde3      	ble.n	8000cd0 <playLoseScreen+0xdc>
		}
		matrixClear();
 8000d08:	f7ff fd3f 	bl	800078a <matrixClear>
		Delay(500);
 8000d0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d10:	f7ff fbb0 	bl	8000474 <Delay>
		LEDMatrixWrite(RoutputArray);
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fdcc 	bl	80008b6 <LEDMatrixWrite>
		Delay(500);
 8000d1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d22:	f7ff fba7 	bl	8000474 <Delay>
		matrixClear();
 8000d26:	f7ff fd30 	bl	800078a <matrixClear>
		Delay(500);
 8000d2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d2e:	f7ff fba1 	bl	8000474 <Delay>
		LEDMatrixWrite(RoutputArray);
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fdbd 	bl	80008b6 <LEDMatrixWrite>
		Delay(4000);
 8000d3c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000d40:	f7ff fb98 	bl	8000474 <Delay>
		matrixClear();
 8000d44:	f7ff fd21 	bl	800078a <matrixClear>
		Delay(500);
 8000d48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d4c:	f7ff fb92 	bl	8000474 <Delay>
		for (volatile int i = 1; i <= 8; i++)
 8000d50:	e7bb      	b.n	8000cca <playLoseScreen+0xd6>
 8000d52:	bf00      	nop
 8000d54:	0800236c 	.word	0x0800236c
 8000d58:	0800237c 	.word	0x0800237c
 8000d5c:	0800238c 	.word	0x0800238c
 8000d60:	080023a4 	.word	0x080023a4

08000d64 <SnakeDead>:
	}
}

void SnakeDead(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
	alive = false;
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <SnakeDead+0x14>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	20000008 	.word	0x20000008

08000d7c <SnakeCheckAfterMove>:

void SnakeCheckAfterMove(snake_Type *snake)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	// Check if out of bounds
	uint8_t snake_head_x = snake->x_pos[0];
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	791b      	ldrb	r3, [r3, #4]
 8000d88:	72fb      	strb	r3, [r7, #11]
	uint8_t snake_head_y = snake->y_pos[0];
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000d90:	72bb      	strb	r3, [r7, #10]
	if (snake_head_x < 1 || snake_head_x > 8)
 8000d92:	7afb      	ldrb	r3, [r7, #11]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <SnakeCheckAfterMove+0x22>
 8000d98:	7afb      	ldrb	r3, [r7, #11]
 8000d9a:	2b08      	cmp	r3, #8
 8000d9c:	d901      	bls.n	8000da2 <SnakeCheckAfterMove+0x26>
	{
		SnakeDead();
 8000d9e:	f7ff ffe1 	bl	8000d64 <SnakeDead>
	}
	if (snake_head_y < 1 || snake_head_y > 8)
 8000da2:	7abb      	ldrb	r3, [r7, #10]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <SnakeCheckAfterMove+0x32>
 8000da8:	7abb      	ldrb	r3, [r7, #10]
 8000daa:	2b08      	cmp	r3, #8
 8000dac:	d901      	bls.n	8000db2 <SnakeCheckAfterMove+0x36>
	{
		SnakeDead();
 8000dae:	f7ff ffd9 	bl	8000d64 <SnakeDead>
	}
	// Check if head hits body
	for (int i = 1; i < snake->snakeSize; i++)
 8000db2:	2301      	movs	r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	e014      	b.n	8000de2 <SnakeCheckAfterMove+0x66>
	{
		if (snake_head_x == snake->x_pos[i])
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	7afa      	ldrb	r2, [r7, #11]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d109      	bne.n	8000ddc <SnakeCheckAfterMove+0x60>
		{
			if (snake_head_y == snake->y_pos[i])
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4413      	add	r3, r2
 8000dce:	3344      	adds	r3, #68	@ 0x44
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	7aba      	ldrb	r2, [r7, #10]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d101      	bne.n	8000ddc <SnakeCheckAfterMove+0x60>
			{
				SnakeDead();
 8000dd8:	f7ff ffc4 	bl	8000d64 <SnakeDead>
	for (int i = 1; i < snake->snakeSize; i++)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	3301      	adds	r3, #1
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dbe5      	blt.n	8000db8 <SnakeCheckAfterMove+0x3c>
			}
		}
	}
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <ClearOutputArray>:

void ClearOutputArray(snake_Type *snake)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b085      	sub	sp, #20
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 9; i++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	e008      	b.n	8000e16 <ClearOutputArray+0x20>
	{
		snake->outputArray[i] = 0;
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	3384      	adds	r3, #132	@ 0x84
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3301      	adds	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	ddf3      	ble.n	8000e04 <ClearOutputArray+0xe>
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <SnakeGrow>:

void SnakeGrow(snake_Type *snake)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
	snake->snakeSize += 1;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	601a      	str	r2, [r3, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <AppleInit>:

void AppleInit(apple_Type *apple)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	apple->x_pos[0] = 3;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2203      	movs	r2, #3
 8000e54:	701a      	strb	r2, [r3, #0]
	apple->y_pos[0] = 7;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2207      	movs	r2, #7
 8000e5a:	705a      	strb	r2, [r3, #1]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <DisplayApple>:

void DisplayApple(snake_Type *snake, apple_Type *apple)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	positionToMatrixPos(apple->x_pos, apple->y_pos, 1, snake->outputArray);
 8000e72:	6838      	ldr	r0, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	1c59      	adds	r1, r3, #1
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3384      	adds	r3, #132	@ 0x84
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f7ff fce9 	bl	8000854 <positionToMatrixPos>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <CheckIfAppleCollected>:

bool CheckIfAppleCollected(uint8_t snakeHeadx, uint8_t snakeHeady, apple_Type *apple)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	603a      	str	r2, [r7, #0]
 8000e94:	71fb      	strb	r3, [r7, #7]
 8000e96:	460b      	mov	r3, r1
 8000e98:	71bb      	strb	r3, [r7, #6]
	if (snakeHeadx == apple->x_pos[0])
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	79fa      	ldrb	r2, [r7, #7]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d106      	bne.n	8000eb2 <CheckIfAppleCollected+0x28>
	{
		if (snakeHeady == apple->y_pos[0])
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	785b      	ldrb	r3, [r3, #1]
 8000ea8:	79ba      	ldrb	r2, [r7, #6]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d101      	bne.n	8000eb2 <CheckIfAppleCollected+0x28>
		{
			return true;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <CheckIfAppleCollected+0x2a>
		}
	}
	return false;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <ReplaceApple>:

void ReplaceApple(snake_Type *snake, apple_Type *apple)
{
 8000ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ec4:	b09b      	sub	sp, #108	@ 0x6c
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	466b      	mov	r3, sp
 8000ece:	461e      	mov	r6, r3
	// Generating new random apple position

	// Check through snake x positions
	uint8_t check_x[10] = {0};
 8000ed0:	f107 0320 	add.w	r3, r7, #32
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	811a      	strh	r2, [r3, #8]
	uint8_t check_x_size = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (int i = 0; i < snake->snakeSize; i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	663b      	str	r3, [r7, #96]	@ 0x60
 8000ee6:	e00e      	b.n	8000f06 <ReplaceApple+0x46>
	{
		check_x[snake->x_pos[i]] = 1;
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000eec:	4413      	add	r3, r2
 8000eee:	3304      	adds	r3, #4
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3360      	adds	r3, #96	@ 0x60
 8000ef4:	f107 0208 	add.w	r2, r7, #8
 8000ef8:	4413      	add	r3, r2
 8000efa:	2201      	movs	r2, #1
 8000efc:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (int i = 0; i < snake->snakeSize; i++)
 8000f00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f02:	3301      	adds	r3, #1
 8000f04:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbeb      	blt.n	8000ee8 <ReplaceApple+0x28>
	}
	// Generate new list with elements not in snake x positions
	for (int i = 0; i < 10; i++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000f14:	e00e      	b.n	8000f34 <ReplaceApple+0x74>
	{
		if (check_x[i] == 0)
 8000f16:	f107 0220 	add.w	r2, r7, #32
 8000f1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f1c:	4413      	add	r3, r2
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d104      	bne.n	8000f2e <ReplaceApple+0x6e>
		{
			check_x_size += 1;
 8000f24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000f28:	3301      	adds	r3, #1
 8000f2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (int i = 0; i < 10; i++)
 8000f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f30:	3301      	adds	r3, #1
 8000f32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000f34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f36:	2b09      	cmp	r3, #9
 8000f38:	dded      	ble.n	8000f16 <ReplaceApple+0x56>
		}
	}
	uint8_t newPossibleX[check_x_size];
 8000f3a:	f897 1067 	ldrb.w	r1, [r7, #103]	@ 0x67
 8000f3e:	460b      	mov	r3, r1
 8000f40:	3b01      	subs	r3, #1
 8000f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f44:	b2cb      	uxtb	r3, r1
 8000f46:	2200      	movs	r2, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	00c3      	lsls	r3, r0, #3
 8000f58:	6838      	ldr	r0, [r7, #0]
 8000f5a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	00c2      	lsls	r2, r0, #3
 8000f62:	b2cb      	uxtb	r3, r1
 8000f64:	2200      	movs	r2, #0
 8000f66:	469a      	mov	sl, r3
 8000f68:	4693      	mov	fp, r2
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000f76:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000f7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000f7e:	460b      	mov	r3, r1
 8000f80:	3307      	adds	r3, #7
 8000f82:	08db      	lsrs	r3, r3, #3
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	ebad 0d03 	sub.w	sp, sp, r3
 8000f8a:	466b      	mov	r3, sp
 8000f8c:	3300      	adds	r3, #0
 8000f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint8_t newPossibleXPtr = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	for (int i = 0; i < 10; i++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	657b      	str	r3, [r7, #84]	@ 0x54
 8000f9a:	e014      	b.n	8000fc6 <ReplaceApple+0x106>
	{
		if (check_x[i] == 0)
 8000f9c:	f107 0220 	add.w	r2, r7, #32
 8000fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10a      	bne.n	8000fc0 <ReplaceApple+0x100>
		{
			newPossibleX[newPossibleXPtr] = i;
 8000faa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000fae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000fb0:	b2d1      	uxtb	r1, r2
 8000fb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000fb4:	54d1      	strb	r1, [r2, r3]
			newPossibleXPtr += 1;
 8000fb6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	for (int i = 0; i < 10; i++)
 8000fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8000fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fc8:	2b09      	cmp	r3, #9
 8000fca:	dde7      	ble.n	8000f9c <ReplaceApple+0xdc>
		}
	}
	// Now pick a number from random and update apple x, then same for Y
	uint8_t randomX = rand() % check_x_size;
 8000fcc:	f000 f98a 	bl	80012e4 <rand>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000fd6:	fb92 f1f3 	sdiv	r1, r2, r3
 8000fda:	fb01 f303 	mul.w	r3, r1, r3
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	apple->x_pos[0] = newPossibleX[randomX];
 8000fe4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000fea:	5cd2      	ldrb	r2, [r2, r3]
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	701a      	strb	r2, [r3, #0]


	// Check through snake y positions
	uint8_t check_y[10] = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	811a      	strh	r2, [r3, #8]
	uint8_t check_y_size = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	for (int i = 0; i < snake->snakeSize; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001006:	e00e      	b.n	8001026 <ReplaceApple+0x166>
	{
		check_y[snake->y_pos[i]] = 1;
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800100c:	4413      	add	r3, r2
 800100e:	3344      	adds	r3, #68	@ 0x44
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	3360      	adds	r3, #96	@ 0x60
 8001014:	f107 0208 	add.w	r2, r7, #8
 8001018:	4413      	add	r3, r2
 800101a:	2201      	movs	r2, #1
 800101c:	f803 2c54 	strb.w	r2, [r3, #-84]
	for (int i = 0; i < snake->snakeSize; i++)
 8001020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001022:	3301      	adds	r3, #1
 8001024:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800102c:	429a      	cmp	r2, r3
 800102e:	dbeb      	blt.n	8001008 <ReplaceApple+0x148>
	}
	// Generate new list with elements not in snake y positions
	for (int i = 0; i < 10; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001034:	e00e      	b.n	8001054 <ReplaceApple+0x194>
	{
		if (check_y[i] == 0)
 8001036:	f107 0214 	add.w	r2, r7, #20
 800103a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d104      	bne.n	800104e <ReplaceApple+0x18e>
		{
			check_y_size += 1;
 8001044:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001048:	3301      	adds	r3, #1
 800104a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	for (int i = 0; i < 10; i++)
 800104e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001050:	3301      	adds	r3, #1
 8001052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001056:	2b09      	cmp	r3, #9
 8001058:	dded      	ble.n	8001036 <ReplaceApple+0x176>
		}
	}
	uint8_t newPossibleY[check_y_size];
 800105a:	f897 1053 	ldrb.w	r1, [r7, #83]	@ 0x53
 800105e:	460b      	mov	r3, r1
 8001060:	3b01      	subs	r3, #1
 8001062:	633b      	str	r3, [r7, #48]	@ 0x30
 8001064:	b2cb      	uxtb	r3, r1
 8001066:	2200      	movs	r2, #0
 8001068:	4698      	mov	r8, r3
 800106a:	4691      	mov	r9, r2
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001078:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800107c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001080:	b2cb      	uxtb	r3, r1
 8001082:	2200      	movs	r2, #0
 8001084:	461c      	mov	r4, r3
 8001086:	4615      	mov	r5, r2
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	00eb      	lsls	r3, r5, #3
 8001092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001096:	00e2      	lsls	r2, r4, #3
 8001098:	460b      	mov	r3, r1
 800109a:	3307      	adds	r3, #7
 800109c:	08db      	lsrs	r3, r3, #3
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	ebad 0d03 	sub.w	sp, sp, r3
 80010a4:	466b      	mov	r3, sp
 80010a6:	3300      	adds	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t newPossibleYPtr = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	for (int i = 0; i < 10; i++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80010b4:	e014      	b.n	80010e0 <ReplaceApple+0x220>
	{
		if (check_y[i] == 0)
 80010b6:	f107 0214 	add.w	r2, r7, #20
 80010ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10a      	bne.n	80010da <ReplaceApple+0x21a>
		{
			newPossibleY[newPossibleYPtr] = i;
 80010c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80010c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80010ca:	b2d1      	uxtb	r1, r2
 80010cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010ce:	54d1      	strb	r1, [r2, r3]
			newPossibleYPtr += 1;
 80010d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80010d4:	3301      	adds	r3, #1
 80010d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	for (int i = 0; i < 10; i++)
 80010da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010dc:	3301      	adds	r3, #1
 80010de:	643b      	str	r3, [r7, #64]	@ 0x40
 80010e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010e2:	2b09      	cmp	r3, #9
 80010e4:	dde7      	ble.n	80010b6 <ReplaceApple+0x1f6>
		}
	}
	// Now pick a number from random and update apple x, then same for Y
	uint8_t randomY = rand() % check_y_size;
 80010e6:	f000 f8fd 	bl	80012e4 <rand>
 80010ea:	4602      	mov	r2, r0
 80010ec:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80010f0:	fb92 f1f3 	sdiv	r1, r2, r3
 80010f4:	fb01 f303 	mul.w	r3, r1, r3
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	apple->y_pos[0] = newPossibleY[randomY];
 80010fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001104:	5cd2      	ldrb	r2, [r2, r3]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	705a      	strb	r2, [r3, #1]
 800110a:	46b5      	mov	sp, r6
}
 800110c:	bf00      	nop
 800110e:	376c      	adds	r7, #108	@ 0x6c
 8001110:	46bd      	mov	sp, r7
 8001112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001116 <DisplayGame>:

void DisplayGame(snake_Type *snake, apple_Type *apple)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
	DisplaySnake(snake);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff fd0d 	bl	8000b40 <DisplaySnake>
	DisplayApple(snake, apple);
 8001126:	6839      	ldr	r1, [r7, #0]
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff fe9d 	bl	8000e68 <DisplayApple>
	LEDMatrixWrite(snake->outputArray);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3384      	adds	r3, #132	@ 0x84
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fbbf 	bl	80008b6 <LEDMatrixWrite>
	ClearOutputArray(snake);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff fe5c 	bl	8000df6 <ClearOutputArray>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <MoveSnake>:

void MoveSnake(snake_Type *snake, apple_Type *apple)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	uint8_t tempToPlacex = snake->x_pos[0];
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	791b      	ldrb	r3, [r3, #4]
 8001156:	75fb      	strb	r3, [r7, #23]
	uint8_t tempToPlacey = snake->y_pos[0];
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800115e:	75bb      	strb	r3, [r7, #22]
	uint8_t tempToStorex = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
	uint8_t tempToStorey = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	73bb      	strb	r3, [r7, #14]
	switch(snake_direction)
 8001168:	4b31      	ldr	r3, [pc, #196]	@ (8001230 <MoveSnake+0xe8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b03      	cmp	r3, #3
 800116e:	d81a      	bhi.n	80011a6 <MoveSnake+0x5e>
 8001170:	a201      	add	r2, pc, #4	@ (adr r2, 8001178 <MoveSnake+0x30>)
 8001172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001176:	bf00      	nop
 8001178:	08001189 	.word	0x08001189
 800117c:	08001191 	.word	0x08001191
 8001180:	08001199 	.word	0x08001199
 8001184:	080011a1 	.word	0x080011a1
	{
		case UP:
			tempToPlacey += 1;
 8001188:	7dbb      	ldrb	r3, [r7, #22]
 800118a:	3301      	adds	r3, #1
 800118c:	75bb      	strb	r3, [r7, #22]
			break;
 800118e:	e00a      	b.n	80011a6 <MoveSnake+0x5e>
		case RIGHT:
			tempToPlacex += 1;
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	3301      	adds	r3, #1
 8001194:	75fb      	strb	r3, [r7, #23]
			break;
 8001196:	e006      	b.n	80011a6 <MoveSnake+0x5e>
		case DOWN:
			tempToPlacey -= 1;
 8001198:	7dbb      	ldrb	r3, [r7, #22]
 800119a:	3b01      	subs	r3, #1
 800119c:	75bb      	strb	r3, [r7, #22]
			break;
 800119e:	e002      	b.n	80011a6 <MoveSnake+0x5e>
		case LEFT:
			tempToPlacex -= 1;
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	75fb      	strb	r3, [r7, #23]
	}

	bool apple_collected = CheckIfAppleCollected(tempToPlacex, tempToPlacey, apple);
 80011a6:	7db9      	ldrb	r1, [r7, #22]
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fe6c 	bl	8000e8a <CheckIfAppleCollected>
 80011b2:	4603      	mov	r3, r0
 80011b4:	737b      	strb	r3, [r7, #13]
	if (apple_collected)
 80011b6:	7b7b      	ldrb	r3, [r7, #13]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <MoveSnake+0x7a>
	{
		SnakeGrow(snake);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff fe34 	bl	8000e2a <SnakeGrow>
	}

	for (int i = 0; i < snake->snakeSize; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	e01e      	b.n	8001206 <MoveSnake+0xbe>
	{
		tempToStorex = snake->x_pos[i];
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4413      	add	r3, r2
 80011ce:	3304      	adds	r3, #4
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	73fb      	strb	r3, [r7, #15]
		tempToStorey = snake->y_pos[i];
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4413      	add	r3, r2
 80011da:	3344      	adds	r3, #68	@ 0x44
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	73bb      	strb	r3, [r7, #14]
		snake->x_pos[i] = tempToPlacex;
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4413      	add	r3, r2
 80011e6:	3304      	adds	r3, #4
 80011e8:	7dfa      	ldrb	r2, [r7, #23]
 80011ea:	701a      	strb	r2, [r3, #0]
		snake->y_pos[i] = tempToPlacey;
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4413      	add	r3, r2
 80011f2:	3344      	adds	r3, #68	@ 0x44
 80011f4:	7dba      	ldrb	r2, [r7, #22]
 80011f6:	701a      	strb	r2, [r3, #0]
		tempToPlacex = tempToStorex;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	75fb      	strb	r3, [r7, #23]
		tempToPlacey = tempToStorey;
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
 80011fe:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < snake->snakeSize; i++)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	3301      	adds	r3, #1
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	dbdb      	blt.n	80011c8 <MoveSnake+0x80>
	}
	previous_direction = snake_direction;
 8001210:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <MoveSnake+0xe8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	@ (8001234 <MoveSnake+0xec>)
 8001216:	6013      	str	r3, [r2, #0]

	if (apple_collected)
 8001218:	7b7b      	ldrb	r3, [r7, #13]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <MoveSnake+0xde>
	{
		ReplaceApple(snake, apple);
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fe4d 	bl	8000ec0 <ReplaceApple>
	}
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000000 	.word	0x20000000
 8001234:	20000004 	.word	0x20000004

08001238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001238:	480c      	ldr	r0, [pc, #48]	@ (800126c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800123a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800123c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480b      	ldr	r0, [pc, #44]	@ (8001270 <LoopForever+0x6>)
  ldr r1, =_edata
 8001242:	490c      	ldr	r1, [pc, #48]	@ (8001274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001244:	4a0c      	ldr	r2, [pc, #48]	@ (8001278 <LoopForever+0xe>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a09      	ldr	r2, [pc, #36]	@ (800127c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001258:	4c09      	ldr	r4, [pc, #36]	@ (8001280 <LoopForever+0x16>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

  bl main
 8001266:	f7ff f823 	bl	80002b0 <main>

0800126a <LoopForever>:

LoopForever:
  b LoopForever
 800126a:	e7fe      	b.n	800126a <LoopForever>
  ldr   r0, =_estack
 800126c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001278:	080024ac 	.word	0x080024ac
  ldr r2, =_sbss
 800127c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001280:	200001d4 	.word	0x200001d4

08001284 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC_IRQHandler>
	...

08001288 <srand>:
 8001288:	b538      	push	{r3, r4, r5, lr}
 800128a:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <srand+0x44>)
 800128c:	681d      	ldr	r5, [r3, #0]
 800128e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001290:	4604      	mov	r4, r0
 8001292:	b9b3      	cbnz	r3, 80012c2 <srand+0x3a>
 8001294:	2018      	movs	r0, #24
 8001296:	f000 fa51 	bl	800173c <malloc>
 800129a:	4602      	mov	r2, r0
 800129c:	6328      	str	r0, [r5, #48]	@ 0x30
 800129e:	b920      	cbnz	r0, 80012aa <srand+0x22>
 80012a0:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <srand+0x48>)
 80012a2:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <srand+0x4c>)
 80012a4:	2146      	movs	r1, #70	@ 0x46
 80012a6:	f000 f9e1 	bl	800166c <__assert_func>
 80012aa:	490b      	ldr	r1, [pc, #44]	@ (80012d8 <srand+0x50>)
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <srand+0x54>)
 80012ae:	e9c0 1300 	strd	r1, r3, [r0]
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <srand+0x58>)
 80012b4:	6083      	str	r3, [r0, #8]
 80012b6:	230b      	movs	r3, #11
 80012b8:	8183      	strh	r3, [r0, #12]
 80012ba:	2100      	movs	r1, #0
 80012bc:	2001      	movs	r0, #1
 80012be:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80012c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80012c4:	2200      	movs	r2, #0
 80012c6:	611c      	str	r4, [r3, #16]
 80012c8:	615a      	str	r2, [r3, #20]
 80012ca:	bd38      	pop	{r3, r4, r5, pc}
 80012cc:	20000018 	.word	0x20000018
 80012d0:	080023bb 	.word	0x080023bb
 80012d4:	080023d2 	.word	0x080023d2
 80012d8:	abcd330e 	.word	0xabcd330e
 80012dc:	e66d1234 	.word	0xe66d1234
 80012e0:	0005deec 	.word	0x0005deec

080012e4 <rand>:
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <rand+0x5c>)
 80012e6:	b510      	push	{r4, lr}
 80012e8:	681c      	ldr	r4, [r3, #0]
 80012ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80012ec:	b9b3      	cbnz	r3, 800131c <rand+0x38>
 80012ee:	2018      	movs	r0, #24
 80012f0:	f000 fa24 	bl	800173c <malloc>
 80012f4:	4602      	mov	r2, r0
 80012f6:	6320      	str	r0, [r4, #48]	@ 0x30
 80012f8:	b920      	cbnz	r0, 8001304 <rand+0x20>
 80012fa:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <rand+0x60>)
 80012fc:	4812      	ldr	r0, [pc, #72]	@ (8001348 <rand+0x64>)
 80012fe:	2152      	movs	r1, #82	@ 0x52
 8001300:	f000 f9b4 	bl	800166c <__assert_func>
 8001304:	4911      	ldr	r1, [pc, #68]	@ (800134c <rand+0x68>)
 8001306:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <rand+0x6c>)
 8001308:	e9c0 1300 	strd	r1, r3, [r0]
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <rand+0x70>)
 800130e:	6083      	str	r3, [r0, #8]
 8001310:	230b      	movs	r3, #11
 8001312:	8183      	strh	r3, [r0, #12]
 8001314:	2100      	movs	r1, #0
 8001316:	2001      	movs	r0, #1
 8001318:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800131c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800131e:	480e      	ldr	r0, [pc, #56]	@ (8001358 <rand+0x74>)
 8001320:	690b      	ldr	r3, [r1, #16]
 8001322:	694c      	ldr	r4, [r1, #20]
 8001324:	4a0d      	ldr	r2, [pc, #52]	@ (800135c <rand+0x78>)
 8001326:	4358      	muls	r0, r3
 8001328:	fb02 0004 	mla	r0, r2, r4, r0
 800132c:	fba3 3202 	umull	r3, r2, r3, r2
 8001330:	3301      	adds	r3, #1
 8001332:	eb40 0002 	adc.w	r0, r0, r2
 8001336:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800133a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800133e:	bd10      	pop	{r4, pc}
 8001340:	20000018 	.word	0x20000018
 8001344:	080023bb 	.word	0x080023bb
 8001348:	080023d2 	.word	0x080023d2
 800134c:	abcd330e 	.word	0xabcd330e
 8001350:	e66d1234 	.word	0xe66d1234
 8001354:	0005deec 	.word	0x0005deec
 8001358:	5851f42d 	.word	0x5851f42d
 800135c:	4c957f2d 	.word	0x4c957f2d

08001360 <std>:
 8001360:	2300      	movs	r3, #0
 8001362:	b510      	push	{r4, lr}
 8001364:	4604      	mov	r4, r0
 8001366:	e9c0 3300 	strd	r3, r3, [r0]
 800136a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800136e:	6083      	str	r3, [r0, #8]
 8001370:	8181      	strh	r1, [r0, #12]
 8001372:	6643      	str	r3, [r0, #100]	@ 0x64
 8001374:	81c2      	strh	r2, [r0, #14]
 8001376:	6183      	str	r3, [r0, #24]
 8001378:	4619      	mov	r1, r3
 800137a:	2208      	movs	r2, #8
 800137c:	305c      	adds	r0, #92	@ 0x5c
 800137e:	f000 f8f4 	bl	800156a <memset>
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <std+0x58>)
 8001384:	6263      	str	r3, [r4, #36]	@ 0x24
 8001386:	4b0d      	ldr	r3, [pc, #52]	@ (80013bc <std+0x5c>)
 8001388:	62a3      	str	r3, [r4, #40]	@ 0x28
 800138a:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <std+0x60>)
 800138c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800138e:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <std+0x64>)
 8001390:	6323      	str	r3, [r4, #48]	@ 0x30
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <std+0x68>)
 8001394:	6224      	str	r4, [r4, #32]
 8001396:	429c      	cmp	r4, r3
 8001398:	d006      	beq.n	80013a8 <std+0x48>
 800139a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800139e:	4294      	cmp	r4, r2
 80013a0:	d002      	beq.n	80013a8 <std+0x48>
 80013a2:	33d0      	adds	r3, #208	@ 0xd0
 80013a4:	429c      	cmp	r4, r3
 80013a6:	d105      	bne.n	80013b4 <std+0x54>
 80013a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80013ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013b0:	f000 b958 	b.w	8001664 <__retarget_lock_init_recursive>
 80013b4:	bd10      	pop	{r4, pc}
 80013b6:	bf00      	nop
 80013b8:	080014e5 	.word	0x080014e5
 80013bc:	08001507 	.word	0x08001507
 80013c0:	0800153f 	.word	0x0800153f
 80013c4:	08001563 	.word	0x08001563
 80013c8:	20000084 	.word	0x20000084

080013cc <stdio_exit_handler>:
 80013cc:	4a02      	ldr	r2, [pc, #8]	@ (80013d8 <stdio_exit_handler+0xc>)
 80013ce:	4903      	ldr	r1, [pc, #12]	@ (80013dc <stdio_exit_handler+0x10>)
 80013d0:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <stdio_exit_handler+0x14>)
 80013d2:	f000 b869 	b.w	80014a8 <_fwalk_sglue>
 80013d6:	bf00      	nop
 80013d8:	2000000c 	.word	0x2000000c
 80013dc:	080019b1 	.word	0x080019b1
 80013e0:	2000001c 	.word	0x2000001c

080013e4 <cleanup_stdio>:
 80013e4:	6841      	ldr	r1, [r0, #4]
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <cleanup_stdio+0x34>)
 80013e8:	4299      	cmp	r1, r3
 80013ea:	b510      	push	{r4, lr}
 80013ec:	4604      	mov	r4, r0
 80013ee:	d001      	beq.n	80013f4 <cleanup_stdio+0x10>
 80013f0:	f000 fade 	bl	80019b0 <_fflush_r>
 80013f4:	68a1      	ldr	r1, [r4, #8]
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <cleanup_stdio+0x38>)
 80013f8:	4299      	cmp	r1, r3
 80013fa:	d002      	beq.n	8001402 <cleanup_stdio+0x1e>
 80013fc:	4620      	mov	r0, r4
 80013fe:	f000 fad7 	bl	80019b0 <_fflush_r>
 8001402:	68e1      	ldr	r1, [r4, #12]
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <cleanup_stdio+0x3c>)
 8001406:	4299      	cmp	r1, r3
 8001408:	d004      	beq.n	8001414 <cleanup_stdio+0x30>
 800140a:	4620      	mov	r0, r4
 800140c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001410:	f000 bace 	b.w	80019b0 <_fflush_r>
 8001414:	bd10      	pop	{r4, pc}
 8001416:	bf00      	nop
 8001418:	20000084 	.word	0x20000084
 800141c:	200000ec 	.word	0x200000ec
 8001420:	20000154 	.word	0x20000154

08001424 <global_stdio_init.part.0>:
 8001424:	b510      	push	{r4, lr}
 8001426:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <global_stdio_init.part.0+0x30>)
 8001428:	4c0b      	ldr	r4, [pc, #44]	@ (8001458 <global_stdio_init.part.0+0x34>)
 800142a:	4a0c      	ldr	r2, [pc, #48]	@ (800145c <global_stdio_init.part.0+0x38>)
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	4620      	mov	r0, r4
 8001430:	2200      	movs	r2, #0
 8001432:	2104      	movs	r1, #4
 8001434:	f7ff ff94 	bl	8001360 <std>
 8001438:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800143c:	2201      	movs	r2, #1
 800143e:	2109      	movs	r1, #9
 8001440:	f7ff ff8e 	bl	8001360 <std>
 8001444:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001448:	2202      	movs	r2, #2
 800144a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800144e:	2112      	movs	r1, #18
 8001450:	f7ff bf86 	b.w	8001360 <std>
 8001454:	200001bc 	.word	0x200001bc
 8001458:	20000084 	.word	0x20000084
 800145c:	080013cd 	.word	0x080013cd

08001460 <__sfp_lock_acquire>:
 8001460:	4801      	ldr	r0, [pc, #4]	@ (8001468 <__sfp_lock_acquire+0x8>)
 8001462:	f000 b900 	b.w	8001666 <__retarget_lock_acquire_recursive>
 8001466:	bf00      	nop
 8001468:	200001c5 	.word	0x200001c5

0800146c <__sfp_lock_release>:
 800146c:	4801      	ldr	r0, [pc, #4]	@ (8001474 <__sfp_lock_release+0x8>)
 800146e:	f000 b8fb 	b.w	8001668 <__retarget_lock_release_recursive>
 8001472:	bf00      	nop
 8001474:	200001c5 	.word	0x200001c5

08001478 <__sinit>:
 8001478:	b510      	push	{r4, lr}
 800147a:	4604      	mov	r4, r0
 800147c:	f7ff fff0 	bl	8001460 <__sfp_lock_acquire>
 8001480:	6a23      	ldr	r3, [r4, #32]
 8001482:	b11b      	cbz	r3, 800148c <__sinit+0x14>
 8001484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001488:	f7ff bff0 	b.w	800146c <__sfp_lock_release>
 800148c:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <__sinit+0x28>)
 800148e:	6223      	str	r3, [r4, #32]
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <__sinit+0x2c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f5      	bne.n	8001484 <__sinit+0xc>
 8001498:	f7ff ffc4 	bl	8001424 <global_stdio_init.part.0>
 800149c:	e7f2      	b.n	8001484 <__sinit+0xc>
 800149e:	bf00      	nop
 80014a0:	080013e5 	.word	0x080013e5
 80014a4:	200001bc 	.word	0x200001bc

080014a8 <_fwalk_sglue>:
 80014a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014ac:	4607      	mov	r7, r0
 80014ae:	4688      	mov	r8, r1
 80014b0:	4614      	mov	r4, r2
 80014b2:	2600      	movs	r6, #0
 80014b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80014b8:	f1b9 0901 	subs.w	r9, r9, #1
 80014bc:	d505      	bpl.n	80014ca <_fwalk_sglue+0x22>
 80014be:	6824      	ldr	r4, [r4, #0]
 80014c0:	2c00      	cmp	r4, #0
 80014c2:	d1f7      	bne.n	80014b4 <_fwalk_sglue+0xc>
 80014c4:	4630      	mov	r0, r6
 80014c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014ca:	89ab      	ldrh	r3, [r5, #12]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d907      	bls.n	80014e0 <_fwalk_sglue+0x38>
 80014d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80014d4:	3301      	adds	r3, #1
 80014d6:	d003      	beq.n	80014e0 <_fwalk_sglue+0x38>
 80014d8:	4629      	mov	r1, r5
 80014da:	4638      	mov	r0, r7
 80014dc:	47c0      	blx	r8
 80014de:	4306      	orrs	r6, r0
 80014e0:	3568      	adds	r5, #104	@ 0x68
 80014e2:	e7e9      	b.n	80014b8 <_fwalk_sglue+0x10>

080014e4 <__sread>:
 80014e4:	b510      	push	{r4, lr}
 80014e6:	460c      	mov	r4, r1
 80014e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014ec:	f000 f896 	bl	800161c <_read_r>
 80014f0:	2800      	cmp	r0, #0
 80014f2:	bfab      	itete	ge
 80014f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80014f6:	89a3      	ldrhlt	r3, [r4, #12]
 80014f8:	181b      	addge	r3, r3, r0
 80014fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80014fe:	bfac      	ite	ge
 8001500:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001502:	81a3      	strhlt	r3, [r4, #12]
 8001504:	bd10      	pop	{r4, pc}

08001506 <__swrite>:
 8001506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800150a:	461f      	mov	r7, r3
 800150c:	898b      	ldrh	r3, [r1, #12]
 800150e:	05db      	lsls	r3, r3, #23
 8001510:	4605      	mov	r5, r0
 8001512:	460c      	mov	r4, r1
 8001514:	4616      	mov	r6, r2
 8001516:	d505      	bpl.n	8001524 <__swrite+0x1e>
 8001518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800151c:	2302      	movs	r3, #2
 800151e:	2200      	movs	r2, #0
 8001520:	f000 f86a 	bl	80015f8 <_lseek_r>
 8001524:	89a3      	ldrh	r3, [r4, #12]
 8001526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800152a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800152e:	81a3      	strh	r3, [r4, #12]
 8001530:	4632      	mov	r2, r6
 8001532:	463b      	mov	r3, r7
 8001534:	4628      	mov	r0, r5
 8001536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800153a:	f000 b881 	b.w	8001640 <_write_r>

0800153e <__sseek>:
 800153e:	b510      	push	{r4, lr}
 8001540:	460c      	mov	r4, r1
 8001542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001546:	f000 f857 	bl	80015f8 <_lseek_r>
 800154a:	1c43      	adds	r3, r0, #1
 800154c:	89a3      	ldrh	r3, [r4, #12]
 800154e:	bf15      	itete	ne
 8001550:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001552:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001556:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800155a:	81a3      	strheq	r3, [r4, #12]
 800155c:	bf18      	it	ne
 800155e:	81a3      	strhne	r3, [r4, #12]
 8001560:	bd10      	pop	{r4, pc}

08001562 <__sclose>:
 8001562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001566:	f000 b825 	b.w	80015b4 <_close_r>

0800156a <memset>:
 800156a:	4402      	add	r2, r0
 800156c:	4603      	mov	r3, r0
 800156e:	4293      	cmp	r3, r2
 8001570:	d100      	bne.n	8001574 <memset+0xa>
 8001572:	4770      	bx	lr
 8001574:	f803 1b01 	strb.w	r1, [r3], #1
 8001578:	e7f9      	b.n	800156e <memset+0x4>
	...

0800157c <time>:
 800157c:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <time+0x34>)
 8001580:	f04f 36ff 	mov.w	r6, #4294967295
 8001584:	f04f 37ff 	mov.w	r7, #4294967295
 8001588:	4669      	mov	r1, sp
 800158a:	4604      	mov	r4, r0
 800158c:	2200      	movs	r2, #0
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	e9cd 6700 	strd	r6, r7, [sp]
 8001594:	f000 f81e 	bl	80015d4 <_gettimeofday_r>
 8001598:	2800      	cmp	r0, #0
 800159a:	bfb8      	it	lt
 800159c:	e9cd 6700 	strdlt	r6, r7, [sp]
 80015a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80015a4:	b10c      	cbz	r4, 80015aa <time+0x2e>
 80015a6:	e9c4 0100 	strd	r0, r1, [r4]
 80015aa:	b004      	add	sp, #16
 80015ac:	bdd0      	pop	{r4, r6, r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000018 	.word	0x20000018

080015b4 <_close_r>:
 80015b4:	b538      	push	{r3, r4, r5, lr}
 80015b6:	4d06      	ldr	r5, [pc, #24]	@ (80015d0 <_close_r+0x1c>)
 80015b8:	2300      	movs	r3, #0
 80015ba:	4604      	mov	r4, r0
 80015bc:	4608      	mov	r0, r1
 80015be:	602b      	str	r3, [r5, #0]
 80015c0:	f000 fe70 	bl	80022a4 <_close>
 80015c4:	1c43      	adds	r3, r0, #1
 80015c6:	d102      	bne.n	80015ce <_close_r+0x1a>
 80015c8:	682b      	ldr	r3, [r5, #0]
 80015ca:	b103      	cbz	r3, 80015ce <_close_r+0x1a>
 80015cc:	6023      	str	r3, [r4, #0]
 80015ce:	bd38      	pop	{r3, r4, r5, pc}
 80015d0:	200001c0 	.word	0x200001c0

080015d4 <_gettimeofday_r>:
 80015d4:	b538      	push	{r3, r4, r5, lr}
 80015d6:	4d07      	ldr	r5, [pc, #28]	@ (80015f4 <_gettimeofday_r+0x20>)
 80015d8:	2300      	movs	r3, #0
 80015da:	4604      	mov	r4, r0
 80015dc:	4608      	mov	r0, r1
 80015de:	4611      	mov	r1, r2
 80015e0:	602b      	str	r3, [r5, #0]
 80015e2:	f000 fe77 	bl	80022d4 <_gettimeofday>
 80015e6:	1c43      	adds	r3, r0, #1
 80015e8:	d102      	bne.n	80015f0 <_gettimeofday_r+0x1c>
 80015ea:	682b      	ldr	r3, [r5, #0]
 80015ec:	b103      	cbz	r3, 80015f0 <_gettimeofday_r+0x1c>
 80015ee:	6023      	str	r3, [r4, #0]
 80015f0:	bd38      	pop	{r3, r4, r5, pc}
 80015f2:	bf00      	nop
 80015f4:	200001c0 	.word	0x200001c0

080015f8 <_lseek_r>:
 80015f8:	b538      	push	{r3, r4, r5, lr}
 80015fa:	4d07      	ldr	r5, [pc, #28]	@ (8001618 <_lseek_r+0x20>)
 80015fc:	4604      	mov	r4, r0
 80015fe:	4608      	mov	r0, r1
 8001600:	4611      	mov	r1, r2
 8001602:	2200      	movs	r2, #0
 8001604:	602a      	str	r2, [r5, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	f000 fe7c 	bl	8002304 <_lseek>
 800160c:	1c43      	adds	r3, r0, #1
 800160e:	d102      	bne.n	8001616 <_lseek_r+0x1e>
 8001610:	682b      	ldr	r3, [r5, #0]
 8001612:	b103      	cbz	r3, 8001616 <_lseek_r+0x1e>
 8001614:	6023      	str	r3, [r4, #0]
 8001616:	bd38      	pop	{r3, r4, r5, pc}
 8001618:	200001c0 	.word	0x200001c0

0800161c <_read_r>:
 800161c:	b538      	push	{r3, r4, r5, lr}
 800161e:	4d07      	ldr	r5, [pc, #28]	@ (800163c <_read_r+0x20>)
 8001620:	4604      	mov	r4, r0
 8001622:	4608      	mov	r0, r1
 8001624:	4611      	mov	r1, r2
 8001626:	2200      	movs	r2, #0
 8001628:	602a      	str	r2, [r5, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	f000 fe72 	bl	8002314 <_read>
 8001630:	1c43      	adds	r3, r0, #1
 8001632:	d102      	bne.n	800163a <_read_r+0x1e>
 8001634:	682b      	ldr	r3, [r5, #0]
 8001636:	b103      	cbz	r3, 800163a <_read_r+0x1e>
 8001638:	6023      	str	r3, [r4, #0]
 800163a:	bd38      	pop	{r3, r4, r5, pc}
 800163c:	200001c0 	.word	0x200001c0

08001640 <_write_r>:
 8001640:	b538      	push	{r3, r4, r5, lr}
 8001642:	4d07      	ldr	r5, [pc, #28]	@ (8001660 <_write_r+0x20>)
 8001644:	4604      	mov	r4, r0
 8001646:	4608      	mov	r0, r1
 8001648:	4611      	mov	r1, r2
 800164a:	2200      	movs	r2, #0
 800164c:	602a      	str	r2, [r5, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	f000 fe76 	bl	8002340 <_write>
 8001654:	1c43      	adds	r3, r0, #1
 8001656:	d102      	bne.n	800165e <_write_r+0x1e>
 8001658:	682b      	ldr	r3, [r5, #0]
 800165a:	b103      	cbz	r3, 800165e <_write_r+0x1e>
 800165c:	6023      	str	r3, [r4, #0]
 800165e:	bd38      	pop	{r3, r4, r5, pc}
 8001660:	200001c0 	.word	0x200001c0

08001664 <__retarget_lock_init_recursive>:
 8001664:	4770      	bx	lr

08001666 <__retarget_lock_acquire_recursive>:
 8001666:	4770      	bx	lr

08001668 <__retarget_lock_release_recursive>:
 8001668:	4770      	bx	lr
	...

0800166c <__assert_func>:
 800166c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800166e:	4614      	mov	r4, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <__assert_func+0x2c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4605      	mov	r5, r0
 8001678:	68d8      	ldr	r0, [r3, #12]
 800167a:	b14c      	cbz	r4, 8001690 <__assert_func+0x24>
 800167c:	4b07      	ldr	r3, [pc, #28]	@ (800169c <__assert_func+0x30>)
 800167e:	9100      	str	r1, [sp, #0]
 8001680:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001684:	4906      	ldr	r1, [pc, #24]	@ (80016a0 <__assert_func+0x34>)
 8001686:	462b      	mov	r3, r5
 8001688:	f000 f9ba 	bl	8001a00 <fiprintf>
 800168c:	f000 f9da 	bl	8001a44 <abort>
 8001690:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <__assert_func+0x38>)
 8001692:	461c      	mov	r4, r3
 8001694:	e7f3      	b.n	800167e <__assert_func+0x12>
 8001696:	bf00      	nop
 8001698:	20000018 	.word	0x20000018
 800169c:	0800242a 	.word	0x0800242a
 80016a0:	08002437 	.word	0x08002437
 80016a4:	08002465 	.word	0x08002465

080016a8 <_free_r>:
 80016a8:	b538      	push	{r3, r4, r5, lr}
 80016aa:	4605      	mov	r5, r0
 80016ac:	2900      	cmp	r1, #0
 80016ae:	d041      	beq.n	8001734 <_free_r+0x8c>
 80016b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016b4:	1f0c      	subs	r4, r1, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	bfb8      	it	lt
 80016ba:	18e4      	addlt	r4, r4, r3
 80016bc:	f000 f8e8 	bl	8001890 <__malloc_lock>
 80016c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <_free_r+0x90>)
 80016c2:	6813      	ldr	r3, [r2, #0]
 80016c4:	b933      	cbnz	r3, 80016d4 <_free_r+0x2c>
 80016c6:	6063      	str	r3, [r4, #4]
 80016c8:	6014      	str	r4, [r2, #0]
 80016ca:	4628      	mov	r0, r5
 80016cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016d0:	f000 b8e4 	b.w	800189c <__malloc_unlock>
 80016d4:	42a3      	cmp	r3, r4
 80016d6:	d908      	bls.n	80016ea <_free_r+0x42>
 80016d8:	6820      	ldr	r0, [r4, #0]
 80016da:	1821      	adds	r1, r4, r0
 80016dc:	428b      	cmp	r3, r1
 80016de:	bf01      	itttt	eq
 80016e0:	6819      	ldreq	r1, [r3, #0]
 80016e2:	685b      	ldreq	r3, [r3, #4]
 80016e4:	1809      	addeq	r1, r1, r0
 80016e6:	6021      	streq	r1, [r4, #0]
 80016e8:	e7ed      	b.n	80016c6 <_free_r+0x1e>
 80016ea:	461a      	mov	r2, r3
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	b10b      	cbz	r3, 80016f4 <_free_r+0x4c>
 80016f0:	42a3      	cmp	r3, r4
 80016f2:	d9fa      	bls.n	80016ea <_free_r+0x42>
 80016f4:	6811      	ldr	r1, [r2, #0]
 80016f6:	1850      	adds	r0, r2, r1
 80016f8:	42a0      	cmp	r0, r4
 80016fa:	d10b      	bne.n	8001714 <_free_r+0x6c>
 80016fc:	6820      	ldr	r0, [r4, #0]
 80016fe:	4401      	add	r1, r0
 8001700:	1850      	adds	r0, r2, r1
 8001702:	4283      	cmp	r3, r0
 8001704:	6011      	str	r1, [r2, #0]
 8001706:	d1e0      	bne.n	80016ca <_free_r+0x22>
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	6053      	str	r3, [r2, #4]
 800170e:	4408      	add	r0, r1
 8001710:	6010      	str	r0, [r2, #0]
 8001712:	e7da      	b.n	80016ca <_free_r+0x22>
 8001714:	d902      	bls.n	800171c <_free_r+0x74>
 8001716:	230c      	movs	r3, #12
 8001718:	602b      	str	r3, [r5, #0]
 800171a:	e7d6      	b.n	80016ca <_free_r+0x22>
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	1821      	adds	r1, r4, r0
 8001720:	428b      	cmp	r3, r1
 8001722:	bf04      	itt	eq
 8001724:	6819      	ldreq	r1, [r3, #0]
 8001726:	685b      	ldreq	r3, [r3, #4]
 8001728:	6063      	str	r3, [r4, #4]
 800172a:	bf04      	itt	eq
 800172c:	1809      	addeq	r1, r1, r0
 800172e:	6021      	streq	r1, [r4, #0]
 8001730:	6054      	str	r4, [r2, #4]
 8001732:	e7ca      	b.n	80016ca <_free_r+0x22>
 8001734:	bd38      	pop	{r3, r4, r5, pc}
 8001736:	bf00      	nop
 8001738:	200001cc 	.word	0x200001cc

0800173c <malloc>:
 800173c:	4b02      	ldr	r3, [pc, #8]	@ (8001748 <malloc+0xc>)
 800173e:	4601      	mov	r1, r0
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	f000 b825 	b.w	8001790 <_malloc_r>
 8001746:	bf00      	nop
 8001748:	20000018 	.word	0x20000018

0800174c <sbrk_aligned>:
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	4e0f      	ldr	r6, [pc, #60]	@ (800178c <sbrk_aligned+0x40>)
 8001750:	460c      	mov	r4, r1
 8001752:	6831      	ldr	r1, [r6, #0]
 8001754:	4605      	mov	r5, r0
 8001756:	b911      	cbnz	r1, 800175e <sbrk_aligned+0x12>
 8001758:	f000 f964 	bl	8001a24 <_sbrk_r>
 800175c:	6030      	str	r0, [r6, #0]
 800175e:	4621      	mov	r1, r4
 8001760:	4628      	mov	r0, r5
 8001762:	f000 f95f 	bl	8001a24 <_sbrk_r>
 8001766:	1c43      	adds	r3, r0, #1
 8001768:	d103      	bne.n	8001772 <sbrk_aligned+0x26>
 800176a:	f04f 34ff 	mov.w	r4, #4294967295
 800176e:	4620      	mov	r0, r4
 8001770:	bd70      	pop	{r4, r5, r6, pc}
 8001772:	1cc4      	adds	r4, r0, #3
 8001774:	f024 0403 	bic.w	r4, r4, #3
 8001778:	42a0      	cmp	r0, r4
 800177a:	d0f8      	beq.n	800176e <sbrk_aligned+0x22>
 800177c:	1a21      	subs	r1, r4, r0
 800177e:	4628      	mov	r0, r5
 8001780:	f000 f950 	bl	8001a24 <_sbrk_r>
 8001784:	3001      	adds	r0, #1
 8001786:	d1f2      	bne.n	800176e <sbrk_aligned+0x22>
 8001788:	e7ef      	b.n	800176a <sbrk_aligned+0x1e>
 800178a:	bf00      	nop
 800178c:	200001c8 	.word	0x200001c8

08001790 <_malloc_r>:
 8001790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001794:	1ccd      	adds	r5, r1, #3
 8001796:	f025 0503 	bic.w	r5, r5, #3
 800179a:	3508      	adds	r5, #8
 800179c:	2d0c      	cmp	r5, #12
 800179e:	bf38      	it	cc
 80017a0:	250c      	movcc	r5, #12
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	4606      	mov	r6, r0
 80017a6:	db01      	blt.n	80017ac <_malloc_r+0x1c>
 80017a8:	42a9      	cmp	r1, r5
 80017aa:	d904      	bls.n	80017b6 <_malloc_r+0x26>
 80017ac:	230c      	movs	r3, #12
 80017ae:	6033      	str	r3, [r6, #0]
 80017b0:	2000      	movs	r0, #0
 80017b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800188c <_malloc_r+0xfc>
 80017ba:	f000 f869 	bl	8001890 <__malloc_lock>
 80017be:	f8d8 3000 	ldr.w	r3, [r8]
 80017c2:	461c      	mov	r4, r3
 80017c4:	bb44      	cbnz	r4, 8001818 <_malloc_r+0x88>
 80017c6:	4629      	mov	r1, r5
 80017c8:	4630      	mov	r0, r6
 80017ca:	f7ff ffbf 	bl	800174c <sbrk_aligned>
 80017ce:	1c43      	adds	r3, r0, #1
 80017d0:	4604      	mov	r4, r0
 80017d2:	d158      	bne.n	8001886 <_malloc_r+0xf6>
 80017d4:	f8d8 4000 	ldr.w	r4, [r8]
 80017d8:	4627      	mov	r7, r4
 80017da:	2f00      	cmp	r7, #0
 80017dc:	d143      	bne.n	8001866 <_malloc_r+0xd6>
 80017de:	2c00      	cmp	r4, #0
 80017e0:	d04b      	beq.n	800187a <_malloc_r+0xea>
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	4639      	mov	r1, r7
 80017e6:	4630      	mov	r0, r6
 80017e8:	eb04 0903 	add.w	r9, r4, r3
 80017ec:	f000 f91a 	bl	8001a24 <_sbrk_r>
 80017f0:	4581      	cmp	r9, r0
 80017f2:	d142      	bne.n	800187a <_malloc_r+0xea>
 80017f4:	6821      	ldr	r1, [r4, #0]
 80017f6:	1a6d      	subs	r5, r5, r1
 80017f8:	4629      	mov	r1, r5
 80017fa:	4630      	mov	r0, r6
 80017fc:	f7ff ffa6 	bl	800174c <sbrk_aligned>
 8001800:	3001      	adds	r0, #1
 8001802:	d03a      	beq.n	800187a <_malloc_r+0xea>
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	442b      	add	r3, r5
 8001808:	6023      	str	r3, [r4, #0]
 800180a:	f8d8 3000 	ldr.w	r3, [r8]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	bb62      	cbnz	r2, 800186c <_malloc_r+0xdc>
 8001812:	f8c8 7000 	str.w	r7, [r8]
 8001816:	e00f      	b.n	8001838 <_malloc_r+0xa8>
 8001818:	6822      	ldr	r2, [r4, #0]
 800181a:	1b52      	subs	r2, r2, r5
 800181c:	d420      	bmi.n	8001860 <_malloc_r+0xd0>
 800181e:	2a0b      	cmp	r2, #11
 8001820:	d917      	bls.n	8001852 <_malloc_r+0xc2>
 8001822:	1961      	adds	r1, r4, r5
 8001824:	42a3      	cmp	r3, r4
 8001826:	6025      	str	r5, [r4, #0]
 8001828:	bf18      	it	ne
 800182a:	6059      	strne	r1, [r3, #4]
 800182c:	6863      	ldr	r3, [r4, #4]
 800182e:	bf08      	it	eq
 8001830:	f8c8 1000 	streq.w	r1, [r8]
 8001834:	5162      	str	r2, [r4, r5]
 8001836:	604b      	str	r3, [r1, #4]
 8001838:	4630      	mov	r0, r6
 800183a:	f000 f82f 	bl	800189c <__malloc_unlock>
 800183e:	f104 000b 	add.w	r0, r4, #11
 8001842:	1d23      	adds	r3, r4, #4
 8001844:	f020 0007 	bic.w	r0, r0, #7
 8001848:	1ac2      	subs	r2, r0, r3
 800184a:	bf1c      	itt	ne
 800184c:	1a1b      	subne	r3, r3, r0
 800184e:	50a3      	strne	r3, [r4, r2]
 8001850:	e7af      	b.n	80017b2 <_malloc_r+0x22>
 8001852:	6862      	ldr	r2, [r4, #4]
 8001854:	42a3      	cmp	r3, r4
 8001856:	bf0c      	ite	eq
 8001858:	f8c8 2000 	streq.w	r2, [r8]
 800185c:	605a      	strne	r2, [r3, #4]
 800185e:	e7eb      	b.n	8001838 <_malloc_r+0xa8>
 8001860:	4623      	mov	r3, r4
 8001862:	6864      	ldr	r4, [r4, #4]
 8001864:	e7ae      	b.n	80017c4 <_malloc_r+0x34>
 8001866:	463c      	mov	r4, r7
 8001868:	687f      	ldr	r7, [r7, #4]
 800186a:	e7b6      	b.n	80017da <_malloc_r+0x4a>
 800186c:	461a      	mov	r2, r3
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	42a3      	cmp	r3, r4
 8001872:	d1fb      	bne.n	800186c <_malloc_r+0xdc>
 8001874:	2300      	movs	r3, #0
 8001876:	6053      	str	r3, [r2, #4]
 8001878:	e7de      	b.n	8001838 <_malloc_r+0xa8>
 800187a:	230c      	movs	r3, #12
 800187c:	6033      	str	r3, [r6, #0]
 800187e:	4630      	mov	r0, r6
 8001880:	f000 f80c 	bl	800189c <__malloc_unlock>
 8001884:	e794      	b.n	80017b0 <_malloc_r+0x20>
 8001886:	6005      	str	r5, [r0, #0]
 8001888:	e7d6      	b.n	8001838 <_malloc_r+0xa8>
 800188a:	bf00      	nop
 800188c:	200001cc 	.word	0x200001cc

08001890 <__malloc_lock>:
 8001890:	4801      	ldr	r0, [pc, #4]	@ (8001898 <__malloc_lock+0x8>)
 8001892:	f7ff bee8 	b.w	8001666 <__retarget_lock_acquire_recursive>
 8001896:	bf00      	nop
 8001898:	200001c4 	.word	0x200001c4

0800189c <__malloc_unlock>:
 800189c:	4801      	ldr	r0, [pc, #4]	@ (80018a4 <__malloc_unlock+0x8>)
 800189e:	f7ff bee3 	b.w	8001668 <__retarget_lock_release_recursive>
 80018a2:	bf00      	nop
 80018a4:	200001c4 	.word	0x200001c4

080018a8 <__sflush_r>:
 80018a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018b0:	0716      	lsls	r6, r2, #28
 80018b2:	4605      	mov	r5, r0
 80018b4:	460c      	mov	r4, r1
 80018b6:	d454      	bmi.n	8001962 <__sflush_r+0xba>
 80018b8:	684b      	ldr	r3, [r1, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	dc02      	bgt.n	80018c4 <__sflush_r+0x1c>
 80018be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	dd48      	ble.n	8001956 <__sflush_r+0xae>
 80018c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80018c6:	2e00      	cmp	r6, #0
 80018c8:	d045      	beq.n	8001956 <__sflush_r+0xae>
 80018ca:	2300      	movs	r3, #0
 80018cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80018d0:	682f      	ldr	r7, [r5, #0]
 80018d2:	6a21      	ldr	r1, [r4, #32]
 80018d4:	602b      	str	r3, [r5, #0]
 80018d6:	d030      	beq.n	800193a <__sflush_r+0x92>
 80018d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80018da:	89a3      	ldrh	r3, [r4, #12]
 80018dc:	0759      	lsls	r1, r3, #29
 80018de:	d505      	bpl.n	80018ec <__sflush_r+0x44>
 80018e0:	6863      	ldr	r3, [r4, #4]
 80018e2:	1ad2      	subs	r2, r2, r3
 80018e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80018e6:	b10b      	cbz	r3, 80018ec <__sflush_r+0x44>
 80018e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80018ea:	1ad2      	subs	r2, r2, r3
 80018ec:	2300      	movs	r3, #0
 80018ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80018f0:	6a21      	ldr	r1, [r4, #32]
 80018f2:	4628      	mov	r0, r5
 80018f4:	47b0      	blx	r6
 80018f6:	1c43      	adds	r3, r0, #1
 80018f8:	89a3      	ldrh	r3, [r4, #12]
 80018fa:	d106      	bne.n	800190a <__sflush_r+0x62>
 80018fc:	6829      	ldr	r1, [r5, #0]
 80018fe:	291d      	cmp	r1, #29
 8001900:	d82b      	bhi.n	800195a <__sflush_r+0xb2>
 8001902:	4a2a      	ldr	r2, [pc, #168]	@ (80019ac <__sflush_r+0x104>)
 8001904:	40ca      	lsrs	r2, r1
 8001906:	07d6      	lsls	r6, r2, #31
 8001908:	d527      	bpl.n	800195a <__sflush_r+0xb2>
 800190a:	2200      	movs	r2, #0
 800190c:	6062      	str	r2, [r4, #4]
 800190e:	04d9      	lsls	r1, r3, #19
 8001910:	6922      	ldr	r2, [r4, #16]
 8001912:	6022      	str	r2, [r4, #0]
 8001914:	d504      	bpl.n	8001920 <__sflush_r+0x78>
 8001916:	1c42      	adds	r2, r0, #1
 8001918:	d101      	bne.n	800191e <__sflush_r+0x76>
 800191a:	682b      	ldr	r3, [r5, #0]
 800191c:	b903      	cbnz	r3, 8001920 <__sflush_r+0x78>
 800191e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001920:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001922:	602f      	str	r7, [r5, #0]
 8001924:	b1b9      	cbz	r1, 8001956 <__sflush_r+0xae>
 8001926:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800192a:	4299      	cmp	r1, r3
 800192c:	d002      	beq.n	8001934 <__sflush_r+0x8c>
 800192e:	4628      	mov	r0, r5
 8001930:	f7ff feba 	bl	80016a8 <_free_r>
 8001934:	2300      	movs	r3, #0
 8001936:	6363      	str	r3, [r4, #52]	@ 0x34
 8001938:	e00d      	b.n	8001956 <__sflush_r+0xae>
 800193a:	2301      	movs	r3, #1
 800193c:	4628      	mov	r0, r5
 800193e:	47b0      	blx	r6
 8001940:	4602      	mov	r2, r0
 8001942:	1c50      	adds	r0, r2, #1
 8001944:	d1c9      	bne.n	80018da <__sflush_r+0x32>
 8001946:	682b      	ldr	r3, [r5, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0c6      	beq.n	80018da <__sflush_r+0x32>
 800194c:	2b1d      	cmp	r3, #29
 800194e:	d001      	beq.n	8001954 <__sflush_r+0xac>
 8001950:	2b16      	cmp	r3, #22
 8001952:	d11e      	bne.n	8001992 <__sflush_r+0xea>
 8001954:	602f      	str	r7, [r5, #0]
 8001956:	2000      	movs	r0, #0
 8001958:	e022      	b.n	80019a0 <__sflush_r+0xf8>
 800195a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800195e:	b21b      	sxth	r3, r3
 8001960:	e01b      	b.n	800199a <__sflush_r+0xf2>
 8001962:	690f      	ldr	r7, [r1, #16]
 8001964:	2f00      	cmp	r7, #0
 8001966:	d0f6      	beq.n	8001956 <__sflush_r+0xae>
 8001968:	0793      	lsls	r3, r2, #30
 800196a:	680e      	ldr	r6, [r1, #0]
 800196c:	bf08      	it	eq
 800196e:	694b      	ldreq	r3, [r1, #20]
 8001970:	600f      	str	r7, [r1, #0]
 8001972:	bf18      	it	ne
 8001974:	2300      	movne	r3, #0
 8001976:	eba6 0807 	sub.w	r8, r6, r7
 800197a:	608b      	str	r3, [r1, #8]
 800197c:	f1b8 0f00 	cmp.w	r8, #0
 8001980:	dde9      	ble.n	8001956 <__sflush_r+0xae>
 8001982:	6a21      	ldr	r1, [r4, #32]
 8001984:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001986:	4643      	mov	r3, r8
 8001988:	463a      	mov	r2, r7
 800198a:	4628      	mov	r0, r5
 800198c:	47b0      	blx	r6
 800198e:	2800      	cmp	r0, #0
 8001990:	dc08      	bgt.n	80019a4 <__sflush_r+0xfc>
 8001992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800199a:	81a3      	strh	r3, [r4, #12]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019a4:	4407      	add	r7, r0
 80019a6:	eba8 0800 	sub.w	r8, r8, r0
 80019aa:	e7e7      	b.n	800197c <__sflush_r+0xd4>
 80019ac:	20400001 	.word	0x20400001

080019b0 <_fflush_r>:
 80019b0:	b538      	push	{r3, r4, r5, lr}
 80019b2:	690b      	ldr	r3, [r1, #16]
 80019b4:	4605      	mov	r5, r0
 80019b6:	460c      	mov	r4, r1
 80019b8:	b913      	cbnz	r3, 80019c0 <_fflush_r+0x10>
 80019ba:	2500      	movs	r5, #0
 80019bc:	4628      	mov	r0, r5
 80019be:	bd38      	pop	{r3, r4, r5, pc}
 80019c0:	b118      	cbz	r0, 80019ca <_fflush_r+0x1a>
 80019c2:	6a03      	ldr	r3, [r0, #32]
 80019c4:	b90b      	cbnz	r3, 80019ca <_fflush_r+0x1a>
 80019c6:	f7ff fd57 	bl	8001478 <__sinit>
 80019ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f3      	beq.n	80019ba <_fflush_r+0xa>
 80019d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80019d4:	07d0      	lsls	r0, r2, #31
 80019d6:	d404      	bmi.n	80019e2 <_fflush_r+0x32>
 80019d8:	0599      	lsls	r1, r3, #22
 80019da:	d402      	bmi.n	80019e2 <_fflush_r+0x32>
 80019dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019de:	f7ff fe42 	bl	8001666 <__retarget_lock_acquire_recursive>
 80019e2:	4628      	mov	r0, r5
 80019e4:	4621      	mov	r1, r4
 80019e6:	f7ff ff5f 	bl	80018a8 <__sflush_r>
 80019ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80019ec:	07da      	lsls	r2, r3, #31
 80019ee:	4605      	mov	r5, r0
 80019f0:	d4e4      	bmi.n	80019bc <_fflush_r+0xc>
 80019f2:	89a3      	ldrh	r3, [r4, #12]
 80019f4:	059b      	lsls	r3, r3, #22
 80019f6:	d4e1      	bmi.n	80019bc <_fflush_r+0xc>
 80019f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019fa:	f7ff fe35 	bl	8001668 <__retarget_lock_release_recursive>
 80019fe:	e7dd      	b.n	80019bc <_fflush_r+0xc>

08001a00 <fiprintf>:
 8001a00:	b40e      	push	{r1, r2, r3}
 8001a02:	b503      	push	{r0, r1, lr}
 8001a04:	4601      	mov	r1, r0
 8001a06:	ab03      	add	r3, sp, #12
 8001a08:	4805      	ldr	r0, [pc, #20]	@ (8001a20 <fiprintf+0x20>)
 8001a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a0e:	6800      	ldr	r0, [r0, #0]
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	f000 f847 	bl	8001aa4 <_vfiprintf_r>
 8001a16:	b002      	add	sp, #8
 8001a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a1c:	b003      	add	sp, #12
 8001a1e:	4770      	bx	lr
 8001a20:	20000018 	.word	0x20000018

08001a24 <_sbrk_r>:
 8001a24:	b538      	push	{r3, r4, r5, lr}
 8001a26:	4d06      	ldr	r5, [pc, #24]	@ (8001a40 <_sbrk_r+0x1c>)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	4608      	mov	r0, r1
 8001a2e:	602b      	str	r3, [r5, #0]
 8001a30:	f000 fc78 	bl	8002324 <_sbrk>
 8001a34:	1c43      	adds	r3, r0, #1
 8001a36:	d102      	bne.n	8001a3e <_sbrk_r+0x1a>
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	b103      	cbz	r3, 8001a3e <_sbrk_r+0x1a>
 8001a3c:	6023      	str	r3, [r4, #0]
 8001a3e:	bd38      	pop	{r3, r4, r5, pc}
 8001a40:	200001c0 	.word	0x200001c0

08001a44 <abort>:
 8001a44:	b508      	push	{r3, lr}
 8001a46:	2006      	movs	r0, #6
 8001a48:	f000 fb8c 	bl	8002164 <raise>
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f000 fc7f 	bl	8002350 <_exit>

08001a52 <__sfputc_r>:
 8001a52:	6893      	ldr	r3, [r2, #8]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	b410      	push	{r4}
 8001a5a:	6093      	str	r3, [r2, #8]
 8001a5c:	da08      	bge.n	8001a70 <__sfputc_r+0x1e>
 8001a5e:	6994      	ldr	r4, [r2, #24]
 8001a60:	42a3      	cmp	r3, r4
 8001a62:	db01      	blt.n	8001a68 <__sfputc_r+0x16>
 8001a64:	290a      	cmp	r1, #10
 8001a66:	d103      	bne.n	8001a70 <__sfputc_r+0x1e>
 8001a68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a6c:	f000 babe 	b.w	8001fec <__swbuf_r>
 8001a70:	6813      	ldr	r3, [r2, #0]
 8001a72:	1c58      	adds	r0, r3, #1
 8001a74:	6010      	str	r0, [r2, #0]
 8001a76:	7019      	strb	r1, [r3, #0]
 8001a78:	4608      	mov	r0, r1
 8001a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <__sfputs_r>:
 8001a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a82:	4606      	mov	r6, r0
 8001a84:	460f      	mov	r7, r1
 8001a86:	4614      	mov	r4, r2
 8001a88:	18d5      	adds	r5, r2, r3
 8001a8a:	42ac      	cmp	r4, r5
 8001a8c:	d101      	bne.n	8001a92 <__sfputs_r+0x12>
 8001a8e:	2000      	movs	r0, #0
 8001a90:	e007      	b.n	8001aa2 <__sfputs_r+0x22>
 8001a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a96:	463a      	mov	r2, r7
 8001a98:	4630      	mov	r0, r6
 8001a9a:	f7ff ffda 	bl	8001a52 <__sfputc_r>
 8001a9e:	1c43      	adds	r3, r0, #1
 8001aa0:	d1f3      	bne.n	8001a8a <__sfputs_r+0xa>
 8001aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001aa4 <_vfiprintf_r>:
 8001aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aa8:	460d      	mov	r5, r1
 8001aaa:	b09d      	sub	sp, #116	@ 0x74
 8001aac:	4614      	mov	r4, r2
 8001aae:	4698      	mov	r8, r3
 8001ab0:	4606      	mov	r6, r0
 8001ab2:	b118      	cbz	r0, 8001abc <_vfiprintf_r+0x18>
 8001ab4:	6a03      	ldr	r3, [r0, #32]
 8001ab6:	b90b      	cbnz	r3, 8001abc <_vfiprintf_r+0x18>
 8001ab8:	f7ff fcde 	bl	8001478 <__sinit>
 8001abc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001abe:	07d9      	lsls	r1, r3, #31
 8001ac0:	d405      	bmi.n	8001ace <_vfiprintf_r+0x2a>
 8001ac2:	89ab      	ldrh	r3, [r5, #12]
 8001ac4:	059a      	lsls	r2, r3, #22
 8001ac6:	d402      	bmi.n	8001ace <_vfiprintf_r+0x2a>
 8001ac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001aca:	f7ff fdcc 	bl	8001666 <__retarget_lock_acquire_recursive>
 8001ace:	89ab      	ldrh	r3, [r5, #12]
 8001ad0:	071b      	lsls	r3, r3, #28
 8001ad2:	d501      	bpl.n	8001ad8 <_vfiprintf_r+0x34>
 8001ad4:	692b      	ldr	r3, [r5, #16]
 8001ad6:	b99b      	cbnz	r3, 8001b00 <_vfiprintf_r+0x5c>
 8001ad8:	4629      	mov	r1, r5
 8001ada:	4630      	mov	r0, r6
 8001adc:	f000 fac4 	bl	8002068 <__swsetup_r>
 8001ae0:	b170      	cbz	r0, 8001b00 <_vfiprintf_r+0x5c>
 8001ae2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ae4:	07dc      	lsls	r4, r3, #31
 8001ae6:	d504      	bpl.n	8001af2 <_vfiprintf_r+0x4e>
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	b01d      	add	sp, #116	@ 0x74
 8001aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001af2:	89ab      	ldrh	r3, [r5, #12]
 8001af4:	0598      	lsls	r0, r3, #22
 8001af6:	d4f7      	bmi.n	8001ae8 <_vfiprintf_r+0x44>
 8001af8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001afa:	f7ff fdb5 	bl	8001668 <__retarget_lock_release_recursive>
 8001afe:	e7f3      	b.n	8001ae8 <_vfiprintf_r+0x44>
 8001b00:	2300      	movs	r3, #0
 8001b02:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b04:	2320      	movs	r3, #32
 8001b06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001b0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b0e:	2330      	movs	r3, #48	@ 0x30
 8001b10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001cc0 <_vfiprintf_r+0x21c>
 8001b14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001b18:	f04f 0901 	mov.w	r9, #1
 8001b1c:	4623      	mov	r3, r4
 8001b1e:	469a      	mov	sl, r3
 8001b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b24:	b10a      	cbz	r2, 8001b2a <_vfiprintf_r+0x86>
 8001b26:	2a25      	cmp	r2, #37	@ 0x25
 8001b28:	d1f9      	bne.n	8001b1e <_vfiprintf_r+0x7a>
 8001b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8001b2e:	d00b      	beq.n	8001b48 <_vfiprintf_r+0xa4>
 8001b30:	465b      	mov	r3, fp
 8001b32:	4622      	mov	r2, r4
 8001b34:	4629      	mov	r1, r5
 8001b36:	4630      	mov	r0, r6
 8001b38:	f7ff ffa2 	bl	8001a80 <__sfputs_r>
 8001b3c:	3001      	adds	r0, #1
 8001b3e:	f000 80a7 	beq.w	8001c90 <_vfiprintf_r+0x1ec>
 8001b42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001b44:	445a      	add	r2, fp
 8001b46:	9209      	str	r2, [sp, #36]	@ 0x24
 8001b48:	f89a 3000 	ldrb.w	r3, [sl]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 809f 	beq.w	8001c90 <_vfiprintf_r+0x1ec>
 8001b52:	2300      	movs	r3, #0
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b5c:	f10a 0a01 	add.w	sl, sl, #1
 8001b60:	9304      	str	r3, [sp, #16]
 8001b62:	9307      	str	r3, [sp, #28]
 8001b64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001b68:	931a      	str	r3, [sp, #104]	@ 0x68
 8001b6a:	4654      	mov	r4, sl
 8001b6c:	2205      	movs	r2, #5
 8001b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b72:	4853      	ldr	r0, [pc, #332]	@ (8001cc0 <_vfiprintf_r+0x21c>)
 8001b74:	f7fe fb4c 	bl	8000210 <memchr>
 8001b78:	9a04      	ldr	r2, [sp, #16]
 8001b7a:	b9d8      	cbnz	r0, 8001bb4 <_vfiprintf_r+0x110>
 8001b7c:	06d1      	lsls	r1, r2, #27
 8001b7e:	bf44      	itt	mi
 8001b80:	2320      	movmi	r3, #32
 8001b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b86:	0713      	lsls	r3, r2, #28
 8001b88:	bf44      	itt	mi
 8001b8a:	232b      	movmi	r3, #43	@ 0x2b
 8001b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b90:	f89a 3000 	ldrb.w	r3, [sl]
 8001b94:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b96:	d015      	beq.n	8001bc4 <_vfiprintf_r+0x120>
 8001b98:	9a07      	ldr	r2, [sp, #28]
 8001b9a:	4654      	mov	r4, sl
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f04f 0c0a 	mov.w	ip, #10
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ba8:	3b30      	subs	r3, #48	@ 0x30
 8001baa:	2b09      	cmp	r3, #9
 8001bac:	d94b      	bls.n	8001c46 <_vfiprintf_r+0x1a2>
 8001bae:	b1b0      	cbz	r0, 8001bde <_vfiprintf_r+0x13a>
 8001bb0:	9207      	str	r2, [sp, #28]
 8001bb2:	e014      	b.n	8001bde <_vfiprintf_r+0x13a>
 8001bb4:	eba0 0308 	sub.w	r3, r0, r8
 8001bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	9304      	str	r3, [sp, #16]
 8001bc0:	46a2      	mov	sl, r4
 8001bc2:	e7d2      	b.n	8001b6a <_vfiprintf_r+0xc6>
 8001bc4:	9b03      	ldr	r3, [sp, #12]
 8001bc6:	1d19      	adds	r1, r3, #4
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	9103      	str	r1, [sp, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bfbb      	ittet	lt
 8001bd0:	425b      	neglt	r3, r3
 8001bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8001bd6:	9307      	strge	r3, [sp, #28]
 8001bd8:	9307      	strlt	r3, [sp, #28]
 8001bda:	bfb8      	it	lt
 8001bdc:	9204      	strlt	r2, [sp, #16]
 8001bde:	7823      	ldrb	r3, [r4, #0]
 8001be0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001be2:	d10a      	bne.n	8001bfa <_vfiprintf_r+0x156>
 8001be4:	7863      	ldrb	r3, [r4, #1]
 8001be6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001be8:	d132      	bne.n	8001c50 <_vfiprintf_r+0x1ac>
 8001bea:	9b03      	ldr	r3, [sp, #12]
 8001bec:	1d1a      	adds	r2, r3, #4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	9203      	str	r2, [sp, #12]
 8001bf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001bf6:	3402      	adds	r4, #2
 8001bf8:	9305      	str	r3, [sp, #20]
 8001bfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001cd0 <_vfiprintf_r+0x22c>
 8001bfe:	7821      	ldrb	r1, [r4, #0]
 8001c00:	2203      	movs	r2, #3
 8001c02:	4650      	mov	r0, sl
 8001c04:	f7fe fb04 	bl	8000210 <memchr>
 8001c08:	b138      	cbz	r0, 8001c1a <_vfiprintf_r+0x176>
 8001c0a:	9b04      	ldr	r3, [sp, #16]
 8001c0c:	eba0 000a 	sub.w	r0, r0, sl
 8001c10:	2240      	movs	r2, #64	@ 0x40
 8001c12:	4082      	lsls	r2, r0
 8001c14:	4313      	orrs	r3, r2
 8001c16:	3401      	adds	r4, #1
 8001c18:	9304      	str	r3, [sp, #16]
 8001c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c1e:	4829      	ldr	r0, [pc, #164]	@ (8001cc4 <_vfiprintf_r+0x220>)
 8001c20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001c24:	2206      	movs	r2, #6
 8001c26:	f7fe faf3 	bl	8000210 <memchr>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d03f      	beq.n	8001cae <_vfiprintf_r+0x20a>
 8001c2e:	4b26      	ldr	r3, [pc, #152]	@ (8001cc8 <_vfiprintf_r+0x224>)
 8001c30:	bb1b      	cbnz	r3, 8001c7a <_vfiprintf_r+0x1d6>
 8001c32:	9b03      	ldr	r3, [sp, #12]
 8001c34:	3307      	adds	r3, #7
 8001c36:	f023 0307 	bic.w	r3, r3, #7
 8001c3a:	3308      	adds	r3, #8
 8001c3c:	9303      	str	r3, [sp, #12]
 8001c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001c40:	443b      	add	r3, r7
 8001c42:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c44:	e76a      	b.n	8001b1c <_vfiprintf_r+0x78>
 8001c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	e7a8      	b.n	8001ba2 <_vfiprintf_r+0xfe>
 8001c50:	2300      	movs	r3, #0
 8001c52:	3401      	adds	r4, #1
 8001c54:	9305      	str	r3, [sp, #20]
 8001c56:	4619      	mov	r1, r3
 8001c58:	f04f 0c0a 	mov.w	ip, #10
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c62:	3a30      	subs	r2, #48	@ 0x30
 8001c64:	2a09      	cmp	r2, #9
 8001c66:	d903      	bls.n	8001c70 <_vfiprintf_r+0x1cc>
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0c6      	beq.n	8001bfa <_vfiprintf_r+0x156>
 8001c6c:	9105      	str	r1, [sp, #20]
 8001c6e:	e7c4      	b.n	8001bfa <_vfiprintf_r+0x156>
 8001c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c74:	4604      	mov	r4, r0
 8001c76:	2301      	movs	r3, #1
 8001c78:	e7f0      	b.n	8001c5c <_vfiprintf_r+0x1b8>
 8001c7a:	ab03      	add	r3, sp, #12
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	462a      	mov	r2, r5
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <_vfiprintf_r+0x228>)
 8001c82:	a904      	add	r1, sp, #16
 8001c84:	4630      	mov	r0, r6
 8001c86:	f3af 8000 	nop.w
 8001c8a:	4607      	mov	r7, r0
 8001c8c:	1c78      	adds	r0, r7, #1
 8001c8e:	d1d6      	bne.n	8001c3e <_vfiprintf_r+0x19a>
 8001c90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c92:	07d9      	lsls	r1, r3, #31
 8001c94:	d405      	bmi.n	8001ca2 <_vfiprintf_r+0x1fe>
 8001c96:	89ab      	ldrh	r3, [r5, #12]
 8001c98:	059a      	lsls	r2, r3, #22
 8001c9a:	d402      	bmi.n	8001ca2 <_vfiprintf_r+0x1fe>
 8001c9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c9e:	f7ff fce3 	bl	8001668 <__retarget_lock_release_recursive>
 8001ca2:	89ab      	ldrh	r3, [r5, #12]
 8001ca4:	065b      	lsls	r3, r3, #25
 8001ca6:	f53f af1f 	bmi.w	8001ae8 <_vfiprintf_r+0x44>
 8001caa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001cac:	e71e      	b.n	8001aec <_vfiprintf_r+0x48>
 8001cae:	ab03      	add	r3, sp, #12
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	462a      	mov	r2, r5
 8001cb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <_vfiprintf_r+0x228>)
 8001cb6:	a904      	add	r1, sp, #16
 8001cb8:	4630      	mov	r0, r6
 8001cba:	f000 f879 	bl	8001db0 <_printf_i>
 8001cbe:	e7e4      	b.n	8001c8a <_vfiprintf_r+0x1e6>
 8001cc0:	08002466 	.word	0x08002466
 8001cc4:	08002470 	.word	0x08002470
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	08001a81 	.word	0x08001a81
 8001cd0:	0800246c 	.word	0x0800246c

08001cd4 <_printf_common>:
 8001cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cd8:	4616      	mov	r6, r2
 8001cda:	4698      	mov	r8, r3
 8001cdc:	688a      	ldr	r2, [r1, #8]
 8001cde:	690b      	ldr	r3, [r1, #16]
 8001ce0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	bfb8      	it	lt
 8001ce8:	4613      	movlt	r3, r2
 8001cea:	6033      	str	r3, [r6, #0]
 8001cec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001cf0:	4607      	mov	r7, r0
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	b10a      	cbz	r2, 8001cfa <_printf_common+0x26>
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	6033      	str	r3, [r6, #0]
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	0699      	lsls	r1, r3, #26
 8001cfe:	bf42      	ittt	mi
 8001d00:	6833      	ldrmi	r3, [r6, #0]
 8001d02:	3302      	addmi	r3, #2
 8001d04:	6033      	strmi	r3, [r6, #0]
 8001d06:	6825      	ldr	r5, [r4, #0]
 8001d08:	f015 0506 	ands.w	r5, r5, #6
 8001d0c:	d106      	bne.n	8001d1c <_printf_common+0x48>
 8001d0e:	f104 0a19 	add.w	sl, r4, #25
 8001d12:	68e3      	ldr	r3, [r4, #12]
 8001d14:	6832      	ldr	r2, [r6, #0]
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	42ab      	cmp	r3, r5
 8001d1a:	dc26      	bgt.n	8001d6a <_printf_common+0x96>
 8001d1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001d20:	6822      	ldr	r2, [r4, #0]
 8001d22:	3b00      	subs	r3, #0
 8001d24:	bf18      	it	ne
 8001d26:	2301      	movne	r3, #1
 8001d28:	0692      	lsls	r2, r2, #26
 8001d2a:	d42b      	bmi.n	8001d84 <_printf_common+0xb0>
 8001d2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001d30:	4641      	mov	r1, r8
 8001d32:	4638      	mov	r0, r7
 8001d34:	47c8      	blx	r9
 8001d36:	3001      	adds	r0, #1
 8001d38:	d01e      	beq.n	8001d78 <_printf_common+0xa4>
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	6922      	ldr	r2, [r4, #16]
 8001d3e:	f003 0306 	and.w	r3, r3, #6
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf02      	ittt	eq
 8001d46:	68e5      	ldreq	r5, [r4, #12]
 8001d48:	6833      	ldreq	r3, [r6, #0]
 8001d4a:	1aed      	subeq	r5, r5, r3
 8001d4c:	68a3      	ldr	r3, [r4, #8]
 8001d4e:	bf0c      	ite	eq
 8001d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d54:	2500      	movne	r5, #0
 8001d56:	4293      	cmp	r3, r2
 8001d58:	bfc4      	itt	gt
 8001d5a:	1a9b      	subgt	r3, r3, r2
 8001d5c:	18ed      	addgt	r5, r5, r3
 8001d5e:	2600      	movs	r6, #0
 8001d60:	341a      	adds	r4, #26
 8001d62:	42b5      	cmp	r5, r6
 8001d64:	d11a      	bne.n	8001d9c <_printf_common+0xc8>
 8001d66:	2000      	movs	r0, #0
 8001d68:	e008      	b.n	8001d7c <_printf_common+0xa8>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	4652      	mov	r2, sl
 8001d6e:	4641      	mov	r1, r8
 8001d70:	4638      	mov	r0, r7
 8001d72:	47c8      	blx	r9
 8001d74:	3001      	adds	r0, #1
 8001d76:	d103      	bne.n	8001d80 <_printf_common+0xac>
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d80:	3501      	adds	r5, #1
 8001d82:	e7c6      	b.n	8001d12 <_printf_common+0x3e>
 8001d84:	18e1      	adds	r1, r4, r3
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	2030      	movs	r0, #48	@ 0x30
 8001d8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d8e:	4422      	add	r2, r4
 8001d90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d98:	3302      	adds	r3, #2
 8001d9a:	e7c7      	b.n	8001d2c <_printf_common+0x58>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	4622      	mov	r2, r4
 8001da0:	4641      	mov	r1, r8
 8001da2:	4638      	mov	r0, r7
 8001da4:	47c8      	blx	r9
 8001da6:	3001      	adds	r0, #1
 8001da8:	d0e6      	beq.n	8001d78 <_printf_common+0xa4>
 8001daa:	3601      	adds	r6, #1
 8001dac:	e7d9      	b.n	8001d62 <_printf_common+0x8e>
	...

08001db0 <_printf_i>:
 8001db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001db4:	7e0f      	ldrb	r7, [r1, #24]
 8001db6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001db8:	2f78      	cmp	r7, #120	@ 0x78
 8001dba:	4691      	mov	r9, r2
 8001dbc:	4680      	mov	r8, r0
 8001dbe:	460c      	mov	r4, r1
 8001dc0:	469a      	mov	sl, r3
 8001dc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001dc6:	d807      	bhi.n	8001dd8 <_printf_i+0x28>
 8001dc8:	2f62      	cmp	r7, #98	@ 0x62
 8001dca:	d80a      	bhi.n	8001de2 <_printf_i+0x32>
 8001dcc:	2f00      	cmp	r7, #0
 8001dce:	f000 80d1 	beq.w	8001f74 <_printf_i+0x1c4>
 8001dd2:	2f58      	cmp	r7, #88	@ 0x58
 8001dd4:	f000 80b8 	beq.w	8001f48 <_printf_i+0x198>
 8001dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ddc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001de0:	e03a      	b.n	8001e58 <_printf_i+0xa8>
 8001de2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001de6:	2b15      	cmp	r3, #21
 8001de8:	d8f6      	bhi.n	8001dd8 <_printf_i+0x28>
 8001dea:	a101      	add	r1, pc, #4	@ (adr r1, 8001df0 <_printf_i+0x40>)
 8001dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001df0:	08001e49 	.word	0x08001e49
 8001df4:	08001e5d 	.word	0x08001e5d
 8001df8:	08001dd9 	.word	0x08001dd9
 8001dfc:	08001dd9 	.word	0x08001dd9
 8001e00:	08001dd9 	.word	0x08001dd9
 8001e04:	08001dd9 	.word	0x08001dd9
 8001e08:	08001e5d 	.word	0x08001e5d
 8001e0c:	08001dd9 	.word	0x08001dd9
 8001e10:	08001dd9 	.word	0x08001dd9
 8001e14:	08001dd9 	.word	0x08001dd9
 8001e18:	08001dd9 	.word	0x08001dd9
 8001e1c:	08001f5b 	.word	0x08001f5b
 8001e20:	08001e87 	.word	0x08001e87
 8001e24:	08001f15 	.word	0x08001f15
 8001e28:	08001dd9 	.word	0x08001dd9
 8001e2c:	08001dd9 	.word	0x08001dd9
 8001e30:	08001f7d 	.word	0x08001f7d
 8001e34:	08001dd9 	.word	0x08001dd9
 8001e38:	08001e87 	.word	0x08001e87
 8001e3c:	08001dd9 	.word	0x08001dd9
 8001e40:	08001dd9 	.word	0x08001dd9
 8001e44:	08001f1d 	.word	0x08001f1d
 8001e48:	6833      	ldr	r3, [r6, #0]
 8001e4a:	1d1a      	adds	r2, r3, #4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6032      	str	r2, [r6, #0]
 8001e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e09c      	b.n	8001f96 <_printf_i+0x1e6>
 8001e5c:	6833      	ldr	r3, [r6, #0]
 8001e5e:	6820      	ldr	r0, [r4, #0]
 8001e60:	1d19      	adds	r1, r3, #4
 8001e62:	6031      	str	r1, [r6, #0]
 8001e64:	0606      	lsls	r6, r0, #24
 8001e66:	d501      	bpl.n	8001e6c <_printf_i+0xbc>
 8001e68:	681d      	ldr	r5, [r3, #0]
 8001e6a:	e003      	b.n	8001e74 <_printf_i+0xc4>
 8001e6c:	0645      	lsls	r5, r0, #25
 8001e6e:	d5fb      	bpl.n	8001e68 <_printf_i+0xb8>
 8001e70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e74:	2d00      	cmp	r5, #0
 8001e76:	da03      	bge.n	8001e80 <_printf_i+0xd0>
 8001e78:	232d      	movs	r3, #45	@ 0x2d
 8001e7a:	426d      	negs	r5, r5
 8001e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e80:	4858      	ldr	r0, [pc, #352]	@ (8001fe4 <_printf_i+0x234>)
 8001e82:	230a      	movs	r3, #10
 8001e84:	e011      	b.n	8001eaa <_printf_i+0xfa>
 8001e86:	6821      	ldr	r1, [r4, #0]
 8001e88:	6833      	ldr	r3, [r6, #0]
 8001e8a:	0608      	lsls	r0, r1, #24
 8001e8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e90:	d402      	bmi.n	8001e98 <_printf_i+0xe8>
 8001e92:	0649      	lsls	r1, r1, #25
 8001e94:	bf48      	it	mi
 8001e96:	b2ad      	uxthmi	r5, r5
 8001e98:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e9a:	4852      	ldr	r0, [pc, #328]	@ (8001fe4 <_printf_i+0x234>)
 8001e9c:	6033      	str	r3, [r6, #0]
 8001e9e:	bf14      	ite	ne
 8001ea0:	230a      	movne	r3, #10
 8001ea2:	2308      	moveq	r3, #8
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001eaa:	6866      	ldr	r6, [r4, #4]
 8001eac:	60a6      	str	r6, [r4, #8]
 8001eae:	2e00      	cmp	r6, #0
 8001eb0:	db05      	blt.n	8001ebe <_printf_i+0x10e>
 8001eb2:	6821      	ldr	r1, [r4, #0]
 8001eb4:	432e      	orrs	r6, r5
 8001eb6:	f021 0104 	bic.w	r1, r1, #4
 8001eba:	6021      	str	r1, [r4, #0]
 8001ebc:	d04b      	beq.n	8001f56 <_printf_i+0x1a6>
 8001ebe:	4616      	mov	r6, r2
 8001ec0:	fbb5 f1f3 	udiv	r1, r5, r3
 8001ec4:	fb03 5711 	mls	r7, r3, r1, r5
 8001ec8:	5dc7      	ldrb	r7, [r0, r7]
 8001eca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001ece:	462f      	mov	r7, r5
 8001ed0:	42bb      	cmp	r3, r7
 8001ed2:	460d      	mov	r5, r1
 8001ed4:	d9f4      	bls.n	8001ec0 <_printf_i+0x110>
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d10b      	bne.n	8001ef2 <_printf_i+0x142>
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	07df      	lsls	r7, r3, #31
 8001ede:	d508      	bpl.n	8001ef2 <_printf_i+0x142>
 8001ee0:	6923      	ldr	r3, [r4, #16]
 8001ee2:	6861      	ldr	r1, [r4, #4]
 8001ee4:	4299      	cmp	r1, r3
 8001ee6:	bfde      	ittt	le
 8001ee8:	2330      	movle	r3, #48	@ 0x30
 8001eea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001eee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001ef2:	1b92      	subs	r2, r2, r6
 8001ef4:	6122      	str	r2, [r4, #16]
 8001ef6:	f8cd a000 	str.w	sl, [sp]
 8001efa:	464b      	mov	r3, r9
 8001efc:	aa03      	add	r2, sp, #12
 8001efe:	4621      	mov	r1, r4
 8001f00:	4640      	mov	r0, r8
 8001f02:	f7ff fee7 	bl	8001cd4 <_printf_common>
 8001f06:	3001      	adds	r0, #1
 8001f08:	d14a      	bne.n	8001fa0 <_printf_i+0x1f0>
 8001f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0e:	b004      	add	sp, #16
 8001f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	f043 0320 	orr.w	r3, r3, #32
 8001f1a:	6023      	str	r3, [r4, #0]
 8001f1c:	4832      	ldr	r0, [pc, #200]	@ (8001fe8 <_printf_i+0x238>)
 8001f1e:	2778      	movs	r7, #120	@ 0x78
 8001f20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	6831      	ldr	r1, [r6, #0]
 8001f28:	061f      	lsls	r7, r3, #24
 8001f2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8001f2e:	d402      	bmi.n	8001f36 <_printf_i+0x186>
 8001f30:	065f      	lsls	r7, r3, #25
 8001f32:	bf48      	it	mi
 8001f34:	b2ad      	uxthmi	r5, r5
 8001f36:	6031      	str	r1, [r6, #0]
 8001f38:	07d9      	lsls	r1, r3, #31
 8001f3a:	bf44      	itt	mi
 8001f3c:	f043 0320 	orrmi.w	r3, r3, #32
 8001f40:	6023      	strmi	r3, [r4, #0]
 8001f42:	b11d      	cbz	r5, 8001f4c <_printf_i+0x19c>
 8001f44:	2310      	movs	r3, #16
 8001f46:	e7ad      	b.n	8001ea4 <_printf_i+0xf4>
 8001f48:	4826      	ldr	r0, [pc, #152]	@ (8001fe4 <_printf_i+0x234>)
 8001f4a:	e7e9      	b.n	8001f20 <_printf_i+0x170>
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	f023 0320 	bic.w	r3, r3, #32
 8001f52:	6023      	str	r3, [r4, #0]
 8001f54:	e7f6      	b.n	8001f44 <_printf_i+0x194>
 8001f56:	4616      	mov	r6, r2
 8001f58:	e7bd      	b.n	8001ed6 <_printf_i+0x126>
 8001f5a:	6833      	ldr	r3, [r6, #0]
 8001f5c:	6825      	ldr	r5, [r4, #0]
 8001f5e:	6961      	ldr	r1, [r4, #20]
 8001f60:	1d18      	adds	r0, r3, #4
 8001f62:	6030      	str	r0, [r6, #0]
 8001f64:	062e      	lsls	r6, r5, #24
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	d501      	bpl.n	8001f6e <_printf_i+0x1be>
 8001f6a:	6019      	str	r1, [r3, #0]
 8001f6c:	e002      	b.n	8001f74 <_printf_i+0x1c4>
 8001f6e:	0668      	lsls	r0, r5, #25
 8001f70:	d5fb      	bpl.n	8001f6a <_printf_i+0x1ba>
 8001f72:	8019      	strh	r1, [r3, #0]
 8001f74:	2300      	movs	r3, #0
 8001f76:	6123      	str	r3, [r4, #16]
 8001f78:	4616      	mov	r6, r2
 8001f7a:	e7bc      	b.n	8001ef6 <_printf_i+0x146>
 8001f7c:	6833      	ldr	r3, [r6, #0]
 8001f7e:	1d1a      	adds	r2, r3, #4
 8001f80:	6032      	str	r2, [r6, #0]
 8001f82:	681e      	ldr	r6, [r3, #0]
 8001f84:	6862      	ldr	r2, [r4, #4]
 8001f86:	2100      	movs	r1, #0
 8001f88:	4630      	mov	r0, r6
 8001f8a:	f7fe f941 	bl	8000210 <memchr>
 8001f8e:	b108      	cbz	r0, 8001f94 <_printf_i+0x1e4>
 8001f90:	1b80      	subs	r0, r0, r6
 8001f92:	6060      	str	r0, [r4, #4]
 8001f94:	6863      	ldr	r3, [r4, #4]
 8001f96:	6123      	str	r3, [r4, #16]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f9e:	e7aa      	b.n	8001ef6 <_printf_i+0x146>
 8001fa0:	6923      	ldr	r3, [r4, #16]
 8001fa2:	4632      	mov	r2, r6
 8001fa4:	4649      	mov	r1, r9
 8001fa6:	4640      	mov	r0, r8
 8001fa8:	47d0      	blx	sl
 8001faa:	3001      	adds	r0, #1
 8001fac:	d0ad      	beq.n	8001f0a <_printf_i+0x15a>
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	079b      	lsls	r3, r3, #30
 8001fb2:	d413      	bmi.n	8001fdc <_printf_i+0x22c>
 8001fb4:	68e0      	ldr	r0, [r4, #12]
 8001fb6:	9b03      	ldr	r3, [sp, #12]
 8001fb8:	4298      	cmp	r0, r3
 8001fba:	bfb8      	it	lt
 8001fbc:	4618      	movlt	r0, r3
 8001fbe:	e7a6      	b.n	8001f0e <_printf_i+0x15e>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	4632      	mov	r2, r6
 8001fc4:	4649      	mov	r1, r9
 8001fc6:	4640      	mov	r0, r8
 8001fc8:	47d0      	blx	sl
 8001fca:	3001      	adds	r0, #1
 8001fcc:	d09d      	beq.n	8001f0a <_printf_i+0x15a>
 8001fce:	3501      	adds	r5, #1
 8001fd0:	68e3      	ldr	r3, [r4, #12]
 8001fd2:	9903      	ldr	r1, [sp, #12]
 8001fd4:	1a5b      	subs	r3, r3, r1
 8001fd6:	42ab      	cmp	r3, r5
 8001fd8:	dcf2      	bgt.n	8001fc0 <_printf_i+0x210>
 8001fda:	e7eb      	b.n	8001fb4 <_printf_i+0x204>
 8001fdc:	2500      	movs	r5, #0
 8001fde:	f104 0619 	add.w	r6, r4, #25
 8001fe2:	e7f5      	b.n	8001fd0 <_printf_i+0x220>
 8001fe4:	08002477 	.word	0x08002477
 8001fe8:	08002488 	.word	0x08002488

08001fec <__swbuf_r>:
 8001fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fee:	460e      	mov	r6, r1
 8001ff0:	4614      	mov	r4, r2
 8001ff2:	4605      	mov	r5, r0
 8001ff4:	b118      	cbz	r0, 8001ffe <__swbuf_r+0x12>
 8001ff6:	6a03      	ldr	r3, [r0, #32]
 8001ff8:	b90b      	cbnz	r3, 8001ffe <__swbuf_r+0x12>
 8001ffa:	f7ff fa3d 	bl	8001478 <__sinit>
 8001ffe:	69a3      	ldr	r3, [r4, #24]
 8002000:	60a3      	str	r3, [r4, #8]
 8002002:	89a3      	ldrh	r3, [r4, #12]
 8002004:	071a      	lsls	r2, r3, #28
 8002006:	d501      	bpl.n	800200c <__swbuf_r+0x20>
 8002008:	6923      	ldr	r3, [r4, #16]
 800200a:	b943      	cbnz	r3, 800201e <__swbuf_r+0x32>
 800200c:	4621      	mov	r1, r4
 800200e:	4628      	mov	r0, r5
 8002010:	f000 f82a 	bl	8002068 <__swsetup_r>
 8002014:	b118      	cbz	r0, 800201e <__swbuf_r+0x32>
 8002016:	f04f 37ff 	mov.w	r7, #4294967295
 800201a:	4638      	mov	r0, r7
 800201c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	6922      	ldr	r2, [r4, #16]
 8002022:	1a98      	subs	r0, r3, r2
 8002024:	6963      	ldr	r3, [r4, #20]
 8002026:	b2f6      	uxtb	r6, r6
 8002028:	4283      	cmp	r3, r0
 800202a:	4637      	mov	r7, r6
 800202c:	dc05      	bgt.n	800203a <__swbuf_r+0x4e>
 800202e:	4621      	mov	r1, r4
 8002030:	4628      	mov	r0, r5
 8002032:	f7ff fcbd 	bl	80019b0 <_fflush_r>
 8002036:	2800      	cmp	r0, #0
 8002038:	d1ed      	bne.n	8002016 <__swbuf_r+0x2a>
 800203a:	68a3      	ldr	r3, [r4, #8]
 800203c:	3b01      	subs	r3, #1
 800203e:	60a3      	str	r3, [r4, #8]
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	6022      	str	r2, [r4, #0]
 8002046:	701e      	strb	r6, [r3, #0]
 8002048:	6962      	ldr	r2, [r4, #20]
 800204a:	1c43      	adds	r3, r0, #1
 800204c:	429a      	cmp	r2, r3
 800204e:	d004      	beq.n	800205a <__swbuf_r+0x6e>
 8002050:	89a3      	ldrh	r3, [r4, #12]
 8002052:	07db      	lsls	r3, r3, #31
 8002054:	d5e1      	bpl.n	800201a <__swbuf_r+0x2e>
 8002056:	2e0a      	cmp	r6, #10
 8002058:	d1df      	bne.n	800201a <__swbuf_r+0x2e>
 800205a:	4621      	mov	r1, r4
 800205c:	4628      	mov	r0, r5
 800205e:	f7ff fca7 	bl	80019b0 <_fflush_r>
 8002062:	2800      	cmp	r0, #0
 8002064:	d0d9      	beq.n	800201a <__swbuf_r+0x2e>
 8002066:	e7d6      	b.n	8002016 <__swbuf_r+0x2a>

08002068 <__swsetup_r>:
 8002068:	b538      	push	{r3, r4, r5, lr}
 800206a:	4b29      	ldr	r3, [pc, #164]	@ (8002110 <__swsetup_r+0xa8>)
 800206c:	4605      	mov	r5, r0
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	460c      	mov	r4, r1
 8002072:	b118      	cbz	r0, 800207c <__swsetup_r+0x14>
 8002074:	6a03      	ldr	r3, [r0, #32]
 8002076:	b90b      	cbnz	r3, 800207c <__swsetup_r+0x14>
 8002078:	f7ff f9fe 	bl	8001478 <__sinit>
 800207c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002080:	0719      	lsls	r1, r3, #28
 8002082:	d422      	bmi.n	80020ca <__swsetup_r+0x62>
 8002084:	06da      	lsls	r2, r3, #27
 8002086:	d407      	bmi.n	8002098 <__swsetup_r+0x30>
 8002088:	2209      	movs	r2, #9
 800208a:	602a      	str	r2, [r5, #0]
 800208c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002090:	81a3      	strh	r3, [r4, #12]
 8002092:	f04f 30ff 	mov.w	r0, #4294967295
 8002096:	e033      	b.n	8002100 <__swsetup_r+0x98>
 8002098:	0758      	lsls	r0, r3, #29
 800209a:	d512      	bpl.n	80020c2 <__swsetup_r+0x5a>
 800209c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800209e:	b141      	cbz	r1, 80020b2 <__swsetup_r+0x4a>
 80020a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80020a4:	4299      	cmp	r1, r3
 80020a6:	d002      	beq.n	80020ae <__swsetup_r+0x46>
 80020a8:	4628      	mov	r0, r5
 80020aa:	f7ff fafd 	bl	80016a8 <_free_r>
 80020ae:	2300      	movs	r3, #0
 80020b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80020b2:	89a3      	ldrh	r3, [r4, #12]
 80020b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80020b8:	81a3      	strh	r3, [r4, #12]
 80020ba:	2300      	movs	r3, #0
 80020bc:	6063      	str	r3, [r4, #4]
 80020be:	6923      	ldr	r3, [r4, #16]
 80020c0:	6023      	str	r3, [r4, #0]
 80020c2:	89a3      	ldrh	r3, [r4, #12]
 80020c4:	f043 0308 	orr.w	r3, r3, #8
 80020c8:	81a3      	strh	r3, [r4, #12]
 80020ca:	6923      	ldr	r3, [r4, #16]
 80020cc:	b94b      	cbnz	r3, 80020e2 <__swsetup_r+0x7a>
 80020ce:	89a3      	ldrh	r3, [r4, #12]
 80020d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80020d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020d8:	d003      	beq.n	80020e2 <__swsetup_r+0x7a>
 80020da:	4621      	mov	r1, r4
 80020dc:	4628      	mov	r0, r5
 80020de:	f000 f883 	bl	80021e8 <__smakebuf_r>
 80020e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020e6:	f013 0201 	ands.w	r2, r3, #1
 80020ea:	d00a      	beq.n	8002102 <__swsetup_r+0x9a>
 80020ec:	2200      	movs	r2, #0
 80020ee:	60a2      	str	r2, [r4, #8]
 80020f0:	6962      	ldr	r2, [r4, #20]
 80020f2:	4252      	negs	r2, r2
 80020f4:	61a2      	str	r2, [r4, #24]
 80020f6:	6922      	ldr	r2, [r4, #16]
 80020f8:	b942      	cbnz	r2, 800210c <__swsetup_r+0xa4>
 80020fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80020fe:	d1c5      	bne.n	800208c <__swsetup_r+0x24>
 8002100:	bd38      	pop	{r3, r4, r5, pc}
 8002102:	0799      	lsls	r1, r3, #30
 8002104:	bf58      	it	pl
 8002106:	6962      	ldrpl	r2, [r4, #20]
 8002108:	60a2      	str	r2, [r4, #8]
 800210a:	e7f4      	b.n	80020f6 <__swsetup_r+0x8e>
 800210c:	2000      	movs	r0, #0
 800210e:	e7f7      	b.n	8002100 <__swsetup_r+0x98>
 8002110:	20000018 	.word	0x20000018

08002114 <_raise_r>:
 8002114:	291f      	cmp	r1, #31
 8002116:	b538      	push	{r3, r4, r5, lr}
 8002118:	4605      	mov	r5, r0
 800211a:	460c      	mov	r4, r1
 800211c:	d904      	bls.n	8002128 <_raise_r+0x14>
 800211e:	2316      	movs	r3, #22
 8002120:	6003      	str	r3, [r0, #0]
 8002122:	f04f 30ff 	mov.w	r0, #4294967295
 8002126:	bd38      	pop	{r3, r4, r5, pc}
 8002128:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800212a:	b112      	cbz	r2, 8002132 <_raise_r+0x1e>
 800212c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002130:	b94b      	cbnz	r3, 8002146 <_raise_r+0x32>
 8002132:	4628      	mov	r0, r5
 8002134:	f000 f830 	bl	8002198 <_getpid_r>
 8002138:	4622      	mov	r2, r4
 800213a:	4601      	mov	r1, r0
 800213c:	4628      	mov	r0, r5
 800213e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002142:	f000 b817 	b.w	8002174 <_kill_r>
 8002146:	2b01      	cmp	r3, #1
 8002148:	d00a      	beq.n	8002160 <_raise_r+0x4c>
 800214a:	1c59      	adds	r1, r3, #1
 800214c:	d103      	bne.n	8002156 <_raise_r+0x42>
 800214e:	2316      	movs	r3, #22
 8002150:	6003      	str	r3, [r0, #0]
 8002152:	2001      	movs	r0, #1
 8002154:	e7e7      	b.n	8002126 <_raise_r+0x12>
 8002156:	2100      	movs	r1, #0
 8002158:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800215c:	4620      	mov	r0, r4
 800215e:	4798      	blx	r3
 8002160:	2000      	movs	r0, #0
 8002162:	e7e0      	b.n	8002126 <_raise_r+0x12>

08002164 <raise>:
 8002164:	4b02      	ldr	r3, [pc, #8]	@ (8002170 <raise+0xc>)
 8002166:	4601      	mov	r1, r0
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	f7ff bfd3 	b.w	8002114 <_raise_r>
 800216e:	bf00      	nop
 8002170:	20000018 	.word	0x20000018

08002174 <_kill_r>:
 8002174:	b538      	push	{r3, r4, r5, lr}
 8002176:	4d07      	ldr	r5, [pc, #28]	@ (8002194 <_kill_r+0x20>)
 8002178:	2300      	movs	r3, #0
 800217a:	4604      	mov	r4, r0
 800217c:	4608      	mov	r0, r1
 800217e:	4611      	mov	r1, r2
 8002180:	602b      	str	r3, [r5, #0]
 8002182:	f000 f8b7 	bl	80022f4 <_kill>
 8002186:	1c43      	adds	r3, r0, #1
 8002188:	d102      	bne.n	8002190 <_kill_r+0x1c>
 800218a:	682b      	ldr	r3, [r5, #0]
 800218c:	b103      	cbz	r3, 8002190 <_kill_r+0x1c>
 800218e:	6023      	str	r3, [r4, #0]
 8002190:	bd38      	pop	{r3, r4, r5, pc}
 8002192:	bf00      	nop
 8002194:	200001c0 	.word	0x200001c0

08002198 <_getpid_r>:
 8002198:	f000 b894 	b.w	80022c4 <_getpid>

0800219c <__swhatbuf_r>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	460c      	mov	r4, r1
 80021a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021a4:	2900      	cmp	r1, #0
 80021a6:	b096      	sub	sp, #88	@ 0x58
 80021a8:	4615      	mov	r5, r2
 80021aa:	461e      	mov	r6, r3
 80021ac:	da0d      	bge.n	80021ca <__swhatbuf_r+0x2e>
 80021ae:	89a3      	ldrh	r3, [r4, #12]
 80021b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80021b4:	f04f 0100 	mov.w	r1, #0
 80021b8:	bf14      	ite	ne
 80021ba:	2340      	movne	r3, #64	@ 0x40
 80021bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80021c0:	2000      	movs	r0, #0
 80021c2:	6031      	str	r1, [r6, #0]
 80021c4:	602b      	str	r3, [r5, #0]
 80021c6:	b016      	add	sp, #88	@ 0x58
 80021c8:	bd70      	pop	{r4, r5, r6, pc}
 80021ca:	466a      	mov	r2, sp
 80021cc:	f000 f848 	bl	8002260 <_fstat_r>
 80021d0:	2800      	cmp	r0, #0
 80021d2:	dbec      	blt.n	80021ae <__swhatbuf_r+0x12>
 80021d4:	9901      	ldr	r1, [sp, #4]
 80021d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80021da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80021de:	4259      	negs	r1, r3
 80021e0:	4159      	adcs	r1, r3
 80021e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e6:	e7eb      	b.n	80021c0 <__swhatbuf_r+0x24>

080021e8 <__smakebuf_r>:
 80021e8:	898b      	ldrh	r3, [r1, #12]
 80021ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021ec:	079d      	lsls	r5, r3, #30
 80021ee:	4606      	mov	r6, r0
 80021f0:	460c      	mov	r4, r1
 80021f2:	d507      	bpl.n	8002204 <__smakebuf_r+0x1c>
 80021f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80021f8:	6023      	str	r3, [r4, #0]
 80021fa:	6123      	str	r3, [r4, #16]
 80021fc:	2301      	movs	r3, #1
 80021fe:	6163      	str	r3, [r4, #20]
 8002200:	b003      	add	sp, #12
 8002202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002204:	ab01      	add	r3, sp, #4
 8002206:	466a      	mov	r2, sp
 8002208:	f7ff ffc8 	bl	800219c <__swhatbuf_r>
 800220c:	9f00      	ldr	r7, [sp, #0]
 800220e:	4605      	mov	r5, r0
 8002210:	4639      	mov	r1, r7
 8002212:	4630      	mov	r0, r6
 8002214:	f7ff fabc 	bl	8001790 <_malloc_r>
 8002218:	b948      	cbnz	r0, 800222e <__smakebuf_r+0x46>
 800221a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800221e:	059a      	lsls	r2, r3, #22
 8002220:	d4ee      	bmi.n	8002200 <__smakebuf_r+0x18>
 8002222:	f023 0303 	bic.w	r3, r3, #3
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	81a3      	strh	r3, [r4, #12]
 800222c:	e7e2      	b.n	80021f4 <__smakebuf_r+0xc>
 800222e:	89a3      	ldrh	r3, [r4, #12]
 8002230:	6020      	str	r0, [r4, #0]
 8002232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002236:	81a3      	strh	r3, [r4, #12]
 8002238:	9b01      	ldr	r3, [sp, #4]
 800223a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800223e:	b15b      	cbz	r3, 8002258 <__smakebuf_r+0x70>
 8002240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002244:	4630      	mov	r0, r6
 8002246:	f000 f81d 	bl	8002284 <_isatty_r>
 800224a:	b128      	cbz	r0, 8002258 <__smakebuf_r+0x70>
 800224c:	89a3      	ldrh	r3, [r4, #12]
 800224e:	f023 0303 	bic.w	r3, r3, #3
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	81a3      	strh	r3, [r4, #12]
 8002258:	89a3      	ldrh	r3, [r4, #12]
 800225a:	431d      	orrs	r5, r3
 800225c:	81a5      	strh	r5, [r4, #12]
 800225e:	e7cf      	b.n	8002200 <__smakebuf_r+0x18>

08002260 <_fstat_r>:
 8002260:	b538      	push	{r3, r4, r5, lr}
 8002262:	4d07      	ldr	r5, [pc, #28]	@ (8002280 <_fstat_r+0x20>)
 8002264:	2300      	movs	r3, #0
 8002266:	4604      	mov	r4, r0
 8002268:	4608      	mov	r0, r1
 800226a:	4611      	mov	r1, r2
 800226c:	602b      	str	r3, [r5, #0]
 800226e:	f000 f821 	bl	80022b4 <_fstat>
 8002272:	1c43      	adds	r3, r0, #1
 8002274:	d102      	bne.n	800227c <_fstat_r+0x1c>
 8002276:	682b      	ldr	r3, [r5, #0]
 8002278:	b103      	cbz	r3, 800227c <_fstat_r+0x1c>
 800227a:	6023      	str	r3, [r4, #0]
 800227c:	bd38      	pop	{r3, r4, r5, pc}
 800227e:	bf00      	nop
 8002280:	200001c0 	.word	0x200001c0

08002284 <_isatty_r>:
 8002284:	b538      	push	{r3, r4, r5, lr}
 8002286:	4d06      	ldr	r5, [pc, #24]	@ (80022a0 <_isatty_r+0x1c>)
 8002288:	2300      	movs	r3, #0
 800228a:	4604      	mov	r4, r0
 800228c:	4608      	mov	r0, r1
 800228e:	602b      	str	r3, [r5, #0]
 8002290:	f000 f828 	bl	80022e4 <_isatty>
 8002294:	1c43      	adds	r3, r0, #1
 8002296:	d102      	bne.n	800229e <_isatty_r+0x1a>
 8002298:	682b      	ldr	r3, [r5, #0]
 800229a:	b103      	cbz	r3, 800229e <_isatty_r+0x1a>
 800229c:	6023      	str	r3, [r4, #0]
 800229e:	bd38      	pop	{r3, r4, r5, pc}
 80022a0:	200001c0 	.word	0x200001c0

080022a4 <_close>:
 80022a4:	4b02      	ldr	r3, [pc, #8]	@ (80022b0 <_close+0xc>)
 80022a6:	2258      	movs	r2, #88	@ 0x58
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	f04f 30ff 	mov.w	r0, #4294967295
 80022ae:	4770      	bx	lr
 80022b0:	200001c0 	.word	0x200001c0

080022b4 <_fstat>:
 80022b4:	4b02      	ldr	r3, [pc, #8]	@ (80022c0 <_fstat+0xc>)
 80022b6:	2258      	movs	r2, #88	@ 0x58
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f04f 30ff 	mov.w	r0, #4294967295
 80022be:	4770      	bx	lr
 80022c0:	200001c0 	.word	0x200001c0

080022c4 <_getpid>:
 80022c4:	4b02      	ldr	r3, [pc, #8]	@ (80022d0 <_getpid+0xc>)
 80022c6:	2258      	movs	r2, #88	@ 0x58
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f04f 30ff 	mov.w	r0, #4294967295
 80022ce:	4770      	bx	lr
 80022d0:	200001c0 	.word	0x200001c0

080022d4 <_gettimeofday>:
 80022d4:	4b02      	ldr	r3, [pc, #8]	@ (80022e0 <_gettimeofday+0xc>)
 80022d6:	2258      	movs	r2, #88	@ 0x58
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f04f 30ff 	mov.w	r0, #4294967295
 80022de:	4770      	bx	lr
 80022e0:	200001c0 	.word	0x200001c0

080022e4 <_isatty>:
 80022e4:	4b02      	ldr	r3, [pc, #8]	@ (80022f0 <_isatty+0xc>)
 80022e6:	2258      	movs	r2, #88	@ 0x58
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	2000      	movs	r0, #0
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	200001c0 	.word	0x200001c0

080022f4 <_kill>:
 80022f4:	4b02      	ldr	r3, [pc, #8]	@ (8002300 <_kill+0xc>)
 80022f6:	2258      	movs	r2, #88	@ 0x58
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f04f 30ff 	mov.w	r0, #4294967295
 80022fe:	4770      	bx	lr
 8002300:	200001c0 	.word	0x200001c0

08002304 <_lseek>:
 8002304:	4b02      	ldr	r3, [pc, #8]	@ (8002310 <_lseek+0xc>)
 8002306:	2258      	movs	r2, #88	@ 0x58
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	f04f 30ff 	mov.w	r0, #4294967295
 800230e:	4770      	bx	lr
 8002310:	200001c0 	.word	0x200001c0

08002314 <_read>:
 8002314:	4b02      	ldr	r3, [pc, #8]	@ (8002320 <_read+0xc>)
 8002316:	2258      	movs	r2, #88	@ 0x58
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	f04f 30ff 	mov.w	r0, #4294967295
 800231e:	4770      	bx	lr
 8002320:	200001c0 	.word	0x200001c0

08002324 <_sbrk>:
 8002324:	4a04      	ldr	r2, [pc, #16]	@ (8002338 <_sbrk+0x14>)
 8002326:	6811      	ldr	r1, [r2, #0]
 8002328:	4603      	mov	r3, r0
 800232a:	b909      	cbnz	r1, 8002330 <_sbrk+0xc>
 800232c:	4903      	ldr	r1, [pc, #12]	@ (800233c <_sbrk+0x18>)
 800232e:	6011      	str	r1, [r2, #0]
 8002330:	6810      	ldr	r0, [r2, #0]
 8002332:	4403      	add	r3, r0
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4770      	bx	lr
 8002338:	200001d0 	.word	0x200001d0
 800233c:	200001d8 	.word	0x200001d8

08002340 <_write>:
 8002340:	4b02      	ldr	r3, [pc, #8]	@ (800234c <_write+0xc>)
 8002342:	2258      	movs	r2, #88	@ 0x58
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	f04f 30ff 	mov.w	r0, #4294967295
 800234a:	4770      	bx	lr
 800234c:	200001c0 	.word	0x200001c0

08002350 <_exit>:
 8002350:	e7fe      	b.n	8002350 <_exit>
	...

08002354 <_init>:
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002356:	bf00      	nop
 8002358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235a:	bc08      	pop	{r3}
 800235c:	469e      	mov	lr, r3
 800235e:	4770      	bx	lr

08002360 <_fini>:
 8002360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002362:	bf00      	nop
 8002364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002366:	bc08      	pop	{r3}
 8002368:	469e      	mov	lr, r3
 800236a:	4770      	bx	lr
