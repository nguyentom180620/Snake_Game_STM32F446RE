
Bare_Metal_Snake_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022dc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080024ac  080024ac  000034ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025dc  080025dc  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080025dc  080025dc  000035dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025e4  080025e4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e4  080025e4  000035e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025e8  080025e8  000035e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080025ec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08002654  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002654  000041d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f20  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000259  00000000  00000000  00004fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00005218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000159  00000000  00000000  000053c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001eac  00000000  00000000  00005519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001112  00000000  00000000  000073c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000863f  00000000  00000000  000084d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00010b16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011ec  00000000  00000000  00010b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00011d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002494 	.word	0x08002494

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08002494 	.word	0x08002494

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
static void DisplayGame(snake_Type *snake, apple_Type *apple);
static void ResetGame(snake_Type *snake, apple_Type *apple);
static void MoveSnake(snake_Type *snake, apple_Type *apple);

int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b0a8      	sub	sp, #160	@ 0xa0
 80002b4:	af00      	add	r7, sp, #0
	SetSystemClockto16MHz();
 80002b6:	f000 f85f 	bl	8000378 <SetSystemClockto16MHz>
	ConfigureTimer3();
 80002ba:	f000 f8ad 	bl	8000418 <ConfigureTimer3>
	SPI1ClockEnable();
 80002be:	f000 f931 	bl	8000524 <SPI1ClockEnable>
	GPIOAClockEnable();
 80002c2:	f000 f943 	bl	800054c <GPIOAClockEnable>
	GPIOCClockEnable();
 80002c6:	f000 f955 	bl	8000574 <GPIOCClockEnable>

	ResetButtonInit();
 80002ca:	f000 fb5b 	bl	8000984 <ResetButtonInit>
	MovementButtonsInit();
 80002ce:	f000 fb95 	bl	80009fc <MovementButtonsInit>

	NVIC_EnableIRQ(EXTI0IRQn);
 80002d2:	2006      	movs	r0, #6
 80002d4:	f000 fc06 	bl	8000ae4 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI1IRQn);
 80002d8:	2007      	movs	r0, #7
 80002da:	f000 fc03 	bl	8000ae4 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2IRQn);
 80002de:	2008      	movs	r0, #8
 80002e0:	f000 fc00 	bl	8000ae4 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3IRQn);
 80002e4:	2009      	movs	r0, #9
 80002e6:	f000 fbfd 	bl	8000ae4 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI15_10IRQn);
 80002ea:	2028      	movs	r0, #40	@ 0x28
 80002ec:	f000 fbfa 	bl	8000ae4 <NVIC_EnableIRQ>

	SPI1PinsInit();
 80002f0:	f000 fa12 	bl	8000718 <SPI1PinsInit>
	SPI1Init();
 80002f4:	f000 f952 	bl	800059c <SPI1Init>

	matrixInit();
 80002f8:	f000 fa88 	bl	800080c <matrixInit>
	RandomSeedLoader();
 80002fc:	f000 f8c4 	bl	8000488 <RandomSeedLoader>

	// Write data here
	// Snake starts with head at (3, 2), tail at (1, 2), and size 3
	snake_Type snake;
	snake_Type *snake_Ptr = &snake;
 8000300:	f107 0308 	add.w	r3, r7, #8
 8000304:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	SnakeInit(snake_Ptr);
 8000308:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800030c:	f000 fca7 	bl	8000c5e <SnakeInit>

	// Apple starts at (3, 7) and will update to a random square after collected
	apple_Type apple;
	apple_Type *apple_Ptr = &apple;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	AppleInit(apple_Ptr);
 8000316:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800031a:	f000 fe67 	bl	8000fec <AppleInit>

	while(1)
	{
		// If reset, restart snake and apple values
		if (reset == true)
 800031e:	4b14      	ldr	r3, [pc, #80]	@ (8000370 <main+0xc0>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	b2db      	uxtb	r3, r3
 8000324:	2b00      	cmp	r3, #0
 8000326:	d005      	beq.n	8000334 <main+0x84>
		{
			ResetGame(snake_Ptr, apple_Ptr);
 8000328:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800032c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000330:	f000 ff84 	bl	800123c <ResetGame>
		}
		// If dead, play the dead sequence and queue for restart
		if (alive == false)
 8000334:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <main+0xc4>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	f083 0301 	eor.w	r3, r3, #1
 800033e:	b2db      	uxtb	r3, r3
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <main+0x98>
		{
			playLoseScreen();
 8000344:	f000 fcd2 	bl	8000cec <playLoseScreen>
		}

		// First, display to screen
		DisplayGame(snake_Ptr, apple_Ptr);
 8000348:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800034c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000350:	f000 ff5c 	bl	800120c <DisplayGame>

		// Next, delay by set amount (default 1 second)
		Delay(250);
 8000354:	20fa      	movs	r0, #250	@ 0xfa
 8000356:	f000 f8af 	bl	80004b8 <Delay>

		// Then, move the snake by one
		MoveSnake(snake_Ptr, apple_Ptr);
 800035a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800035e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000362:	f000 ff91 	bl	8001288 <MoveSnake>

		// Finally, check if head is currently at an apple (then set that bool)
		// and lastly check if we are alive (Are we out of bounds or have we hit ourself)
		SnakeCheckAfterMove(snake_Ptr);
 8000366:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800036a:	f000 fdd9 	bl	8000f20 <SnakeCheckAfterMove>
		if (reset == true)
 800036e:	e7d6      	b.n	800031e <main+0x6e>
 8000370:	20000084 	.word	0x20000084
 8000374:	20000008 	.word	0x20000008

08000378 <SetSystemClockto16MHz>:

	return EXIT_SUCCESS;
}

void SetSystemClockto16MHz(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
	// Initialize System Clock
	uint32_t *RCC_CR_Ptr = (uint32_t*)RCC_CR;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SetSystemClockto16MHz+0x94>)
 8000380:	60fb      	str	r3, [r7, #12]
	// Turn on HSI
	*RCC_CR_Ptr |= (uint32_t)0x1;
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f043 0201 	orr.w	r2, r3, #1
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	601a      	str	r2, [r3, #0]
	// Wait for HSI Clock to be ready
	while ((*RCC_CR_Ptr & 0x2) == 0);
 800038e:	bf00      	nop
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 0302 	and.w	r3, r3, #2
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <SetSystemClockto16MHz+0x18>

	// Configure Prescalers
	uint32_t *RCC_CFGR_Ptr = (uint32_t*)RCC_CFGR;
 800039c:	4b1c      	ldr	r3, [pc, #112]	@ (8000410 <SetSystemClockto16MHz+0x98>)
 800039e:	60bb      	str	r3, [r7, #8]
	// HPRE
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b1111 << 4);
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	601a      	str	r2, [r3, #0]
	// PPRE1
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b111 << 10);
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	601a      	str	r2, [r3, #0]
	// PPRE2
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b111 << 13);
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	601a      	str	r2, [r3, #0]

	// Set HSI as Clock Source
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b11);
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f023 0203 	bic.w	r2, r3, #3
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	601a      	str	r2, [r3, #0]

	// Configure Flash
	uint32_t *FLASH_ACR_Ptr = (uint32_t*)FLASH_ACR;
 80003d0:	4b10      	ldr	r3, [pc, #64]	@ (8000414 <SetSystemClockto16MHz+0x9c>)
 80003d2:	607b      	str	r3, [r7, #4]
	// Latency
	*FLASH_ACR_Ptr |= (uint32_t)(0b0000 << 0);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	601a      	str	r2, [r3, #0]
	// ICEN
	*FLASH_ACR_Ptr |= (uint32_t)(0b1 << 9);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	601a      	str	r2, [r3, #0]
	// DCEN
	*FLASH_ACR_Ptr |= (uint32_t)(0b1 << 10);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	601a      	str	r2, [r3, #0]

	// Turn off HSE
	*RCC_CR_Ptr &= ~((uint32_t)0x1 << 16);
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	601a      	str	r2, [r3, #0]
}
 8000400:	bf00      	nop
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40023800 	.word	0x40023800
 8000410:	40023808 	.word	0x40023808
 8000414:	40023c00 	.word	0x40023c00

08000418 <ConfigureTimer3>:

void ConfigureTimer3(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b087      	sub	sp, #28
 800041c:	af00      	add	r7, sp, #0
	// Enable TIM3 Clock
	uint32_t *RCC_APB1_Ptr = (uint32_t*)RCC_APB1;
 800041e:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <ConfigureTimer3+0x5c>)
 8000420:	617b      	str	r3, [r7, #20]
	*RCC_APB1_Ptr |= (uint32_t)0x2;
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f043 0202 	orr.w	r2, r3, #2
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	601a      	str	r2, [r3, #0]

	// Set Prescaler
	uint32_t *TIM3_PSC_Ptr = (uint32_t*)TIM3_PSC;
 800042e:	4b12      	ldr	r3, [pc, #72]	@ (8000478 <ConfigureTimer3+0x60>)
 8000430:	613b      	str	r3, [r7, #16]
	*TIM3_PSC_Ptr |= (uint32_t)0xF;
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f043 020f 	orr.w	r2, r3, #15
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	601a      	str	r2, [r3, #0]

	// Set Auto-Reload
	uint32_t *TIM3_ARR_Ptr = (uint32_t*)TIM3_ARR;
 800043e:	4b0f      	ldr	r3, [pc, #60]	@ (800047c <ConfigureTimer3+0x64>)
 8000440:	60fb      	str	r3, [r7, #12]
	*TIM3_ARR_Ptr = (uint32_t)0x3E7;
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000448:	601a      	str	r2, [r3, #0]
//	// Enable Interrupt
//	uint32_t *TIM3_DIER_Ptr = (uint32_t*)TIM3_DIER;
//	*TIM3_DIER_Ptr |= (uint32_t)0x1;

	// Clear UIF Bit
	uint32_t *TIM3_SR_Ptr = (uint32_t*)TIM3_SR;
 800044a:	4b0d      	ldr	r3, [pc, #52]	@ (8000480 <ConfigureTimer3+0x68>)
 800044c:	60bb      	str	r3, [r7, #8]
	*TIM3_SR_Ptr &= (uint32_t)0xFFFE;
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8000456:	4013      	ands	r3, r2
 8000458:	68ba      	ldr	r2, [r7, #8]
 800045a:	6013      	str	r3, [r2, #0]

//	// Enable NVIC Interrupt for Timer 3
//	NVIC_EnableIRQ(TIM3_IRQn);

	// Enable TIM3
	uint32_t *TIM3_CR1_Ptr = (uint32_t*)TIM3_CR1;
 800045c:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <ConfigureTimer3+0x6c>)
 800045e:	607b      	str	r3, [r7, #4]
	*TIM3_CR1_Ptr = (uint32_t)0b1 << 0;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2201      	movs	r2, #1
 8000464:	601a      	str	r2, [r3, #0]
}
 8000466:	bf00      	nop
 8000468:	371c      	adds	r7, #28
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40023840 	.word	0x40023840
 8000478:	40000428 	.word	0x40000428
 800047c:	4000042c 	.word	0x4000042c
 8000480:	40000410 	.word	0x40000410
 8000484:	40000400 	.word	0x40000400

08000488 <RandomSeedLoader>:

void RandomSeedLoader(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
	// For random seeding upon reset
	volatile uint32_t *TIM3_CNT_Ptr = (volatile uint32_t*)TIM3_CNT;
 800048e:	4b09      	ldr	r3, [pc, #36]	@ (80004b4 <RandomSeedLoader+0x2c>)
 8000490:	607b      	str	r3, [r7, #4]
	uint32_t timer3Val = *TIM3_CNT_Ptr;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	603b      	str	r3, [r7, #0]
	srand((uint32_t)time(NULL) ^ (uint32_t)timer3Val);
 8000498:	2000      	movs	r0, #0
 800049a:	f001 f90f 	bl	80016bc <time>
 800049e:	4602      	mov	r2, r0
 80004a0:	460b      	mov	r3, r1
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	4053      	eors	r3, r2
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 ff8e 	bl	80013c8 <srand>
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40000424 	.word	0x40000424

080004b8 <Delay>:

void Delay(uint32_t ms)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b087      	sub	sp, #28
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	volatile uint32_t i;
	uint32_t *TIM3_CNT_Ptr = (uint32_t*)TIM3_CNT;
 80004c0:	4b15      	ldr	r3, [pc, #84]	@ (8000518 <Delay+0x60>)
 80004c2:	617b      	str	r3, [r7, #20]
	uint32_t *TIM3_SR_Ptr = (uint32_t*)TIM3_SR;
 80004c4:	4b15      	ldr	r3, [pc, #84]	@ (800051c <Delay+0x64>)
 80004c6:	613b      	str	r3, [r7, #16]
	for (i = 0; i <= ms; i++)
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	e018      	b.n	8000500 <Delay+0x48>
	{
		// Check if reset is true (this is where most polling happens)
		if (reset) return;
 80004ce:	4b14      	ldr	r3, [pc, #80]	@ (8000520 <Delay+0x68>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d118      	bne.n	800050a <Delay+0x52>

		// Clear TIM3 Count
		*TIM3_CNT_Ptr = 0;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]

		// Wait for UIF (1 cycle of 1kHz clocking)
		while((*TIM3_SR_Ptr & 0x1) == 0);	// This will make a 1ms delay
 80004de:	bf00      	nop
 80004e0:	693b      	ldr	r3, [r7, #16]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d0f9      	beq.n	80004e0 <Delay+0x28>

		// Reset UIF
		*TIM3_SR_Ptr &= (uint32_t)0xFFFE;
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80004f4:	4013      	ands	r3, r2
 80004f6:	693a      	ldr	r2, [r7, #16]
 80004f8:	6013      	str	r3, [r2, #0]
	for (i = 0; i <= ms; i++)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	3301      	adds	r3, #1
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	429a      	cmp	r2, r3
 8000506:	d2e2      	bcs.n	80004ce <Delay+0x16>
 8000508:	e000      	b.n	800050c <Delay+0x54>
		if (reset) return;
 800050a:	bf00      	nop
	}
}
 800050c:	371c      	adds	r7, #28
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40000424 	.word	0x40000424
 800051c:	40000410 	.word	0x40000410
 8000520:	20000084 	.word	0x20000084

08000524 <SPI1ClockEnable>:

void SPI1ClockEnable(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
	// First, SPI clock through APB2 Bus
	uint32_t *RCC_APB2ENR_Ptr = (uint32_t*)RCC_APB2ENR;
 800052a:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <SPI1ClockEnable+0x24>)
 800052c:	607b      	str	r3, [r7, #4]
	*RCC_APB2ENR_Ptr |= (uint32_t)(0x1 << 12);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	601a      	str	r2, [r3, #0]
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023844 	.word	0x40023844

0800054c <GPIOAClockEnable>:

void GPIOAClockEnable(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
	// Now, Enable GPIOA Clock through AHB1 Bus
	uint32_t *RCC_AHB1ENR_Ptr = (uint32_t*)RCC_AHB1ENR;
 8000552:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <GPIOAClockEnable+0x24>)
 8000554:	607b      	str	r3, [r7, #4]
	*RCC_AHB1ENR_Ptr |= (uint32_t)0x1;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f043 0201 	orr.w	r2, r3, #1
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40023830 	.word	0x40023830

08000574 <GPIOCClockEnable>:

void GPIOCClockEnable(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
	// Now, Enable GPIOC Clock through AHB1 Bus
	uint32_t *RCC_AHB1ENR_Ptr = (uint32_t*)RCC_AHB1ENR;
 800057a:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <GPIOCClockEnable+0x24>)
 800057c:	607b      	str	r3, [r7, #4]
	*RCC_AHB1ENR_Ptr |= (uint32_t)0b1 << 2;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f043 0204 	orr.w	r2, r3, #4
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40023830 	.word	0x40023830

0800059c <SPI1Init>:

void SPI1Init(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	// Set Up SPI Init
	uint32_t *SPI1_CR1_Ptr = (uint32_t*)SPI1_CR1;
 80005a2:	4b26      	ldr	r3, [pc, #152]	@ (800063c <SPI1Init+0xa0>)
 80005a4:	607b      	str	r3, [r7, #4]

	// NOTE: Simplex is basically just full duplex but we don't use MISO

	// BIDIMODE off
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 15);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	601a      	str	r2, [r3, #0]
	// CRC Calculations off
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 13);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	601a      	str	r2, [r3, #0]
	// DFF to 16 bits
	*SPI1_CR1_Ptr |= (uint32_t)(0x1 << 11);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	601a      	str	r2, [r3, #0]
	// RXOnly off since we are transferring from master to slave
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 10);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	601a      	str	r2, [r3, #0]
	// SSM Disabled
	// MSB Selected
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 7);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
	// Baud Rate of 2 MBits/S
	*SPI1_CR1_Ptr &= ~(uint32_t)(0b111 << 3);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	601a      	str	r2, [r3, #0]
	*SPI1_CR1_Ptr |= (uint32_t)(0b010 << 3);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f043 0210 	orr.w	r2, r3, #16
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	601a      	str	r2, [r3, #0]
	// Put into Master Mode
	*SPI1_CR1_Ptr |= (uint32_t)(0x1 << 2);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f043 0204 	orr.w	r2, r3, #4
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	601a      	str	r2, [r3, #0]
	// Set CPOL and CPHA
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x3);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f023 0203 	bic.w	r2, r3, #3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	601a      	str	r2, [r3, #0]

	// SSOE enabled
	uint32_t *SPI1_CR2_Ptr = (uint32_t*)SPI1_CR2;
 8000612:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <SPI1Init+0xa4>)
 8000614:	603b      	str	r3, [r7, #0]
	*SPI1_CR2_Ptr |= 0x4;
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f043 0204 	orr.w	r2, r3, #4
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	601a      	str	r2, [r3, #0]

	// Finally, enable SPI
	*SPI1_CR1_Ptr |= (uint32_t)(0x1 << 6);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	601a      	str	r2, [r3, #0]
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40013000 	.word	0x40013000
 8000640:	40013004 	.word	0x40013004

08000644 <SPI1WriteToDR>:

void SPI1WriteToDR(uint16_t data)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	80fb      	strh	r3, [r7, #6]
	// Load data into SPI1 data register
	uint32_t *SPI1_DR_Ptr = (uint32_t*)SPI1_DR;
 800064e:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <SPI1WriteToDR+0x20>)
 8000650:	60fb      	str	r3, [r7, #12]
	*SPI1_DR_Ptr = (uint32_t)data;
 8000652:	88fa      	ldrh	r2, [r7, #6]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	4001300c 	.word	0x4001300c

08000668 <WaitForTransmissionEnd>:

void WaitForTransmissionEnd(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
	// Wait for transmission to end by checking BSY and TXE
	uint32_t *SPI1_SR_Ptr = (uint32_t*)SPI1_SR;
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <WaitForTransmissionEnd+0x34>)
 8000670:	607b      	str	r3, [r7, #4]
	while ((*SPI1_SR_Ptr & (0b1 << 7)) != 0);
 8000672:	bf00      	nop
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f9      	bne.n	8000674 <WaitForTransmissionEnd+0xc>
	while ((*SPI1_SR_Ptr & (0b1 << 1)) == 0);
 8000680:	bf00      	nop
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f9      	beq.n	8000682 <WaitForTransmissionEnd+0x1a>
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	40013008 	.word	0x40013008

080006a0 <EnableSlave>:

void EnableSlave(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
	// Enable Slave
	uint32_t *CS_BSRR_Ptr = (uint32_t*)CS_BSRR;
 80006a6:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <EnableSlave+0x24>)
 80006a8:	607b      	str	r3, [r7, #4]
	*CS_BSRR_Ptr |= (uint32_t)(0b1 << (CS_Pin + 16));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	601a      	str	r2, [r3, #0]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40020018 	.word	0x40020018

080006c8 <DisableSlave>:

void DisableSlave(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
	// Disable Slave
	uint32_t *CS_BSRR_Ptr = (uint32_t*)CS_BSRR;
 80006ce:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <DisableSlave+0x24>)
 80006d0:	607b      	str	r3, [r7, #4]
	*CS_BSRR_Ptr |= (uint32_t)(0b1 << CS_Pin);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f043 0210 	orr.w	r2, r3, #16
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40020018 	.word	0x40020018

080006f0 <SPI1_Transmit>:

void SPI1_Transmit(uint16_t data)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
	EnableSlave();
 80006fa:	f7ff ffd1 	bl	80006a0 <EnableSlave>
	SPI1WriteToDR(data);
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff9f 	bl	8000644 <SPI1WriteToDR>
	WaitForTransmissionEnd();
 8000706:	f7ff ffaf 	bl	8000668 <WaitForTransmissionEnd>
	DisableSlave();
 800070a:	f7ff ffdd 	bl	80006c8 <DisableSlave>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <SPI1PinsInit>:

void SPI1PinsInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
	// Initialize SPI GPIO Pins
	// First, PinA5 for SCLK
	uint32_t *GPIOA_MODER_Ptr = (uint32_t*)GPIOA_MODER;
 800071e:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <SPI1PinsInit+0x8c>)
 8000720:	60fb      	str	r3, [r7, #12]
	// Set to Alternate Function
	*GPIOA_MODER_Ptr &= ~(uint32_t)(0b11 << 10);
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER_Ptr |= (uint32_t)(0b10 << 10);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	601a      	str	r2, [r3, #0]
	// Next, PinA7 for MOSI
	*GPIOA_MODER_Ptr &= ~(uint32_t)(0b11 << 14);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER_Ptr |= (uint32_t)(0b10 << 14);
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	601a      	str	r2, [r3, #0]

	// Set a GPIO Pin for CS Pin
	uint32_t *CS_Port_Ptr = (uint32_t*)CS_Port;
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <SPI1PinsInit+0x8c>)
 8000754:	60bb      	str	r3, [r7, #8]
	// Set Pin 4 to output
	*CS_Port_Ptr &= ~(uint32_t)(0b11 << 2 * CS_Pin);
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	601a      	str	r2, [r3, #0]
	*CS_Port_Ptr |= (uint32_t)(0b01 << 2 * CS_Pin);
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	601a      	str	r2, [r3, #0]

	// Set up alternate function by selecting AF5 (According to datasheet)
	uint32_t *GPIOA_AFRL_Ptr = (uint32_t*)GPIOA_AFRL;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <SPI1PinsInit+0x90>)
 8000770:	607b      	str	r3, [r7, #4]
	*GPIOA_AFRL_Ptr |= (uint32_t)(0b0101 << 16);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f443 22a0 	orr.w	r2, r3, #327680	@ 0x50000
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL_Ptr |= (uint32_t)(0b0101 << 20);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL_Ptr |= (uint32_t)(0b0101 << 28);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f043 42a0 	orr.w	r2, r3, #1342177280	@ 0x50000000
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
	// Initialize to High
	DisableSlave();
 8000796:	f7ff ff97 	bl	80006c8 <DisableSlave>
}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40020000 	.word	0x40020000
 80007a8:	40020020 	.word	0x40020020

080007ac <max7219_write>:

void max7219_write(uint8_t addr, uint8_t data)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	460a      	mov	r2, r1
 80007b6:	71fb      	strb	r3, [r7, #7]
 80007b8:	4613      	mov	r3, r2
 80007ba:	71bb      	strb	r3, [r7, #6]
	uint16_t writeData = (addr << 8) | data;
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	b21b      	sxth	r3, r3
 80007c0:	021b      	lsls	r3, r3, #8
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	79bb      	ldrb	r3, [r7, #6]
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	81fb      	strh	r3, [r7, #14]
	SPI1_Transmit(writeData);
 80007ce:	89fb      	ldrh	r3, [r7, #14]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff8d 	bl	80006f0 <SPI1_Transmit>
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <matrixClear>:

void matrixClear(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
	for (int i = 1; i <= 8; i++)
 80007e4:	2301      	movs	r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	e008      	b.n	80007fc <matrixClear+0x1e>
	{
		max7219_write(i, 0x00);	// Clear Screen
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ffdb 	bl	80007ac <max7219_write>
	for (int i = 1; i <= 8; i++)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3301      	adds	r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b08      	cmp	r3, #8
 8000800:	ddf3      	ble.n	80007ea <matrixClear+0xc>
	}
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <matrixInit>:

void matrixInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	max7219_write(0x09, 0);		// No Decoding
 8000810:	2100      	movs	r1, #0
 8000812:	2009      	movs	r0, #9
 8000814:	f7ff ffca 	bl	80007ac <max7219_write>
	max7219_write(0x0A, 0x02);	// 5/32 Light Intensity
 8000818:	2102      	movs	r1, #2
 800081a:	200a      	movs	r0, #10
 800081c:	f7ff ffc6 	bl	80007ac <max7219_write>
	max7219_write(0x0B, 0x07);	// Scan all columns (Turn them all on)
 8000820:	2107      	movs	r1, #7
 8000822:	200b      	movs	r0, #11
 8000824:	f7ff ffc2 	bl	80007ac <max7219_write>
	max7219_write(0x0C, 0x01);	// Normal Operation (No shutdown mode)
 8000828:	2101      	movs	r1, #1
 800082a:	200c      	movs	r0, #12
 800082c:	f7ff ffbe 	bl	80007ac <max7219_write>
	max7219_write(0x0F, 0x00);	// No Display Test
 8000830:	2100      	movs	r1, #0
 8000832:	200f      	movs	r0, #15
 8000834:	f7ff ffba 	bl	80007ac <max7219_write>

	matrixClear();
 8000838:	f7ff ffd1 	bl	80007de <matrixClear>
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <intToHexPosition>:

uint8_t intToHexPosition(uint8_t val)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	switch (val)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	3b01      	subs	r3, #1
 800084e:	2b07      	cmp	r3, #7
 8000850:	d822      	bhi.n	8000898 <intToHexPosition+0x58>
 8000852:	a201      	add	r2, pc, #4	@ (adr r2, 8000858 <intToHexPosition+0x18>)
 8000854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000858:	08000879 	.word	0x08000879
 800085c:	0800087d 	.word	0x0800087d
 8000860:	08000881 	.word	0x08000881
 8000864:	08000885 	.word	0x08000885
 8000868:	08000889 	.word	0x08000889
 800086c:	0800088d 	.word	0x0800088d
 8000870:	08000891 	.word	0x08000891
 8000874:	08000895 	.word	0x08000895
	{
		case 1:
			return 0x01;
 8000878:	2301      	movs	r3, #1
 800087a:	e00e      	b.n	800089a <intToHexPosition+0x5a>
			break;
		case 2:
			return 0x02;
 800087c:	2302      	movs	r3, #2
 800087e:	e00c      	b.n	800089a <intToHexPosition+0x5a>
			break;
		case 3:
			return 0x04;
 8000880:	2304      	movs	r3, #4
 8000882:	e00a      	b.n	800089a <intToHexPosition+0x5a>
			break;
		case 4:
			return 0x08;
 8000884:	2308      	movs	r3, #8
 8000886:	e008      	b.n	800089a <intToHexPosition+0x5a>
			break;
		case 5:
			return 0x10;
 8000888:	2310      	movs	r3, #16
 800088a:	e006      	b.n	800089a <intToHexPosition+0x5a>
			break;
		case 6:
			return 0x20;
 800088c:	2320      	movs	r3, #32
 800088e:	e004      	b.n	800089a <intToHexPosition+0x5a>
			break;
		case 7:
			return 0x40;
 8000890:	2340      	movs	r3, #64	@ 0x40
 8000892:	e002      	b.n	800089a <intToHexPosition+0x5a>
			break;
		case 8:
			return 0x80;
 8000894:	2380      	movs	r3, #128	@ 0x80
 8000896:	e000      	b.n	800089a <intToHexPosition+0x5a>
			break;
		default:
			return -1;		// Should never get this, only enter values between 1 and 8
 8000898:	23ff      	movs	r3, #255	@ 0xff
	}
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop

080008a8 <positionToMatrixPos>:

void positionToMatrixPos(uint8_t x_pos[], uint8_t y_pos[], int numberOfCords, uint8_t outputArray[])
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < numberOfCords; i++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	e01d      	b.n	80008f8 <positionToMatrixPos+0x50>
	{
		uint8_t x = x_pos[i];
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	4413      	add	r3, r2
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	74fb      	strb	r3, [r7, #19]
		uint8_t y = y_pos[i];
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	68ba      	ldr	r2, [r7, #8]
 80008ca:	4413      	add	r3, r2
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	74bb      	strb	r3, [r7, #18]
		x = intToHexPosition(x);
 80008d0:	7cfb      	ldrb	r3, [r7, #19]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ffb4 	bl	8000840 <intToHexPosition>
 80008d8:	4603      	mov	r3, r0
 80008da:	74fb      	strb	r3, [r7, #19]
		outputArray[y] |= x;
 80008dc:	7cbb      	ldrb	r3, [r7, #18]
 80008de:	683a      	ldr	r2, [r7, #0]
 80008e0:	4413      	add	r3, r2
 80008e2:	7819      	ldrb	r1, [r3, #0]
 80008e4:	7cbb      	ldrb	r3, [r7, #18]
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	7cfa      	ldrb	r2, [r7, #19]
 80008ec:	430a      	orrs	r2, r1
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < numberOfCords; i++)
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	3301      	adds	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	dbdd      	blt.n	80008bc <positionToMatrixPos+0x14>
	}
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <LEDMatrixWrite>:

void LEDMatrixWrite(uint8_t outputArray[])
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b084      	sub	sp, #16
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
	uint16_t writePos;
	for (int i = 1; i <= 8; i++)
 8000912:	2301      	movs	r3, #1
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	e012      	b.n	800093e <LEDMatrixWrite+0x34>
	{
		writePos = (i << 8) | outputArray[i];
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	b21b      	sxth	r3, r3
 800091c:	021b      	lsls	r3, r3, #8
 800091e:	b21a      	sxth	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	440b      	add	r3, r1
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b21b      	sxth	r3, r3
 800092a:	4313      	orrs	r3, r2
 800092c:	b21b      	sxth	r3, r3
 800092e:	817b      	strh	r3, [r7, #10]
		SPI1_Transmit(writePos);
 8000930:	897b      	ldrh	r3, [r7, #10]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fedc 	bl	80006f0 <SPI1_Transmit>
	for (int i = 1; i <= 8; i++)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3301      	adds	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2b08      	cmp	r3, #8
 8000942:	dde9      	ble.n	8000918 <LEDMatrixWrite+0xe>
	}
}
 8000944:	bf00      	nop
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <LEDMatrixRowWrite>:

void LEDMatrixRowWrite(uint8_t outputArray[], uint8_t row)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b084      	sub	sp, #16
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	460b      	mov	r3, r1
 8000958:	70fb      	strb	r3, [r7, #3]
	uint16_t writePos;
	writePos = (row << 8) | outputArray[row];
 800095a:	78fb      	ldrb	r3, [r7, #3]
 800095c:	b21b      	sxth	r3, r3
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	b21a      	sxth	r2, r3
 8000962:	78fb      	ldrb	r3, [r7, #3]
 8000964:	6879      	ldr	r1, [r7, #4]
 8000966:	440b      	add	r3, r1
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b21b      	sxth	r3, r3
 800096c:	4313      	orrs	r3, r2
 800096e:	b21b      	sxth	r3, r3
 8000970:	81fb      	strh	r3, [r7, #14]
	SPI1_Transmit(writePos);
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff febb 	bl	80006f0 <SPI1_Transmit>
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <ResetButtonInit>:
		SPI1_Transmit(writeRow);
	}
}

void ResetButtonInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
	// Sets button as inputs
	uint32_t *GPIOC_MODER_Ptr = (uint32_t*)GPIOC_MODER;
 800098a:	4b17      	ldr	r3, [pc, #92]	@ (80009e8 <ResetButtonInit+0x64>)
 800098c:	617b      	str	r3, [r7, #20]
	// Reset Button PC13 (User button)
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (13 * 2));
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	601a      	str	r2, [r3, #0]

	// Falling Edge interrupt
	// SYSCLK Enabled
	uint32_t *RCC_APB2ENR_Ptr = (uint32_t*)RCC_APB2ENR;
 800099a:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <ResetButtonInit+0x68>)
 800099c:	613b      	str	r3, [r7, #16]
	*RCC_APB2ENR_Ptr |= (uint32_t)0b1 << 14;
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	601a      	str	r2, [r3, #0]

	// Configure EXTI13 for PC13
	uint32_t *SYSCFG_EXTICR4_Ptr = (uint32_t*)SYSCFG_EXTICR4;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <ResetButtonInit+0x6c>)
 80009ac:	60fb      	str	r3, [r7, #12]
	*SYSCFG_EXTICR4_Ptr |= (uint32_t)0b0010 << 4;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f043 0220 	orr.w	r2, r3, #32
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	601a      	str	r2, [r3, #0]

	// Enable falling trigger mode
	uint32_t *EXTI_FTSR_Ptr = (uint32_t*)EXTI_FTSR;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <ResetButtonInit+0x70>)
 80009bc:	60bb      	str	r3, [r7, #8]
	*EXTI_FTSR_Ptr |= (uint32_t)0b1 << 13;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	601a      	str	r2, [r3, #0]

	// Unmask interrupt
	uint32_t *EXTI_IMR_Ptr = (uint32_t*)EXTI_IMR;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <ResetButtonInit+0x74>)
 80009cc:	607b      	str	r3, [r7, #4]
	*EXTI_IMR_Ptr |= (uint32_t)0b1 << 13;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
}
 80009da:	bf00      	nop
 80009dc:	371c      	adds	r7, #28
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40020800 	.word	0x40020800
 80009ec:	40023844 	.word	0x40023844
 80009f0:	40013814 	.word	0x40013814
 80009f4:	40013c0c 	.word	0x40013c0c
 80009f8:	40013c00 	.word	0x40013c00

080009fc <MovementButtonsInit>:

void MovementButtonsInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	@ 0x24
 8000a00:	af00      	add	r7, sp, #0
	// Sets buttons as inputs
	uint32_t *GPIOC_MODER_Ptr = (uint32_t*)GPIOC_MODER;
 8000a02:	4b33      	ldr	r3, [pc, #204]	@ (8000ad0 <MovementButtonsInit+0xd4>)
 8000a04:	613b      	str	r3, [r7, #16]
	// Up Pin PC0
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (0 * 2));
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f023 0203 	bic.w	r2, r3, #3
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	601a      	str	r2, [r3, #0]
	// Right Pin PC1
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (1 * 2));
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f023 020c 	bic.w	r2, r3, #12
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	601a      	str	r2, [r3, #0]
	// Down Pin PC2
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (2 * 2));
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	601a      	str	r2, [r3, #0]
	// Left Pin PC3
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (3 * 2));
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	601a      	str	r2, [r3, #0]

	// Now set up falling edge interrupt for buttons
	// Enable SYSCFG Clock
	uint32_t *RCC_APB2ENR_Ptr = (uint32_t*)RCC_APB2ENR;
 8000a36:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <MovementButtonsInit+0xd8>)
 8000a38:	60fb      	str	r3, [r7, #12]
	*RCC_APB2ENR_Ptr |= (uint32_t)0b1 << 14;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	601a      	str	r2, [r3, #0]

	// Configure EXTI0 to EXTI3 for PC0-PC3
	uint32_t *SYSCFG_EXTICR1_Ptr = (uint32_t*)SYSCFG_EXTICR1;
 8000a46:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <MovementButtonsInit+0xdc>)
 8000a48:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 4; i++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
 8000a4e:	e00c      	b.n	8000a6a <MovementButtonsInit+0x6e>
	{
		*SYSCFG_EXTICR1_Ptr |= (uint32_t)0b0010 << (i * 4);
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	2102      	movs	r1, #2
 8000a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	3301      	adds	r3, #1
 8000a68:	61fb      	str	r3, [r7, #28]
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	ddef      	ble.n	8000a50 <MovementButtonsInit+0x54>
	}

	// Enable falling trigger
	uint32_t *EXTI_FTSR_Ptr = (uint32_t*)EXTI_FTSR;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <MovementButtonsInit+0xe0>)
 8000a72:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	e00b      	b.n	8000a92 <MovementButtonsInit+0x96>
	{
		*EXTI_FTSR_Ptr |= (uint32_t)0b1 << i;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	2101      	movs	r1, #1
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	431a      	orrs	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	ddf0      	ble.n	8000a7a <MovementButtonsInit+0x7e>
	}

	// Unmask the interrupt
	uint32_t *EXTI_IMR_Ptr = (uint32_t*)EXTI_IMR;
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MovementButtonsInit+0xe4>)
 8000a9a:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 4; i++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e00b      	b.n	8000aba <MovementButtonsInit+0xbe>
	{
		*EXTI_IMR_Ptr |= (uint32_t)0b1 << i;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	ddf0      	ble.n	8000aa2 <MovementButtonsInit+0xa6>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	bf00      	nop
 8000ac4:	3724      	adds	r7, #36	@ 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40023844 	.word	0x40023844
 8000ad8:	40013808 	.word	0x40013808
 8000adc:	40013c0c 	.word	0x40013c0c
 8000ae0:	40013c00 	.word	0x40013c00

08000ae4 <NVIC_EnableIRQ>:

void NVIC_EnableIRQ(uint32_t IRQn)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	if (IRQn <= 96)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b60      	cmp	r3, #96	@ 0x60
 8000af0:	d813      	bhi.n	8000b1a <NVIC_EnableIRQ+0x36>
	{
		uint32_t iserIndex = IRQn >> 5;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	095b      	lsrs	r3, r3, #5
 8000af6:	60fb      	str	r3, [r7, #12]
		uint32_t iserBit = IRQn & 0x1F;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 031f 	and.w	r3, r3, #31
 8000afe:	60bb      	str	r3, [r7, #8]

		NVIC->ISER[iserIndex] |= (0x1 << iserBit);
 8000b00:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <NVIC_EnableIRQ+0x44>)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b08:	2101      	movs	r1, #1
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b10:	4905      	ldr	r1, [pc, #20]	@ (8000b28 <NVIC_EnableIRQ+0x44>)
 8000b12:	431a      	orrs	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <EXTI0_IRQHandler+0x2c>)
 8000b34:	607b      	str	r3, [r7, #4]

	if (previous_direction != DOWN)
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <EXTI0_IRQHandler+0x30>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d002      	beq.n	8000b44 <EXTI0_IRQHandler+0x18>
	{
		snake_direction = UP;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <EXTI0_IRQHandler+0x34>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC0 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 0;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40013c14 	.word	0x40013c14
 8000b5c:	20000004 	.word	0x20000004
 8000b60:	20000000 	.word	0x20000000

08000b64 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <EXTI1_IRQHandler+0x2c>)
 8000b6c:	607b      	str	r3, [r7, #4]

	if (previous_direction != LEFT)
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <EXTI1_IRQHandler+0x30>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d002      	beq.n	8000b7c <EXTI1_IRQHandler+0x18>
	{
		snake_direction = RIGHT;
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <EXTI1_IRQHandler+0x34>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC1 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 1;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2202      	movs	r2, #2
 8000b80:	601a      	str	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40013c14 	.word	0x40013c14
 8000b94:	20000004 	.word	0x20000004
 8000b98:	20000000 	.word	0x20000000

08000b9c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <EXTI2_IRQHandler+0x2c>)
 8000ba4:	607b      	str	r3, [r7, #4]

	if (previous_direction != UP)
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <EXTI2_IRQHandler+0x30>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <EXTI2_IRQHandler+0x18>
	{
		snake_direction = DOWN;
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <EXTI2_IRQHandler+0x34>)
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC2 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 2;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	601a      	str	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40013c14 	.word	0x40013c14
 8000bcc:	20000004 	.word	0x20000004
 8000bd0:	20000000 	.word	0x20000000

08000bd4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <EXTI3_IRQHandler+0x2c>)
 8000bdc:	607b      	str	r3, [r7, #4]

	if (previous_direction != RIGHT)
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <EXTI3_IRQHandler+0x30>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d002      	beq.n	8000bec <EXTI3_IRQHandler+0x18>
	{
		snake_direction = LEFT;
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <EXTI3_IRQHandler+0x34>)
 8000be8:	2203      	movs	r2, #3
 8000bea:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC3 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 3;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2208      	movs	r2, #8
 8000bf0:	601a      	str	r2, [r3, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40013c14 	.word	0x40013c14
 8000c04:	20000004 	.word	0x20000004
 8000c08:	20000000 	.word	0x20000000

08000c0c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <EXTI15_10_IRQHandler+0x24>)
 8000c14:	607b      	str	r3, [r7, #4]

	reset = true;
 8000c16:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <EXTI15_10_IRQHandler+0x28>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]

	// Clear PinC13 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 13;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c22:	601a      	str	r2, [r3, #0]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	40013c14 	.word	0x40013c14
 8000c34:	20000084 	.word	0x20000084

08000c38 <DisplaySnake>:

void DisplaySnake(snake_Type *snake)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	positionToMatrixPos(snake->x_pos, snake->y_pos, snake->snakeSize, snake->outputArray);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	1d18      	adds	r0, r3, #4
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3384      	adds	r3, #132	@ 0x84
 8000c52:	f7ff fe29 	bl	80008a8 <positionToMatrixPos>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <SnakeInit>:

void SnakeInit(snake_Type *snake)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b085      	sub	sp, #20
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
	snake->snakeSize = 3;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2203      	movs	r2, #3
 8000c6a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 64; i++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	e00e      	b.n	8000c90 <SnakeInit+0x32>
	{
		snake->x_pos[i] = 0;
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
		snake->y_pos[i] = 0;
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4413      	add	r3, r2
 8000c84:	3344      	adds	r3, #68	@ 0x44
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 64; i++)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c94:	dded      	ble.n	8000c72 <SnakeInit+0x14>
	}
	snake->x_pos[0] = 3;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2203      	movs	r2, #3
 8000c9a:	711a      	strb	r2, [r3, #4]
	snake->x_pos[1] = 2;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	715a      	strb	r2, [r3, #5]
	snake->y_pos[0] = 2;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	snake->y_pos[1] = 2;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2202      	movs	r2, #2
 8000cae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	snake->x_pos[2] = 1;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	719a      	strb	r2, [r3, #6]
	snake->y_pos[2] = 2;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2202      	movs	r2, #2
 8000cbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	for (int i = 0; i < 9; i++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	e008      	b.n	8000cd8 <SnakeInit+0x7a>
	{
		snake->outputArray[i] = 0;
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4413      	add	r3, r2
 8000ccc:	3384      	adds	r3, #132	@ 0x84
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b08      	cmp	r3, #8
 8000cdc:	ddf3      	ble.n	8000cc6 <SnakeInit+0x68>
	}
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <playLoseScreen>:

void playLoseScreen(void)
{
 8000cec:	b5b0      	push	{r4, r5, r7, lr}
 8000cee:	b09e      	sub	sp, #120	@ 0x78
 8000cf0:	af00      	add	r7, sp, #0
	// Double X
	int doubleXSize = 16;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	677b      	str	r3, [r7, #116]	@ 0x74
	uint8_t doubleX_x_pos[] = {1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8};
 8000cf6:	4b7f      	ldr	r3, [pc, #508]	@ (8000ef4 <playLoseScreen+0x208>)
 8000cf8:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8000cfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t doubleX_y_pos[] = {1,8,2,7,3,6,4,5,4,5,3,6,2,7,1,8};
 8000d02:	4b7d      	ldr	r3, [pc, #500]	@ (8000ef8 <playLoseScreen+0x20c>)
 8000d04:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8000d08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t doubleXoutputArray[9] = {0};
 8000d0e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	721a      	strb	r2, [r3, #8]
	positionToMatrixPos(doubleX_x_pos, doubleX_y_pos, doubleXSize, doubleXoutputArray);
 8000d1a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d1e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000d22:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8000d26:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000d28:	f7ff fdbe 	bl	80008a8 <positionToMatrixPos>

	LEDMatrixWrite(doubleXoutputArray);
 8000d2c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fdea 	bl	800090a <LEDMatrixWrite>
	if (reset) return;
 8000d36:	4b71      	ldr	r3, [pc, #452]	@ (8000efc <playLoseScreen+0x210>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f040 80c0 	bne.w	8000ec2 <playLoseScreen+0x1d6>
	Delay(500);
 8000d42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d46:	f7ff fbb7 	bl	80004b8 <Delay>
	matrixClear();
 8000d4a:	f7ff fd48 	bl	80007de <matrixClear>
	if (reset) return;
 8000d4e:	4b6b      	ldr	r3, [pc, #428]	@ (8000efc <playLoseScreen+0x210>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f040 80b6 	bne.w	8000ec6 <playLoseScreen+0x1da>
	Delay(500);
 8000d5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d5e:	f7ff fbab 	bl	80004b8 <Delay>
	LEDMatrixWrite(doubleXoutputArray);
 8000d62:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fdcf 	bl	800090a <LEDMatrixWrite>
	if (reset) return;
 8000d6c:	4b63      	ldr	r3, [pc, #396]	@ (8000efc <playLoseScreen+0x210>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 80a9 	bne.w	8000eca <playLoseScreen+0x1de>
	Delay(500);
 8000d78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d7c:	f7ff fb9c 	bl	80004b8 <Delay>
	matrixClear();
 8000d80:	f7ff fd2d 	bl	80007de <matrixClear>
	if (reset) return;
 8000d84:	4b5d      	ldr	r3, [pc, #372]	@ (8000efc <playLoseScreen+0x210>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 809f 	bne.w	8000ece <playLoseScreen+0x1e2>
	Delay(500);
 8000d90:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d94:	f7ff fb90 	bl	80004b8 <Delay>
	if (reset) return;
 8000d98:	4b58      	ldr	r3, [pc, #352]	@ (8000efc <playLoseScreen+0x210>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8097 	bne.w	8000ed2 <playLoseScreen+0x1e6>

	// R? (Restart question)
	int RSize = 23;
 8000da4:	2317      	movs	r3, #23
 8000da6:	673b      	str	r3, [r7, #112]	@ 0x70
	uint8_t R_x_pos[] = {1,1,1,1,1,1,2,2,3,3,3,4,4,4,6,6,7,7,7,8,8,8,8};
 8000da8:	4b55      	ldr	r3, [pc, #340]	@ (8000f00 <playLoseScreen+0x214>)
 8000daa:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000dae:	461d      	mov	r5, r3
 8000db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000db8:	6020      	str	r0, [r4, #0]
 8000dba:	3404      	adds	r4, #4
 8000dbc:	8021      	strh	r1, [r4, #0]
 8000dbe:	3402      	adds	r4, #2
 8000dc0:	0c0b      	lsrs	r3, r1, #16
 8000dc2:	7023      	strb	r3, [r4, #0]
	uint8_t R_y_pos[] = {1,2,3,4,5,6,4,6,3,4,6,1,2,5,5,6,1,3,6,3,4,5,6};
 8000dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8000f04 <playLoseScreen+0x218>)
 8000dc6:	f107 0414 	add.w	r4, r7, #20
 8000dca:	461d      	mov	r5, r3
 8000dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dd4:	6020      	str	r0, [r4, #0]
 8000dd6:	3404      	adds	r4, #4
 8000dd8:	8021      	strh	r1, [r4, #0]
 8000dda:	3402      	adds	r4, #2
 8000ddc:	0c0b      	lsrs	r3, r1, #16
 8000dde:	7023      	strb	r3, [r4, #0]
	uint8_t RoutputArray[9] = {0};
 8000de0:	f107 0308 	add.w	r3, r7, #8
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	721a      	strb	r2, [r3, #8]
	positionToMatrixPos(R_x_pos, R_y_pos, RSize, RoutputArray);
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	f107 0114 	add.w	r1, r7, #20
 8000df4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000df8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000dfa:	f7ff fd55 	bl	80008a8 <positionToMatrixPos>

	while(1)
	{
		for (volatile int i = 1; i <= 8; i++)
 8000dfe:	2301      	movs	r3, #1
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	e01d      	b.n	8000e40 <playLoseScreen+0x154>
		{
			for (volatile int j = 1; j <= i; j++)
 8000e04:	2301      	movs	r3, #1
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	e00f      	b.n	8000e2a <playLoseScreen+0x13e>
			{
				LEDMatrixRowWrite(RoutputArray, j);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fd9a 	bl	800094e <LEDMatrixRowWrite>
				if (reset) return;
 8000e1a:	4b38      	ldr	r3, [pc, #224]	@ (8000efc <playLoseScreen+0x210>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d158      	bne.n	8000ed6 <playLoseScreen+0x1ea>
			for (volatile int j = 1; j <= i; j++)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	3301      	adds	r3, #1
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	ddeb      	ble.n	8000e0a <playLoseScreen+0x11e>
			}
			Delay(500);
 8000e32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e36:	f7ff fb3f 	bl	80004b8 <Delay>
		for (volatile int i = 1; i <= 8; i++)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	ddde      	ble.n	8000e04 <playLoseScreen+0x118>
		}
		matrixClear();
 8000e46:	f7ff fcca 	bl	80007de <matrixClear>
		if (reset) return;
 8000e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000efc <playLoseScreen+0x210>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d142      	bne.n	8000eda <playLoseScreen+0x1ee>
		Delay(500);
 8000e54:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e58:	f7ff fb2e 	bl	80004b8 <Delay>
		LEDMatrixWrite(RoutputArray);
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fd52 	bl	800090a <LEDMatrixWrite>
		if (reset) return;
 8000e66:	4b25      	ldr	r3, [pc, #148]	@ (8000efc <playLoseScreen+0x210>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d136      	bne.n	8000ede <playLoseScreen+0x1f2>
		Delay(500);
 8000e70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e74:	f7ff fb20 	bl	80004b8 <Delay>
		matrixClear();
 8000e78:	f7ff fcb1 	bl	80007de <matrixClear>
		if (reset) return;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <playLoseScreen+0x210>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d12d      	bne.n	8000ee2 <playLoseScreen+0x1f6>
		Delay(500);
 8000e86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e8a:	f7ff fb15 	bl	80004b8 <Delay>
		LEDMatrixWrite(RoutputArray);
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fd39 	bl	800090a <LEDMatrixWrite>
		if (reset) return;
 8000e98:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <playLoseScreen+0x210>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d121      	bne.n	8000ee6 <playLoseScreen+0x1fa>
		Delay(4000);
 8000ea2:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000ea6:	f7ff fb07 	bl	80004b8 <Delay>
		matrixClear();
 8000eaa:	f7ff fc98 	bl	80007de <matrixClear>
		if (reset) return;
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <playLoseScreen+0x210>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d118      	bne.n	8000eea <playLoseScreen+0x1fe>
		Delay(500);
 8000eb8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ebc:	f7ff fafc 	bl	80004b8 <Delay>
		for (volatile int i = 1; i <= 8; i++)
 8000ec0:	e79d      	b.n	8000dfe <playLoseScreen+0x112>
	if (reset) return;
 8000ec2:	bf00      	nop
 8000ec4:	e012      	b.n	8000eec <playLoseScreen+0x200>
	if (reset) return;
 8000ec6:	bf00      	nop
 8000ec8:	e010      	b.n	8000eec <playLoseScreen+0x200>
	if (reset) return;
 8000eca:	bf00      	nop
 8000ecc:	e00e      	b.n	8000eec <playLoseScreen+0x200>
	if (reset) return;
 8000ece:	bf00      	nop
 8000ed0:	e00c      	b.n	8000eec <playLoseScreen+0x200>
	if (reset) return;
 8000ed2:	bf00      	nop
 8000ed4:	e00a      	b.n	8000eec <playLoseScreen+0x200>
				if (reset) return;
 8000ed6:	bf00      	nop
 8000ed8:	e008      	b.n	8000eec <playLoseScreen+0x200>
		if (reset) return;
 8000eda:	bf00      	nop
 8000edc:	e006      	b.n	8000eec <playLoseScreen+0x200>
		if (reset) return;
 8000ede:	bf00      	nop
 8000ee0:	e004      	b.n	8000eec <playLoseScreen+0x200>
		if (reset) return;
 8000ee2:	bf00      	nop
 8000ee4:	e002      	b.n	8000eec <playLoseScreen+0x200>
		if (reset) return;
 8000ee6:	bf00      	nop
 8000ee8:	e000      	b.n	8000eec <playLoseScreen+0x200>
		if (reset) return;
 8000eea:	bf00      	nop
	}
}
 8000eec:	3778      	adds	r7, #120	@ 0x78
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	080024ac 	.word	0x080024ac
 8000ef8:	080024bc 	.word	0x080024bc
 8000efc:	20000084 	.word	0x20000084
 8000f00:	080024cc 	.word	0x080024cc
 8000f04:	080024e4 	.word	0x080024e4

08000f08 <SnakeDead>:

void SnakeDead(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
	alive = false;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <SnakeDead+0x14>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	20000008 	.word	0x20000008

08000f20 <SnakeCheckAfterMove>:

void SnakeCheckAfterMove(snake_Type *snake)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	// Check if out of bounds
	uint8_t snake_head_x = snake->x_pos[0];
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	791b      	ldrb	r3, [r3, #4]
 8000f2c:	72fb      	strb	r3, [r7, #11]
	uint8_t snake_head_y = snake->y_pos[0];
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000f34:	72bb      	strb	r3, [r7, #10]
	if (snake_head_x < 1 || snake_head_x > 8)
 8000f36:	7afb      	ldrb	r3, [r7, #11]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <SnakeCheckAfterMove+0x22>
 8000f3c:	7afb      	ldrb	r3, [r7, #11]
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d901      	bls.n	8000f46 <SnakeCheckAfterMove+0x26>
	{
		SnakeDead();
 8000f42:	f7ff ffe1 	bl	8000f08 <SnakeDead>
	}
	if (snake_head_y < 1 || snake_head_y > 8)
 8000f46:	7abb      	ldrb	r3, [r7, #10]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <SnakeCheckAfterMove+0x32>
 8000f4c:	7abb      	ldrb	r3, [r7, #10]
 8000f4e:	2b08      	cmp	r3, #8
 8000f50:	d901      	bls.n	8000f56 <SnakeCheckAfterMove+0x36>
	{
		SnakeDead();
 8000f52:	f7ff ffd9 	bl	8000f08 <SnakeDead>
	}
	// Check if head hits body
	for (int i = 1; i < snake->snakeSize; i++)
 8000f56:	2301      	movs	r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	e014      	b.n	8000f86 <SnakeCheckAfterMove+0x66>
	{
		if (snake_head_x == snake->x_pos[i])
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4413      	add	r3, r2
 8000f62:	3304      	adds	r3, #4
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	7afa      	ldrb	r2, [r7, #11]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d109      	bne.n	8000f80 <SnakeCheckAfterMove+0x60>
		{
			if (snake_head_y == snake->y_pos[i])
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4413      	add	r3, r2
 8000f72:	3344      	adds	r3, #68	@ 0x44
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	7aba      	ldrb	r2, [r7, #10]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d101      	bne.n	8000f80 <SnakeCheckAfterMove+0x60>
			{
				SnakeDead();
 8000f7c:	f7ff ffc4 	bl	8000f08 <SnakeDead>
	for (int i = 1; i < snake->snakeSize; i++)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3301      	adds	r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbe5      	blt.n	8000f5c <SnakeCheckAfterMove+0x3c>
			}
		}
	}
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <ClearOutputArray>:

void ClearOutputArray(snake_Type *snake)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 9; i++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e008      	b.n	8000fba <ClearOutputArray+0x20>
	{
		snake->outputArray[i] = 0;
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	3384      	adds	r3, #132	@ 0x84
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b08      	cmp	r3, #8
 8000fbe:	ddf3      	ble.n	8000fa8 <ClearOutputArray+0xe>
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <SnakeGrow>:

void SnakeGrow(snake_Type *snake)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
	snake->snakeSize += 1;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	601a      	str	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <AppleInit>:

void AppleInit(apple_Type *apple)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	apple->x_pos[0] = 3;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	701a      	strb	r2, [r3, #0]
	apple->y_pos[0] = 7;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	705a      	strb	r2, [r3, #1]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <DisplayApple>:

void DisplayApple(snake_Type *snake, apple_Type *apple)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	positionToMatrixPos(apple->x_pos, apple->y_pos, 1, snake->outputArray);
 8001016:	6838      	ldr	r0, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	1c59      	adds	r1, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3384      	adds	r3, #132	@ 0x84
 8001020:	2201      	movs	r2, #1
 8001022:	f7ff fc41 	bl	80008a8 <positionToMatrixPos>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <CheckIfAppleCollected>:

bool CheckIfAppleCollected(uint8_t snakeHeadx, uint8_t snakeHeady, apple_Type *apple)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	603a      	str	r2, [r7, #0]
 8001038:	71fb      	strb	r3, [r7, #7]
 800103a:	460b      	mov	r3, r1
 800103c:	71bb      	strb	r3, [r7, #6]
	if (snakeHeadx == apple->x_pos[0])
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	79fa      	ldrb	r2, [r7, #7]
 8001044:	429a      	cmp	r2, r3
 8001046:	d106      	bne.n	8001056 <CheckIfAppleCollected+0x28>
	{
		if (snakeHeady == apple->y_pos[0])
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	79ba      	ldrb	r2, [r7, #6]
 800104e:	429a      	cmp	r2, r3
 8001050:	d101      	bne.n	8001056 <CheckIfAppleCollected+0x28>
		{
			return true;
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <CheckIfAppleCollected+0x2a>
		}
	}
	return false;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <ReplaceApple>:

void ReplaceApple(snake_Type *snake, apple_Type *apple)
{
 8001064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001068:	b09d      	sub	sp, #116	@ 0x74
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
 8001070:	466b      	mov	r3, sp
 8001072:	461e      	mov	r6, r3
	uint8_t newCords[8][8] = {0};
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	2240      	movs	r2, #64	@ 0x40
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb14 	bl	80016aa <memset>

	for (int i = 0; i < snake->snakeSize; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001086:	e015      	b.n	80010b4 <ReplaceApple+0x50>
	{
		newCords[snake->y_pos[i] - 1][snake->x_pos[i] - 1] = 1;
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800108c:	4413      	add	r3, r2
 800108e:	3344      	adds	r3, #68	@ 0x44
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	1e5a      	subs	r2, r3, #1
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001098:	440b      	add	r3, r1
 800109a:	3304      	adds	r3, #4
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	3b01      	subs	r3, #1
 80010a0:	00d2      	lsls	r2, r2, #3
 80010a2:	3270      	adds	r2, #112	@ 0x70
 80010a4:	443a      	add	r2, r7
 80010a6:	4413      	add	r3, r2
 80010a8:	3b68      	subs	r3, #104	@ 0x68
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < snake->snakeSize; i++)
 80010ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010b0:	3301      	adds	r3, #1
 80010b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dbe4      	blt.n	8001088 <ReplaceApple+0x24>
	}

	uint8_t newSize = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
	for (int i = 0; i < 8; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80010c8:	e01a      	b.n	8001100 <ReplaceApple+0x9c>
	{
		for (int j = 0; j < 8; j++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80010ce:	e011      	b.n	80010f4 <ReplaceApple+0x90>
		{
			if (newCords[i][j] == 0)
 80010d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	3370      	adds	r3, #112	@ 0x70
 80010d6:	19da      	adds	r2, r3, r7
 80010d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010da:	4413      	add	r3, r2
 80010dc:	3b68      	subs	r3, #104	@ 0x68
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d104      	bne.n	80010ee <ReplaceApple+0x8a>
			{
				newSize++;
 80010e4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80010e8:	3301      	adds	r3, #1
 80010ea:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		for (int j = 0; j < 8; j++)
 80010ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010f0:	3301      	adds	r3, #1
 80010f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80010f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010f6:	2b07      	cmp	r3, #7
 80010f8:	ddea      	ble.n	80010d0 <ReplaceApple+0x6c>
	for (int i = 0; i < 8; i++)
 80010fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010fc:	3301      	adds	r3, #1
 80010fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001100:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001102:	2b07      	cmp	r3, #7
 8001104:	dde1      	ble.n	80010ca <ReplaceApple+0x66>
			}
		}
	}
	uint8_t newPossiblePos[newSize];
 8001106:	f897 106b 	ldrb.w	r1, [r7, #107]	@ 0x6b
 800110a:	460b      	mov	r3, r1
 800110c:	3b01      	subs	r3, #1
 800110e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001110:	b2cb      	uxtb	r3, r1
 8001112:	2200      	movs	r2, #0
 8001114:	4698      	mov	r8, r3
 8001116:	4691      	mov	r9, r2
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001124:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001128:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800112c:	b2cb      	uxtb	r3, r1
 800112e:	2200      	movs	r2, #0
 8001130:	461c      	mov	r4, r3
 8001132:	4615      	mov	r5, r2
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	00eb      	lsls	r3, r5, #3
 800113e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001142:	00e2      	lsls	r2, r4, #3
 8001144:	460b      	mov	r3, r1
 8001146:	3307      	adds	r3, #7
 8001148:	08db      	lsrs	r3, r3, #3
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	ebad 0d03 	sub.w	sp, sp, r3
 8001150:	466b      	mov	r3, sp
 8001152:	3300      	adds	r3, #0
 8001154:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint8_t newPossiblePosPtr = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t counter = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	for (int i = 0; i < 8; i++)
 8001162:	2300      	movs	r3, #0
 8001164:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001166:	e025      	b.n	80011b4 <ReplaceApple+0x150>
	{
		for (int j = 0; j < 8; j++)
 8001168:	2300      	movs	r3, #0
 800116a:	657b      	str	r3, [r7, #84]	@ 0x54
 800116c:	e01c      	b.n	80011a8 <ReplaceApple+0x144>
		{
			if (newCords[i][j] == 0)
 800116e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	3370      	adds	r3, #112	@ 0x70
 8001174:	19da      	adds	r2, r3, r7
 8001176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001178:	4413      	add	r3, r2
 800117a:	3b68      	subs	r3, #104	@ 0x68
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10a      	bne.n	8001198 <ReplaceApple+0x134>
			{
				newPossiblePos[newPossiblePosPtr] = counter;
 8001182:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001186:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001188:	f897 105e 	ldrb.w	r1, [r7, #94]	@ 0x5e
 800118c:	54d1      	strb	r1, [r2, r3]
				newPossiblePosPtr++;
 800118e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001192:	3301      	adds	r3, #1
 8001194:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
			counter++;
 8001198:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800119c:	3301      	adds	r3, #1
 800119e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
		for (int j = 0; j < 8; j++)
 80011a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011a4:	3301      	adds	r3, #1
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80011a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011aa:	2b07      	cmp	r3, #7
 80011ac:	dddf      	ble.n	800116e <ReplaceApple+0x10a>
	for (int i = 0; i < 8; i++)
 80011ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011b0:	3301      	adds	r3, #1
 80011b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80011b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011b6:	2b07      	cmp	r3, #7
 80011b8:	ddd6      	ble.n	8001168 <ReplaceApple+0x104>
		}
	}

	uint8_t randomPosIndex = rand() % newSize;
 80011ba:	f000 f933 	bl	8001424 <rand>
 80011be:	4602      	mov	r2, r0
 80011c0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80011c4:	fb92 f1f3 	sdiv	r1, r2, r3
 80011c8:	fb01 f303 	mul.w	r3, r1, r3
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	uint8_t randomPos = newPossiblePos[randomPosIndex];
 80011d2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80011d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

	apple->y_pos[0] = randomPos / 8 + 1;
 80011de:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80011e2:	08db      	lsrs	r3, r3, #3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	3301      	adds	r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	705a      	strb	r2, [r3, #1]
	apple->x_pos[0] = randomPos % 8 + 1;
 80011ee:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	46b5      	mov	sp, r6
}
 8001202:	bf00      	nop
 8001204:	3774      	adds	r7, #116	@ 0x74
 8001206:	46bd      	mov	sp, r7
 8001208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800120c <DisplayGame>:

void DisplayGame(snake_Type *snake, apple_Type *apple)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
	DisplaySnake(snake);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fd0e 	bl	8000c38 <DisplaySnake>
	DisplayApple(snake, apple);
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fef4 	bl	800100c <DisplayApple>
	LEDMatrixWrite(snake->outputArray);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3384      	adds	r3, #132	@ 0x84
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fb6e 	bl	800090a <LEDMatrixWrite>
	ClearOutputArray(snake);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff feb3 	bl	8000f9a <ClearOutputArray>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <ResetGame>:

void ResetGame(snake_Type *snake, apple_Type *apple)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	SnakeInit(snake);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fd09 	bl	8000c5e <SnakeInit>
	AppleInit(apple);
 800124c:	6838      	ldr	r0, [r7, #0]
 800124e:	f7ff fecd 	bl	8000fec <AppleInit>
	snake_direction = RIGHT;
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <ResetGame+0x3c>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
	previous_direction = RIGHT;
 8001258:	4b08      	ldr	r3, [pc, #32]	@ (800127c <ResetGame+0x40>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]
	alive = true;
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <ResetGame+0x44>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
	reset = false;
 8001264:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <ResetGame+0x48>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]

	RandomSeedLoader();
 800126a:	f7ff f90d 	bl	8000488 <RandomSeedLoader>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000000 	.word	0x20000000
 800127c:	20000004 	.word	0x20000004
 8001280:	20000008 	.word	0x20000008
 8001284:	20000084 	.word	0x20000084

08001288 <MoveSnake>:

void MoveSnake(snake_Type *snake, apple_Type *apple)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	uint8_t tempToPlacex = snake->x_pos[0];
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	791b      	ldrb	r3, [r3, #4]
 8001296:	75fb      	strb	r3, [r7, #23]
	uint8_t tempToPlacey = snake->y_pos[0];
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800129e:	75bb      	strb	r3, [r7, #22]
	uint8_t tempToStorex = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
	uint8_t tempToStorey = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73bb      	strb	r3, [r7, #14]
	switch(snake_direction)
 80012a8:	4b31      	ldr	r3, [pc, #196]	@ (8001370 <MoveSnake+0xe8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d81a      	bhi.n	80012e6 <MoveSnake+0x5e>
 80012b0:	a201      	add	r2, pc, #4	@ (adr r2, 80012b8 <MoveSnake+0x30>)
 80012b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b6:	bf00      	nop
 80012b8:	080012c9 	.word	0x080012c9
 80012bc:	080012d1 	.word	0x080012d1
 80012c0:	080012d9 	.word	0x080012d9
 80012c4:	080012e1 	.word	0x080012e1
	{
		case UP:
			tempToPlacey += 1;
 80012c8:	7dbb      	ldrb	r3, [r7, #22]
 80012ca:	3301      	adds	r3, #1
 80012cc:	75bb      	strb	r3, [r7, #22]
			break;
 80012ce:	e00a      	b.n	80012e6 <MoveSnake+0x5e>
		case RIGHT:
			tempToPlacex += 1;
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	3301      	adds	r3, #1
 80012d4:	75fb      	strb	r3, [r7, #23]
			break;
 80012d6:	e006      	b.n	80012e6 <MoveSnake+0x5e>
		case DOWN:
			tempToPlacey -= 1;
 80012d8:	7dbb      	ldrb	r3, [r7, #22]
 80012da:	3b01      	subs	r3, #1
 80012dc:	75bb      	strb	r3, [r7, #22]
			break;
 80012de:	e002      	b.n	80012e6 <MoveSnake+0x5e>
		case LEFT:
			tempToPlacex -= 1;
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	75fb      	strb	r3, [r7, #23]
	}

	bool apple_collected = CheckIfAppleCollected(tempToPlacex, tempToPlacey, apple);
 80012e6:	7db9      	ldrb	r1, [r7, #22]
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe9e 	bl	800102e <CheckIfAppleCollected>
 80012f2:	4603      	mov	r3, r0
 80012f4:	737b      	strb	r3, [r7, #13]
	if (apple_collected)
 80012f6:	7b7b      	ldrb	r3, [r7, #13]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <MoveSnake+0x7a>
	{
		SnakeGrow(snake);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fe66 	bl	8000fce <SnakeGrow>
	}

	for (int i = 0; i < snake->snakeSize; i++)
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	e01e      	b.n	8001346 <MoveSnake+0xbe>
	{
		tempToStorex = snake->x_pos[i];
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4413      	add	r3, r2
 800130e:	3304      	adds	r3, #4
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	73fb      	strb	r3, [r7, #15]
		tempToStorey = snake->y_pos[i];
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4413      	add	r3, r2
 800131a:	3344      	adds	r3, #68	@ 0x44
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	73bb      	strb	r3, [r7, #14]
		snake->x_pos[i] = tempToPlacex;
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4413      	add	r3, r2
 8001326:	3304      	adds	r3, #4
 8001328:	7dfa      	ldrb	r2, [r7, #23]
 800132a:	701a      	strb	r2, [r3, #0]
		snake->y_pos[i] = tempToPlacey;
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4413      	add	r3, r2
 8001332:	3344      	adds	r3, #68	@ 0x44
 8001334:	7dba      	ldrb	r2, [r7, #22]
 8001336:	701a      	strb	r2, [r3, #0]
		tempToPlacex = tempToStorex;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	75fb      	strb	r3, [r7, #23]
		tempToPlacey = tempToStorey;
 800133c:	7bbb      	ldrb	r3, [r7, #14]
 800133e:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < snake->snakeSize; i++)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	3301      	adds	r3, #1
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbdb      	blt.n	8001308 <MoveSnake+0x80>
	}
	previous_direction = snake_direction;
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <MoveSnake+0xe8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	@ (8001374 <MoveSnake+0xec>)
 8001356:	6013      	str	r3, [r2, #0]

	if (apple_collected)
 8001358:	7b7b      	ldrb	r3, [r7, #13]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <MoveSnake+0xde>
	{
		ReplaceApple(snake, apple);
 800135e:	6839      	ldr	r1, [r7, #0]
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff fe7f 	bl	8001064 <ReplaceApple>
	}
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000000 	.word	0x20000000
 8001374:	20000004 	.word	0x20000004

08001378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800137a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800137c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001380:	480b      	ldr	r0, [pc, #44]	@ (80013b0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001382:	490c      	ldr	r1, [pc, #48]	@ (80013b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001384:	4a0c      	ldr	r2, [pc, #48]	@ (80013b8 <LoopForever+0xe>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a09      	ldr	r2, [pc, #36]	@ (80013bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001398:	4c09      	ldr	r4, [pc, #36]	@ (80013c0 <LoopForever+0x16>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

  bl main
 80013a6:	f7fe ff83 	bl	80002b0 <main>

080013aa <LoopForever>:

LoopForever:
  b LoopForever
 80013aa:	e7fe      	b.n	80013aa <LoopForever>
  ldr   r0, =_estack
 80013ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013b8:	080025ec 	.word	0x080025ec
  ldr r2, =_sbss
 80013bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013c0:	200001d8 	.word	0x200001d8

080013c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC_IRQHandler>
	...

080013c8 <srand>:
 80013c8:	b538      	push	{r3, r4, r5, lr}
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <srand+0x44>)
 80013cc:	681d      	ldr	r5, [r3, #0]
 80013ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80013d0:	4604      	mov	r4, r0
 80013d2:	b9b3      	cbnz	r3, 8001402 <srand+0x3a>
 80013d4:	2018      	movs	r0, #24
 80013d6:	f000 fa51 	bl	800187c <malloc>
 80013da:	4602      	mov	r2, r0
 80013dc:	6328      	str	r0, [r5, #48]	@ 0x30
 80013de:	b920      	cbnz	r0, 80013ea <srand+0x22>
 80013e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <srand+0x48>)
 80013e2:	480c      	ldr	r0, [pc, #48]	@ (8001414 <srand+0x4c>)
 80013e4:	2146      	movs	r1, #70	@ 0x46
 80013e6:	f000 f9e1 	bl	80017ac <__assert_func>
 80013ea:	490b      	ldr	r1, [pc, #44]	@ (8001418 <srand+0x50>)
 80013ec:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <srand+0x54>)
 80013ee:	e9c0 1300 	strd	r1, r3, [r0]
 80013f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <srand+0x58>)
 80013f4:	6083      	str	r3, [r0, #8]
 80013f6:	230b      	movs	r3, #11
 80013f8:	8183      	strh	r3, [r0, #12]
 80013fa:	2100      	movs	r1, #0
 80013fc:	2001      	movs	r0, #1
 80013fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001402:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001404:	2200      	movs	r2, #0
 8001406:	611c      	str	r4, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]
 800140a:	bd38      	pop	{r3, r4, r5, pc}
 800140c:	20000018 	.word	0x20000018
 8001410:	080024fb 	.word	0x080024fb
 8001414:	08002512 	.word	0x08002512
 8001418:	abcd330e 	.word	0xabcd330e
 800141c:	e66d1234 	.word	0xe66d1234
 8001420:	0005deec 	.word	0x0005deec

08001424 <rand>:
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <rand+0x5c>)
 8001426:	b510      	push	{r4, lr}
 8001428:	681c      	ldr	r4, [r3, #0]
 800142a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800142c:	b9b3      	cbnz	r3, 800145c <rand+0x38>
 800142e:	2018      	movs	r0, #24
 8001430:	f000 fa24 	bl	800187c <malloc>
 8001434:	4602      	mov	r2, r0
 8001436:	6320      	str	r0, [r4, #48]	@ 0x30
 8001438:	b920      	cbnz	r0, 8001444 <rand+0x20>
 800143a:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <rand+0x60>)
 800143c:	4812      	ldr	r0, [pc, #72]	@ (8001488 <rand+0x64>)
 800143e:	2152      	movs	r1, #82	@ 0x52
 8001440:	f000 f9b4 	bl	80017ac <__assert_func>
 8001444:	4911      	ldr	r1, [pc, #68]	@ (800148c <rand+0x68>)
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <rand+0x6c>)
 8001448:	e9c0 1300 	strd	r1, r3, [r0]
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <rand+0x70>)
 800144e:	6083      	str	r3, [r0, #8]
 8001450:	230b      	movs	r3, #11
 8001452:	8183      	strh	r3, [r0, #12]
 8001454:	2100      	movs	r1, #0
 8001456:	2001      	movs	r0, #1
 8001458:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800145c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800145e:	480e      	ldr	r0, [pc, #56]	@ (8001498 <rand+0x74>)
 8001460:	690b      	ldr	r3, [r1, #16]
 8001462:	694c      	ldr	r4, [r1, #20]
 8001464:	4a0d      	ldr	r2, [pc, #52]	@ (800149c <rand+0x78>)
 8001466:	4358      	muls	r0, r3
 8001468:	fb02 0004 	mla	r0, r2, r4, r0
 800146c:	fba3 3202 	umull	r3, r2, r3, r2
 8001470:	3301      	adds	r3, #1
 8001472:	eb40 0002 	adc.w	r0, r0, r2
 8001476:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800147a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800147e:	bd10      	pop	{r4, pc}
 8001480:	20000018 	.word	0x20000018
 8001484:	080024fb 	.word	0x080024fb
 8001488:	08002512 	.word	0x08002512
 800148c:	abcd330e 	.word	0xabcd330e
 8001490:	e66d1234 	.word	0xe66d1234
 8001494:	0005deec 	.word	0x0005deec
 8001498:	5851f42d 	.word	0x5851f42d
 800149c:	4c957f2d 	.word	0x4c957f2d

080014a0 <std>:
 80014a0:	2300      	movs	r3, #0
 80014a2:	b510      	push	{r4, lr}
 80014a4:	4604      	mov	r4, r0
 80014a6:	e9c0 3300 	strd	r3, r3, [r0]
 80014aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80014ae:	6083      	str	r3, [r0, #8]
 80014b0:	8181      	strh	r1, [r0, #12]
 80014b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80014b4:	81c2      	strh	r2, [r0, #14]
 80014b6:	6183      	str	r3, [r0, #24]
 80014b8:	4619      	mov	r1, r3
 80014ba:	2208      	movs	r2, #8
 80014bc:	305c      	adds	r0, #92	@ 0x5c
 80014be:	f000 f8f4 	bl	80016aa <memset>
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <std+0x58>)
 80014c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <std+0x5c>)
 80014c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80014ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <std+0x60>)
 80014cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80014ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <std+0x64>)
 80014d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80014d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <std+0x68>)
 80014d4:	6224      	str	r4, [r4, #32]
 80014d6:	429c      	cmp	r4, r3
 80014d8:	d006      	beq.n	80014e8 <std+0x48>
 80014da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80014de:	4294      	cmp	r4, r2
 80014e0:	d002      	beq.n	80014e8 <std+0x48>
 80014e2:	33d0      	adds	r3, #208	@ 0xd0
 80014e4:	429c      	cmp	r4, r3
 80014e6:	d105      	bne.n	80014f4 <std+0x54>
 80014e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80014ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014f0:	f000 b958 	b.w	80017a4 <__retarget_lock_init_recursive>
 80014f4:	bd10      	pop	{r4, pc}
 80014f6:	bf00      	nop
 80014f8:	08001625 	.word	0x08001625
 80014fc:	08001647 	.word	0x08001647
 8001500:	0800167f 	.word	0x0800167f
 8001504:	080016a3 	.word	0x080016a3
 8001508:	20000088 	.word	0x20000088

0800150c <stdio_exit_handler>:
 800150c:	4a02      	ldr	r2, [pc, #8]	@ (8001518 <stdio_exit_handler+0xc>)
 800150e:	4903      	ldr	r1, [pc, #12]	@ (800151c <stdio_exit_handler+0x10>)
 8001510:	4803      	ldr	r0, [pc, #12]	@ (8001520 <stdio_exit_handler+0x14>)
 8001512:	f000 b869 	b.w	80015e8 <_fwalk_sglue>
 8001516:	bf00      	nop
 8001518:	2000000c 	.word	0x2000000c
 800151c:	08001af1 	.word	0x08001af1
 8001520:	2000001c 	.word	0x2000001c

08001524 <cleanup_stdio>:
 8001524:	6841      	ldr	r1, [r0, #4]
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <cleanup_stdio+0x34>)
 8001528:	4299      	cmp	r1, r3
 800152a:	b510      	push	{r4, lr}
 800152c:	4604      	mov	r4, r0
 800152e:	d001      	beq.n	8001534 <cleanup_stdio+0x10>
 8001530:	f000 fade 	bl	8001af0 <_fflush_r>
 8001534:	68a1      	ldr	r1, [r4, #8]
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <cleanup_stdio+0x38>)
 8001538:	4299      	cmp	r1, r3
 800153a:	d002      	beq.n	8001542 <cleanup_stdio+0x1e>
 800153c:	4620      	mov	r0, r4
 800153e:	f000 fad7 	bl	8001af0 <_fflush_r>
 8001542:	68e1      	ldr	r1, [r4, #12]
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <cleanup_stdio+0x3c>)
 8001546:	4299      	cmp	r1, r3
 8001548:	d004      	beq.n	8001554 <cleanup_stdio+0x30>
 800154a:	4620      	mov	r0, r4
 800154c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001550:	f000 bace 	b.w	8001af0 <_fflush_r>
 8001554:	bd10      	pop	{r4, pc}
 8001556:	bf00      	nop
 8001558:	20000088 	.word	0x20000088
 800155c:	200000f0 	.word	0x200000f0
 8001560:	20000158 	.word	0x20000158

08001564 <global_stdio_init.part.0>:
 8001564:	b510      	push	{r4, lr}
 8001566:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <global_stdio_init.part.0+0x30>)
 8001568:	4c0b      	ldr	r4, [pc, #44]	@ (8001598 <global_stdio_init.part.0+0x34>)
 800156a:	4a0c      	ldr	r2, [pc, #48]	@ (800159c <global_stdio_init.part.0+0x38>)
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	4620      	mov	r0, r4
 8001570:	2200      	movs	r2, #0
 8001572:	2104      	movs	r1, #4
 8001574:	f7ff ff94 	bl	80014a0 <std>
 8001578:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800157c:	2201      	movs	r2, #1
 800157e:	2109      	movs	r1, #9
 8001580:	f7ff ff8e 	bl	80014a0 <std>
 8001584:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001588:	2202      	movs	r2, #2
 800158a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800158e:	2112      	movs	r1, #18
 8001590:	f7ff bf86 	b.w	80014a0 <std>
 8001594:	200001c0 	.word	0x200001c0
 8001598:	20000088 	.word	0x20000088
 800159c:	0800150d 	.word	0x0800150d

080015a0 <__sfp_lock_acquire>:
 80015a0:	4801      	ldr	r0, [pc, #4]	@ (80015a8 <__sfp_lock_acquire+0x8>)
 80015a2:	f000 b900 	b.w	80017a6 <__retarget_lock_acquire_recursive>
 80015a6:	bf00      	nop
 80015a8:	200001c9 	.word	0x200001c9

080015ac <__sfp_lock_release>:
 80015ac:	4801      	ldr	r0, [pc, #4]	@ (80015b4 <__sfp_lock_release+0x8>)
 80015ae:	f000 b8fb 	b.w	80017a8 <__retarget_lock_release_recursive>
 80015b2:	bf00      	nop
 80015b4:	200001c9 	.word	0x200001c9

080015b8 <__sinit>:
 80015b8:	b510      	push	{r4, lr}
 80015ba:	4604      	mov	r4, r0
 80015bc:	f7ff fff0 	bl	80015a0 <__sfp_lock_acquire>
 80015c0:	6a23      	ldr	r3, [r4, #32]
 80015c2:	b11b      	cbz	r3, 80015cc <__sinit+0x14>
 80015c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015c8:	f7ff bff0 	b.w	80015ac <__sfp_lock_release>
 80015cc:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <__sinit+0x28>)
 80015ce:	6223      	str	r3, [r4, #32]
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <__sinit+0x2c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f5      	bne.n	80015c4 <__sinit+0xc>
 80015d8:	f7ff ffc4 	bl	8001564 <global_stdio_init.part.0>
 80015dc:	e7f2      	b.n	80015c4 <__sinit+0xc>
 80015de:	bf00      	nop
 80015e0:	08001525 	.word	0x08001525
 80015e4:	200001c0 	.word	0x200001c0

080015e8 <_fwalk_sglue>:
 80015e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015ec:	4607      	mov	r7, r0
 80015ee:	4688      	mov	r8, r1
 80015f0:	4614      	mov	r4, r2
 80015f2:	2600      	movs	r6, #0
 80015f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80015f8:	f1b9 0901 	subs.w	r9, r9, #1
 80015fc:	d505      	bpl.n	800160a <_fwalk_sglue+0x22>
 80015fe:	6824      	ldr	r4, [r4, #0]
 8001600:	2c00      	cmp	r4, #0
 8001602:	d1f7      	bne.n	80015f4 <_fwalk_sglue+0xc>
 8001604:	4630      	mov	r0, r6
 8001606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800160a:	89ab      	ldrh	r3, [r5, #12]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d907      	bls.n	8001620 <_fwalk_sglue+0x38>
 8001610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001614:	3301      	adds	r3, #1
 8001616:	d003      	beq.n	8001620 <_fwalk_sglue+0x38>
 8001618:	4629      	mov	r1, r5
 800161a:	4638      	mov	r0, r7
 800161c:	47c0      	blx	r8
 800161e:	4306      	orrs	r6, r0
 8001620:	3568      	adds	r5, #104	@ 0x68
 8001622:	e7e9      	b.n	80015f8 <_fwalk_sglue+0x10>

08001624 <__sread>:
 8001624:	b510      	push	{r4, lr}
 8001626:	460c      	mov	r4, r1
 8001628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800162c:	f000 f896 	bl	800175c <_read_r>
 8001630:	2800      	cmp	r0, #0
 8001632:	bfab      	itete	ge
 8001634:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001636:	89a3      	ldrhlt	r3, [r4, #12]
 8001638:	181b      	addge	r3, r3, r0
 800163a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800163e:	bfac      	ite	ge
 8001640:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001642:	81a3      	strhlt	r3, [r4, #12]
 8001644:	bd10      	pop	{r4, pc}

08001646 <__swrite>:
 8001646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800164a:	461f      	mov	r7, r3
 800164c:	898b      	ldrh	r3, [r1, #12]
 800164e:	05db      	lsls	r3, r3, #23
 8001650:	4605      	mov	r5, r0
 8001652:	460c      	mov	r4, r1
 8001654:	4616      	mov	r6, r2
 8001656:	d505      	bpl.n	8001664 <__swrite+0x1e>
 8001658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800165c:	2302      	movs	r3, #2
 800165e:	2200      	movs	r2, #0
 8001660:	f000 f86a 	bl	8001738 <_lseek_r>
 8001664:	89a3      	ldrh	r3, [r4, #12]
 8001666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800166a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800166e:	81a3      	strh	r3, [r4, #12]
 8001670:	4632      	mov	r2, r6
 8001672:	463b      	mov	r3, r7
 8001674:	4628      	mov	r0, r5
 8001676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800167a:	f000 b881 	b.w	8001780 <_write_r>

0800167e <__sseek>:
 800167e:	b510      	push	{r4, lr}
 8001680:	460c      	mov	r4, r1
 8001682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001686:	f000 f857 	bl	8001738 <_lseek_r>
 800168a:	1c43      	adds	r3, r0, #1
 800168c:	89a3      	ldrh	r3, [r4, #12]
 800168e:	bf15      	itete	ne
 8001690:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001692:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001696:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800169a:	81a3      	strheq	r3, [r4, #12]
 800169c:	bf18      	it	ne
 800169e:	81a3      	strhne	r3, [r4, #12]
 80016a0:	bd10      	pop	{r4, pc}

080016a2 <__sclose>:
 80016a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016a6:	f000 b825 	b.w	80016f4 <_close_r>

080016aa <memset>:
 80016aa:	4402      	add	r2, r0
 80016ac:	4603      	mov	r3, r0
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d100      	bne.n	80016b4 <memset+0xa>
 80016b2:	4770      	bx	lr
 80016b4:	f803 1b01 	strb.w	r1, [r3], #1
 80016b8:	e7f9      	b.n	80016ae <memset+0x4>
	...

080016bc <time>:
 80016bc:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <time+0x34>)
 80016c0:	f04f 36ff 	mov.w	r6, #4294967295
 80016c4:	f04f 37ff 	mov.w	r7, #4294967295
 80016c8:	4669      	mov	r1, sp
 80016ca:	4604      	mov	r4, r0
 80016cc:	2200      	movs	r2, #0
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	e9cd 6700 	strd	r6, r7, [sp]
 80016d4:	f000 f81e 	bl	8001714 <_gettimeofday_r>
 80016d8:	2800      	cmp	r0, #0
 80016da:	bfb8      	it	lt
 80016dc:	e9cd 6700 	strdlt	r6, r7, [sp]
 80016e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80016e4:	b10c      	cbz	r4, 80016ea <time+0x2e>
 80016e6:	e9c4 0100 	strd	r0, r1, [r4]
 80016ea:	b004      	add	sp, #16
 80016ec:	bdd0      	pop	{r4, r6, r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000018 	.word	0x20000018

080016f4 <_close_r>:
 80016f4:	b538      	push	{r3, r4, r5, lr}
 80016f6:	4d06      	ldr	r5, [pc, #24]	@ (8001710 <_close_r+0x1c>)
 80016f8:	2300      	movs	r3, #0
 80016fa:	4604      	mov	r4, r0
 80016fc:	4608      	mov	r0, r1
 80016fe:	602b      	str	r3, [r5, #0]
 8001700:	f000 fe70 	bl	80023e4 <_close>
 8001704:	1c43      	adds	r3, r0, #1
 8001706:	d102      	bne.n	800170e <_close_r+0x1a>
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	b103      	cbz	r3, 800170e <_close_r+0x1a>
 800170c:	6023      	str	r3, [r4, #0]
 800170e:	bd38      	pop	{r3, r4, r5, pc}
 8001710:	200001c4 	.word	0x200001c4

08001714 <_gettimeofday_r>:
 8001714:	b538      	push	{r3, r4, r5, lr}
 8001716:	4d07      	ldr	r5, [pc, #28]	@ (8001734 <_gettimeofday_r+0x20>)
 8001718:	2300      	movs	r3, #0
 800171a:	4604      	mov	r4, r0
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	602b      	str	r3, [r5, #0]
 8001722:	f000 fe77 	bl	8002414 <_gettimeofday>
 8001726:	1c43      	adds	r3, r0, #1
 8001728:	d102      	bne.n	8001730 <_gettimeofday_r+0x1c>
 800172a:	682b      	ldr	r3, [r5, #0]
 800172c:	b103      	cbz	r3, 8001730 <_gettimeofday_r+0x1c>
 800172e:	6023      	str	r3, [r4, #0]
 8001730:	bd38      	pop	{r3, r4, r5, pc}
 8001732:	bf00      	nop
 8001734:	200001c4 	.word	0x200001c4

08001738 <_lseek_r>:
 8001738:	b538      	push	{r3, r4, r5, lr}
 800173a:	4d07      	ldr	r5, [pc, #28]	@ (8001758 <_lseek_r+0x20>)
 800173c:	4604      	mov	r4, r0
 800173e:	4608      	mov	r0, r1
 8001740:	4611      	mov	r1, r2
 8001742:	2200      	movs	r2, #0
 8001744:	602a      	str	r2, [r5, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	f000 fe7c 	bl	8002444 <_lseek>
 800174c:	1c43      	adds	r3, r0, #1
 800174e:	d102      	bne.n	8001756 <_lseek_r+0x1e>
 8001750:	682b      	ldr	r3, [r5, #0]
 8001752:	b103      	cbz	r3, 8001756 <_lseek_r+0x1e>
 8001754:	6023      	str	r3, [r4, #0]
 8001756:	bd38      	pop	{r3, r4, r5, pc}
 8001758:	200001c4 	.word	0x200001c4

0800175c <_read_r>:
 800175c:	b538      	push	{r3, r4, r5, lr}
 800175e:	4d07      	ldr	r5, [pc, #28]	@ (800177c <_read_r+0x20>)
 8001760:	4604      	mov	r4, r0
 8001762:	4608      	mov	r0, r1
 8001764:	4611      	mov	r1, r2
 8001766:	2200      	movs	r2, #0
 8001768:	602a      	str	r2, [r5, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	f000 fe72 	bl	8002454 <_read>
 8001770:	1c43      	adds	r3, r0, #1
 8001772:	d102      	bne.n	800177a <_read_r+0x1e>
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	b103      	cbz	r3, 800177a <_read_r+0x1e>
 8001778:	6023      	str	r3, [r4, #0]
 800177a:	bd38      	pop	{r3, r4, r5, pc}
 800177c:	200001c4 	.word	0x200001c4

08001780 <_write_r>:
 8001780:	b538      	push	{r3, r4, r5, lr}
 8001782:	4d07      	ldr	r5, [pc, #28]	@ (80017a0 <_write_r+0x20>)
 8001784:	4604      	mov	r4, r0
 8001786:	4608      	mov	r0, r1
 8001788:	4611      	mov	r1, r2
 800178a:	2200      	movs	r2, #0
 800178c:	602a      	str	r2, [r5, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	f000 fe76 	bl	8002480 <_write>
 8001794:	1c43      	adds	r3, r0, #1
 8001796:	d102      	bne.n	800179e <_write_r+0x1e>
 8001798:	682b      	ldr	r3, [r5, #0]
 800179a:	b103      	cbz	r3, 800179e <_write_r+0x1e>
 800179c:	6023      	str	r3, [r4, #0]
 800179e:	bd38      	pop	{r3, r4, r5, pc}
 80017a0:	200001c4 	.word	0x200001c4

080017a4 <__retarget_lock_init_recursive>:
 80017a4:	4770      	bx	lr

080017a6 <__retarget_lock_acquire_recursive>:
 80017a6:	4770      	bx	lr

080017a8 <__retarget_lock_release_recursive>:
 80017a8:	4770      	bx	lr
	...

080017ac <__assert_func>:
 80017ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80017ae:	4614      	mov	r4, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <__assert_func+0x2c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4605      	mov	r5, r0
 80017b8:	68d8      	ldr	r0, [r3, #12]
 80017ba:	b14c      	cbz	r4, 80017d0 <__assert_func+0x24>
 80017bc:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <__assert_func+0x30>)
 80017be:	9100      	str	r1, [sp, #0]
 80017c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80017c4:	4906      	ldr	r1, [pc, #24]	@ (80017e0 <__assert_func+0x34>)
 80017c6:	462b      	mov	r3, r5
 80017c8:	f000 f9ba 	bl	8001b40 <fiprintf>
 80017cc:	f000 f9da 	bl	8001b84 <abort>
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <__assert_func+0x38>)
 80017d2:	461c      	mov	r4, r3
 80017d4:	e7f3      	b.n	80017be <__assert_func+0x12>
 80017d6:	bf00      	nop
 80017d8:	20000018 	.word	0x20000018
 80017dc:	0800256a 	.word	0x0800256a
 80017e0:	08002577 	.word	0x08002577
 80017e4:	080025a5 	.word	0x080025a5

080017e8 <_free_r>:
 80017e8:	b538      	push	{r3, r4, r5, lr}
 80017ea:	4605      	mov	r5, r0
 80017ec:	2900      	cmp	r1, #0
 80017ee:	d041      	beq.n	8001874 <_free_r+0x8c>
 80017f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017f4:	1f0c      	subs	r4, r1, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bfb8      	it	lt
 80017fa:	18e4      	addlt	r4, r4, r3
 80017fc:	f000 f8e8 	bl	80019d0 <__malloc_lock>
 8001800:	4a1d      	ldr	r2, [pc, #116]	@ (8001878 <_free_r+0x90>)
 8001802:	6813      	ldr	r3, [r2, #0]
 8001804:	b933      	cbnz	r3, 8001814 <_free_r+0x2c>
 8001806:	6063      	str	r3, [r4, #4]
 8001808:	6014      	str	r4, [r2, #0]
 800180a:	4628      	mov	r0, r5
 800180c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001810:	f000 b8e4 	b.w	80019dc <__malloc_unlock>
 8001814:	42a3      	cmp	r3, r4
 8001816:	d908      	bls.n	800182a <_free_r+0x42>
 8001818:	6820      	ldr	r0, [r4, #0]
 800181a:	1821      	adds	r1, r4, r0
 800181c:	428b      	cmp	r3, r1
 800181e:	bf01      	itttt	eq
 8001820:	6819      	ldreq	r1, [r3, #0]
 8001822:	685b      	ldreq	r3, [r3, #4]
 8001824:	1809      	addeq	r1, r1, r0
 8001826:	6021      	streq	r1, [r4, #0]
 8001828:	e7ed      	b.n	8001806 <_free_r+0x1e>
 800182a:	461a      	mov	r2, r3
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	b10b      	cbz	r3, 8001834 <_free_r+0x4c>
 8001830:	42a3      	cmp	r3, r4
 8001832:	d9fa      	bls.n	800182a <_free_r+0x42>
 8001834:	6811      	ldr	r1, [r2, #0]
 8001836:	1850      	adds	r0, r2, r1
 8001838:	42a0      	cmp	r0, r4
 800183a:	d10b      	bne.n	8001854 <_free_r+0x6c>
 800183c:	6820      	ldr	r0, [r4, #0]
 800183e:	4401      	add	r1, r0
 8001840:	1850      	adds	r0, r2, r1
 8001842:	4283      	cmp	r3, r0
 8001844:	6011      	str	r1, [r2, #0]
 8001846:	d1e0      	bne.n	800180a <_free_r+0x22>
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	6053      	str	r3, [r2, #4]
 800184e:	4408      	add	r0, r1
 8001850:	6010      	str	r0, [r2, #0]
 8001852:	e7da      	b.n	800180a <_free_r+0x22>
 8001854:	d902      	bls.n	800185c <_free_r+0x74>
 8001856:	230c      	movs	r3, #12
 8001858:	602b      	str	r3, [r5, #0]
 800185a:	e7d6      	b.n	800180a <_free_r+0x22>
 800185c:	6820      	ldr	r0, [r4, #0]
 800185e:	1821      	adds	r1, r4, r0
 8001860:	428b      	cmp	r3, r1
 8001862:	bf04      	itt	eq
 8001864:	6819      	ldreq	r1, [r3, #0]
 8001866:	685b      	ldreq	r3, [r3, #4]
 8001868:	6063      	str	r3, [r4, #4]
 800186a:	bf04      	itt	eq
 800186c:	1809      	addeq	r1, r1, r0
 800186e:	6021      	streq	r1, [r4, #0]
 8001870:	6054      	str	r4, [r2, #4]
 8001872:	e7ca      	b.n	800180a <_free_r+0x22>
 8001874:	bd38      	pop	{r3, r4, r5, pc}
 8001876:	bf00      	nop
 8001878:	200001d0 	.word	0x200001d0

0800187c <malloc>:
 800187c:	4b02      	ldr	r3, [pc, #8]	@ (8001888 <malloc+0xc>)
 800187e:	4601      	mov	r1, r0
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	f000 b825 	b.w	80018d0 <_malloc_r>
 8001886:	bf00      	nop
 8001888:	20000018 	.word	0x20000018

0800188c <sbrk_aligned>:
 800188c:	b570      	push	{r4, r5, r6, lr}
 800188e:	4e0f      	ldr	r6, [pc, #60]	@ (80018cc <sbrk_aligned+0x40>)
 8001890:	460c      	mov	r4, r1
 8001892:	6831      	ldr	r1, [r6, #0]
 8001894:	4605      	mov	r5, r0
 8001896:	b911      	cbnz	r1, 800189e <sbrk_aligned+0x12>
 8001898:	f000 f964 	bl	8001b64 <_sbrk_r>
 800189c:	6030      	str	r0, [r6, #0]
 800189e:	4621      	mov	r1, r4
 80018a0:	4628      	mov	r0, r5
 80018a2:	f000 f95f 	bl	8001b64 <_sbrk_r>
 80018a6:	1c43      	adds	r3, r0, #1
 80018a8:	d103      	bne.n	80018b2 <sbrk_aligned+0x26>
 80018aa:	f04f 34ff 	mov.w	r4, #4294967295
 80018ae:	4620      	mov	r0, r4
 80018b0:	bd70      	pop	{r4, r5, r6, pc}
 80018b2:	1cc4      	adds	r4, r0, #3
 80018b4:	f024 0403 	bic.w	r4, r4, #3
 80018b8:	42a0      	cmp	r0, r4
 80018ba:	d0f8      	beq.n	80018ae <sbrk_aligned+0x22>
 80018bc:	1a21      	subs	r1, r4, r0
 80018be:	4628      	mov	r0, r5
 80018c0:	f000 f950 	bl	8001b64 <_sbrk_r>
 80018c4:	3001      	adds	r0, #1
 80018c6:	d1f2      	bne.n	80018ae <sbrk_aligned+0x22>
 80018c8:	e7ef      	b.n	80018aa <sbrk_aligned+0x1e>
 80018ca:	bf00      	nop
 80018cc:	200001cc 	.word	0x200001cc

080018d0 <_malloc_r>:
 80018d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018d4:	1ccd      	adds	r5, r1, #3
 80018d6:	f025 0503 	bic.w	r5, r5, #3
 80018da:	3508      	adds	r5, #8
 80018dc:	2d0c      	cmp	r5, #12
 80018de:	bf38      	it	cc
 80018e0:	250c      	movcc	r5, #12
 80018e2:	2d00      	cmp	r5, #0
 80018e4:	4606      	mov	r6, r0
 80018e6:	db01      	blt.n	80018ec <_malloc_r+0x1c>
 80018e8:	42a9      	cmp	r1, r5
 80018ea:	d904      	bls.n	80018f6 <_malloc_r+0x26>
 80018ec:	230c      	movs	r3, #12
 80018ee:	6033      	str	r3, [r6, #0]
 80018f0:	2000      	movs	r0, #0
 80018f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80019cc <_malloc_r+0xfc>
 80018fa:	f000 f869 	bl	80019d0 <__malloc_lock>
 80018fe:	f8d8 3000 	ldr.w	r3, [r8]
 8001902:	461c      	mov	r4, r3
 8001904:	bb44      	cbnz	r4, 8001958 <_malloc_r+0x88>
 8001906:	4629      	mov	r1, r5
 8001908:	4630      	mov	r0, r6
 800190a:	f7ff ffbf 	bl	800188c <sbrk_aligned>
 800190e:	1c43      	adds	r3, r0, #1
 8001910:	4604      	mov	r4, r0
 8001912:	d158      	bne.n	80019c6 <_malloc_r+0xf6>
 8001914:	f8d8 4000 	ldr.w	r4, [r8]
 8001918:	4627      	mov	r7, r4
 800191a:	2f00      	cmp	r7, #0
 800191c:	d143      	bne.n	80019a6 <_malloc_r+0xd6>
 800191e:	2c00      	cmp	r4, #0
 8001920:	d04b      	beq.n	80019ba <_malloc_r+0xea>
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	4639      	mov	r1, r7
 8001926:	4630      	mov	r0, r6
 8001928:	eb04 0903 	add.w	r9, r4, r3
 800192c:	f000 f91a 	bl	8001b64 <_sbrk_r>
 8001930:	4581      	cmp	r9, r0
 8001932:	d142      	bne.n	80019ba <_malloc_r+0xea>
 8001934:	6821      	ldr	r1, [r4, #0]
 8001936:	1a6d      	subs	r5, r5, r1
 8001938:	4629      	mov	r1, r5
 800193a:	4630      	mov	r0, r6
 800193c:	f7ff ffa6 	bl	800188c <sbrk_aligned>
 8001940:	3001      	adds	r0, #1
 8001942:	d03a      	beq.n	80019ba <_malloc_r+0xea>
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	442b      	add	r3, r5
 8001948:	6023      	str	r3, [r4, #0]
 800194a:	f8d8 3000 	ldr.w	r3, [r8]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	bb62      	cbnz	r2, 80019ac <_malloc_r+0xdc>
 8001952:	f8c8 7000 	str.w	r7, [r8]
 8001956:	e00f      	b.n	8001978 <_malloc_r+0xa8>
 8001958:	6822      	ldr	r2, [r4, #0]
 800195a:	1b52      	subs	r2, r2, r5
 800195c:	d420      	bmi.n	80019a0 <_malloc_r+0xd0>
 800195e:	2a0b      	cmp	r2, #11
 8001960:	d917      	bls.n	8001992 <_malloc_r+0xc2>
 8001962:	1961      	adds	r1, r4, r5
 8001964:	42a3      	cmp	r3, r4
 8001966:	6025      	str	r5, [r4, #0]
 8001968:	bf18      	it	ne
 800196a:	6059      	strne	r1, [r3, #4]
 800196c:	6863      	ldr	r3, [r4, #4]
 800196e:	bf08      	it	eq
 8001970:	f8c8 1000 	streq.w	r1, [r8]
 8001974:	5162      	str	r2, [r4, r5]
 8001976:	604b      	str	r3, [r1, #4]
 8001978:	4630      	mov	r0, r6
 800197a:	f000 f82f 	bl	80019dc <__malloc_unlock>
 800197e:	f104 000b 	add.w	r0, r4, #11
 8001982:	1d23      	adds	r3, r4, #4
 8001984:	f020 0007 	bic.w	r0, r0, #7
 8001988:	1ac2      	subs	r2, r0, r3
 800198a:	bf1c      	itt	ne
 800198c:	1a1b      	subne	r3, r3, r0
 800198e:	50a3      	strne	r3, [r4, r2]
 8001990:	e7af      	b.n	80018f2 <_malloc_r+0x22>
 8001992:	6862      	ldr	r2, [r4, #4]
 8001994:	42a3      	cmp	r3, r4
 8001996:	bf0c      	ite	eq
 8001998:	f8c8 2000 	streq.w	r2, [r8]
 800199c:	605a      	strne	r2, [r3, #4]
 800199e:	e7eb      	b.n	8001978 <_malloc_r+0xa8>
 80019a0:	4623      	mov	r3, r4
 80019a2:	6864      	ldr	r4, [r4, #4]
 80019a4:	e7ae      	b.n	8001904 <_malloc_r+0x34>
 80019a6:	463c      	mov	r4, r7
 80019a8:	687f      	ldr	r7, [r7, #4]
 80019aa:	e7b6      	b.n	800191a <_malloc_r+0x4a>
 80019ac:	461a      	mov	r2, r3
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	42a3      	cmp	r3, r4
 80019b2:	d1fb      	bne.n	80019ac <_malloc_r+0xdc>
 80019b4:	2300      	movs	r3, #0
 80019b6:	6053      	str	r3, [r2, #4]
 80019b8:	e7de      	b.n	8001978 <_malloc_r+0xa8>
 80019ba:	230c      	movs	r3, #12
 80019bc:	6033      	str	r3, [r6, #0]
 80019be:	4630      	mov	r0, r6
 80019c0:	f000 f80c 	bl	80019dc <__malloc_unlock>
 80019c4:	e794      	b.n	80018f0 <_malloc_r+0x20>
 80019c6:	6005      	str	r5, [r0, #0]
 80019c8:	e7d6      	b.n	8001978 <_malloc_r+0xa8>
 80019ca:	bf00      	nop
 80019cc:	200001d0 	.word	0x200001d0

080019d0 <__malloc_lock>:
 80019d0:	4801      	ldr	r0, [pc, #4]	@ (80019d8 <__malloc_lock+0x8>)
 80019d2:	f7ff bee8 	b.w	80017a6 <__retarget_lock_acquire_recursive>
 80019d6:	bf00      	nop
 80019d8:	200001c8 	.word	0x200001c8

080019dc <__malloc_unlock>:
 80019dc:	4801      	ldr	r0, [pc, #4]	@ (80019e4 <__malloc_unlock+0x8>)
 80019de:	f7ff bee3 	b.w	80017a8 <__retarget_lock_release_recursive>
 80019e2:	bf00      	nop
 80019e4:	200001c8 	.word	0x200001c8

080019e8 <__sflush_r>:
 80019e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80019ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f0:	0716      	lsls	r6, r2, #28
 80019f2:	4605      	mov	r5, r0
 80019f4:	460c      	mov	r4, r1
 80019f6:	d454      	bmi.n	8001aa2 <__sflush_r+0xba>
 80019f8:	684b      	ldr	r3, [r1, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	dc02      	bgt.n	8001a04 <__sflush_r+0x1c>
 80019fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	dd48      	ble.n	8001a96 <__sflush_r+0xae>
 8001a04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001a06:	2e00      	cmp	r6, #0
 8001a08:	d045      	beq.n	8001a96 <__sflush_r+0xae>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001a10:	682f      	ldr	r7, [r5, #0]
 8001a12:	6a21      	ldr	r1, [r4, #32]
 8001a14:	602b      	str	r3, [r5, #0]
 8001a16:	d030      	beq.n	8001a7a <__sflush_r+0x92>
 8001a18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001a1a:	89a3      	ldrh	r3, [r4, #12]
 8001a1c:	0759      	lsls	r1, r3, #29
 8001a1e:	d505      	bpl.n	8001a2c <__sflush_r+0x44>
 8001a20:	6863      	ldr	r3, [r4, #4]
 8001a22:	1ad2      	subs	r2, r2, r3
 8001a24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001a26:	b10b      	cbz	r3, 8001a2c <__sflush_r+0x44>
 8001a28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a2a:	1ad2      	subs	r2, r2, r3
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001a30:	6a21      	ldr	r1, [r4, #32]
 8001a32:	4628      	mov	r0, r5
 8001a34:	47b0      	blx	r6
 8001a36:	1c43      	adds	r3, r0, #1
 8001a38:	89a3      	ldrh	r3, [r4, #12]
 8001a3a:	d106      	bne.n	8001a4a <__sflush_r+0x62>
 8001a3c:	6829      	ldr	r1, [r5, #0]
 8001a3e:	291d      	cmp	r1, #29
 8001a40:	d82b      	bhi.n	8001a9a <__sflush_r+0xb2>
 8001a42:	4a2a      	ldr	r2, [pc, #168]	@ (8001aec <__sflush_r+0x104>)
 8001a44:	40ca      	lsrs	r2, r1
 8001a46:	07d6      	lsls	r6, r2, #31
 8001a48:	d527      	bpl.n	8001a9a <__sflush_r+0xb2>
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	6062      	str	r2, [r4, #4]
 8001a4e:	04d9      	lsls	r1, r3, #19
 8001a50:	6922      	ldr	r2, [r4, #16]
 8001a52:	6022      	str	r2, [r4, #0]
 8001a54:	d504      	bpl.n	8001a60 <__sflush_r+0x78>
 8001a56:	1c42      	adds	r2, r0, #1
 8001a58:	d101      	bne.n	8001a5e <__sflush_r+0x76>
 8001a5a:	682b      	ldr	r3, [r5, #0]
 8001a5c:	b903      	cbnz	r3, 8001a60 <__sflush_r+0x78>
 8001a5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001a60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a62:	602f      	str	r7, [r5, #0]
 8001a64:	b1b9      	cbz	r1, 8001a96 <__sflush_r+0xae>
 8001a66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a6a:	4299      	cmp	r1, r3
 8001a6c:	d002      	beq.n	8001a74 <__sflush_r+0x8c>
 8001a6e:	4628      	mov	r0, r5
 8001a70:	f7ff feba 	bl	80017e8 <_free_r>
 8001a74:	2300      	movs	r3, #0
 8001a76:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a78:	e00d      	b.n	8001a96 <__sflush_r+0xae>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	4628      	mov	r0, r5
 8001a7e:	47b0      	blx	r6
 8001a80:	4602      	mov	r2, r0
 8001a82:	1c50      	adds	r0, r2, #1
 8001a84:	d1c9      	bne.n	8001a1a <__sflush_r+0x32>
 8001a86:	682b      	ldr	r3, [r5, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0c6      	beq.n	8001a1a <__sflush_r+0x32>
 8001a8c:	2b1d      	cmp	r3, #29
 8001a8e:	d001      	beq.n	8001a94 <__sflush_r+0xac>
 8001a90:	2b16      	cmp	r3, #22
 8001a92:	d11e      	bne.n	8001ad2 <__sflush_r+0xea>
 8001a94:	602f      	str	r7, [r5, #0]
 8001a96:	2000      	movs	r0, #0
 8001a98:	e022      	b.n	8001ae0 <__sflush_r+0xf8>
 8001a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	e01b      	b.n	8001ada <__sflush_r+0xf2>
 8001aa2:	690f      	ldr	r7, [r1, #16]
 8001aa4:	2f00      	cmp	r7, #0
 8001aa6:	d0f6      	beq.n	8001a96 <__sflush_r+0xae>
 8001aa8:	0793      	lsls	r3, r2, #30
 8001aaa:	680e      	ldr	r6, [r1, #0]
 8001aac:	bf08      	it	eq
 8001aae:	694b      	ldreq	r3, [r1, #20]
 8001ab0:	600f      	str	r7, [r1, #0]
 8001ab2:	bf18      	it	ne
 8001ab4:	2300      	movne	r3, #0
 8001ab6:	eba6 0807 	sub.w	r8, r6, r7
 8001aba:	608b      	str	r3, [r1, #8]
 8001abc:	f1b8 0f00 	cmp.w	r8, #0
 8001ac0:	dde9      	ble.n	8001a96 <__sflush_r+0xae>
 8001ac2:	6a21      	ldr	r1, [r4, #32]
 8001ac4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001ac6:	4643      	mov	r3, r8
 8001ac8:	463a      	mov	r2, r7
 8001aca:	4628      	mov	r0, r5
 8001acc:	47b0      	blx	r6
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	dc08      	bgt.n	8001ae4 <__sflush_r+0xfc>
 8001ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ada:	81a3      	strh	r3, [r4, #12]
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ae4:	4407      	add	r7, r0
 8001ae6:	eba8 0800 	sub.w	r8, r8, r0
 8001aea:	e7e7      	b.n	8001abc <__sflush_r+0xd4>
 8001aec:	20400001 	.word	0x20400001

08001af0 <_fflush_r>:
 8001af0:	b538      	push	{r3, r4, r5, lr}
 8001af2:	690b      	ldr	r3, [r1, #16]
 8001af4:	4605      	mov	r5, r0
 8001af6:	460c      	mov	r4, r1
 8001af8:	b913      	cbnz	r3, 8001b00 <_fflush_r+0x10>
 8001afa:	2500      	movs	r5, #0
 8001afc:	4628      	mov	r0, r5
 8001afe:	bd38      	pop	{r3, r4, r5, pc}
 8001b00:	b118      	cbz	r0, 8001b0a <_fflush_r+0x1a>
 8001b02:	6a03      	ldr	r3, [r0, #32]
 8001b04:	b90b      	cbnz	r3, 8001b0a <_fflush_r+0x1a>
 8001b06:	f7ff fd57 	bl	80015b8 <__sinit>
 8001b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f3      	beq.n	8001afa <_fflush_r+0xa>
 8001b12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001b14:	07d0      	lsls	r0, r2, #31
 8001b16:	d404      	bmi.n	8001b22 <_fflush_r+0x32>
 8001b18:	0599      	lsls	r1, r3, #22
 8001b1a:	d402      	bmi.n	8001b22 <_fflush_r+0x32>
 8001b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b1e:	f7ff fe42 	bl	80017a6 <__retarget_lock_acquire_recursive>
 8001b22:	4628      	mov	r0, r5
 8001b24:	4621      	mov	r1, r4
 8001b26:	f7ff ff5f 	bl	80019e8 <__sflush_r>
 8001b2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b2c:	07da      	lsls	r2, r3, #31
 8001b2e:	4605      	mov	r5, r0
 8001b30:	d4e4      	bmi.n	8001afc <_fflush_r+0xc>
 8001b32:	89a3      	ldrh	r3, [r4, #12]
 8001b34:	059b      	lsls	r3, r3, #22
 8001b36:	d4e1      	bmi.n	8001afc <_fflush_r+0xc>
 8001b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b3a:	f7ff fe35 	bl	80017a8 <__retarget_lock_release_recursive>
 8001b3e:	e7dd      	b.n	8001afc <_fflush_r+0xc>

08001b40 <fiprintf>:
 8001b40:	b40e      	push	{r1, r2, r3}
 8001b42:	b503      	push	{r0, r1, lr}
 8001b44:	4601      	mov	r1, r0
 8001b46:	ab03      	add	r3, sp, #12
 8001b48:	4805      	ldr	r0, [pc, #20]	@ (8001b60 <fiprintf+0x20>)
 8001b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8001b4e:	6800      	ldr	r0, [r0, #0]
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	f000 f847 	bl	8001be4 <_vfiprintf_r>
 8001b56:	b002      	add	sp, #8
 8001b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b5c:	b003      	add	sp, #12
 8001b5e:	4770      	bx	lr
 8001b60:	20000018 	.word	0x20000018

08001b64 <_sbrk_r>:
 8001b64:	b538      	push	{r3, r4, r5, lr}
 8001b66:	4d06      	ldr	r5, [pc, #24]	@ (8001b80 <_sbrk_r+0x1c>)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	4608      	mov	r0, r1
 8001b6e:	602b      	str	r3, [r5, #0]
 8001b70:	f000 fc78 	bl	8002464 <_sbrk>
 8001b74:	1c43      	adds	r3, r0, #1
 8001b76:	d102      	bne.n	8001b7e <_sbrk_r+0x1a>
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	b103      	cbz	r3, 8001b7e <_sbrk_r+0x1a>
 8001b7c:	6023      	str	r3, [r4, #0]
 8001b7e:	bd38      	pop	{r3, r4, r5, pc}
 8001b80:	200001c4 	.word	0x200001c4

08001b84 <abort>:
 8001b84:	b508      	push	{r3, lr}
 8001b86:	2006      	movs	r0, #6
 8001b88:	f000 fb8c 	bl	80022a4 <raise>
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f000 fc7f 	bl	8002490 <_exit>

08001b92 <__sfputc_r>:
 8001b92:	6893      	ldr	r3, [r2, #8]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	b410      	push	{r4}
 8001b9a:	6093      	str	r3, [r2, #8]
 8001b9c:	da08      	bge.n	8001bb0 <__sfputc_r+0x1e>
 8001b9e:	6994      	ldr	r4, [r2, #24]
 8001ba0:	42a3      	cmp	r3, r4
 8001ba2:	db01      	blt.n	8001ba8 <__sfputc_r+0x16>
 8001ba4:	290a      	cmp	r1, #10
 8001ba6:	d103      	bne.n	8001bb0 <__sfputc_r+0x1e>
 8001ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bac:	f000 babe 	b.w	800212c <__swbuf_r>
 8001bb0:	6813      	ldr	r3, [r2, #0]
 8001bb2:	1c58      	adds	r0, r3, #1
 8001bb4:	6010      	str	r0, [r2, #0]
 8001bb6:	7019      	strb	r1, [r3, #0]
 8001bb8:	4608      	mov	r0, r1
 8001bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <__sfputs_r>:
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc2:	4606      	mov	r6, r0
 8001bc4:	460f      	mov	r7, r1
 8001bc6:	4614      	mov	r4, r2
 8001bc8:	18d5      	adds	r5, r2, r3
 8001bca:	42ac      	cmp	r4, r5
 8001bcc:	d101      	bne.n	8001bd2 <__sfputs_r+0x12>
 8001bce:	2000      	movs	r0, #0
 8001bd0:	e007      	b.n	8001be2 <__sfputs_r+0x22>
 8001bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bd6:	463a      	mov	r2, r7
 8001bd8:	4630      	mov	r0, r6
 8001bda:	f7ff ffda 	bl	8001b92 <__sfputc_r>
 8001bde:	1c43      	adds	r3, r0, #1
 8001be0:	d1f3      	bne.n	8001bca <__sfputs_r+0xa>
 8001be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001be4 <_vfiprintf_r>:
 8001be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be8:	460d      	mov	r5, r1
 8001bea:	b09d      	sub	sp, #116	@ 0x74
 8001bec:	4614      	mov	r4, r2
 8001bee:	4698      	mov	r8, r3
 8001bf0:	4606      	mov	r6, r0
 8001bf2:	b118      	cbz	r0, 8001bfc <_vfiprintf_r+0x18>
 8001bf4:	6a03      	ldr	r3, [r0, #32]
 8001bf6:	b90b      	cbnz	r3, 8001bfc <_vfiprintf_r+0x18>
 8001bf8:	f7ff fcde 	bl	80015b8 <__sinit>
 8001bfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001bfe:	07d9      	lsls	r1, r3, #31
 8001c00:	d405      	bmi.n	8001c0e <_vfiprintf_r+0x2a>
 8001c02:	89ab      	ldrh	r3, [r5, #12]
 8001c04:	059a      	lsls	r2, r3, #22
 8001c06:	d402      	bmi.n	8001c0e <_vfiprintf_r+0x2a>
 8001c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c0a:	f7ff fdcc 	bl	80017a6 <__retarget_lock_acquire_recursive>
 8001c0e:	89ab      	ldrh	r3, [r5, #12]
 8001c10:	071b      	lsls	r3, r3, #28
 8001c12:	d501      	bpl.n	8001c18 <_vfiprintf_r+0x34>
 8001c14:	692b      	ldr	r3, [r5, #16]
 8001c16:	b99b      	cbnz	r3, 8001c40 <_vfiprintf_r+0x5c>
 8001c18:	4629      	mov	r1, r5
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	f000 fac4 	bl	80021a8 <__swsetup_r>
 8001c20:	b170      	cbz	r0, 8001c40 <_vfiprintf_r+0x5c>
 8001c22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c24:	07dc      	lsls	r4, r3, #31
 8001c26:	d504      	bpl.n	8001c32 <_vfiprintf_r+0x4e>
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	b01d      	add	sp, #116	@ 0x74
 8001c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c32:	89ab      	ldrh	r3, [r5, #12]
 8001c34:	0598      	lsls	r0, r3, #22
 8001c36:	d4f7      	bmi.n	8001c28 <_vfiprintf_r+0x44>
 8001c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c3a:	f7ff fdb5 	bl	80017a8 <__retarget_lock_release_recursive>
 8001c3e:	e7f3      	b.n	8001c28 <_vfiprintf_r+0x44>
 8001c40:	2300      	movs	r3, #0
 8001c42:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c44:	2320      	movs	r3, #32
 8001c46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c4e:	2330      	movs	r3, #48	@ 0x30
 8001c50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001e00 <_vfiprintf_r+0x21c>
 8001c54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001c58:	f04f 0901 	mov.w	r9, #1
 8001c5c:	4623      	mov	r3, r4
 8001c5e:	469a      	mov	sl, r3
 8001c60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c64:	b10a      	cbz	r2, 8001c6a <_vfiprintf_r+0x86>
 8001c66:	2a25      	cmp	r2, #37	@ 0x25
 8001c68:	d1f9      	bne.n	8001c5e <_vfiprintf_r+0x7a>
 8001c6a:	ebba 0b04 	subs.w	fp, sl, r4
 8001c6e:	d00b      	beq.n	8001c88 <_vfiprintf_r+0xa4>
 8001c70:	465b      	mov	r3, fp
 8001c72:	4622      	mov	r2, r4
 8001c74:	4629      	mov	r1, r5
 8001c76:	4630      	mov	r0, r6
 8001c78:	f7ff ffa2 	bl	8001bc0 <__sfputs_r>
 8001c7c:	3001      	adds	r0, #1
 8001c7e:	f000 80a7 	beq.w	8001dd0 <_vfiprintf_r+0x1ec>
 8001c82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001c84:	445a      	add	r2, fp
 8001c86:	9209      	str	r2, [sp, #36]	@ 0x24
 8001c88:	f89a 3000 	ldrb.w	r3, [sl]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 809f 	beq.w	8001dd0 <_vfiprintf_r+0x1ec>
 8001c92:	2300      	movs	r3, #0
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c9c:	f10a 0a01 	add.w	sl, sl, #1
 8001ca0:	9304      	str	r3, [sp, #16]
 8001ca2:	9307      	str	r3, [sp, #28]
 8001ca4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001ca8:	931a      	str	r3, [sp, #104]	@ 0x68
 8001caa:	4654      	mov	r4, sl
 8001cac:	2205      	movs	r2, #5
 8001cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cb2:	4853      	ldr	r0, [pc, #332]	@ (8001e00 <_vfiprintf_r+0x21c>)
 8001cb4:	f7fe faac 	bl	8000210 <memchr>
 8001cb8:	9a04      	ldr	r2, [sp, #16]
 8001cba:	b9d8      	cbnz	r0, 8001cf4 <_vfiprintf_r+0x110>
 8001cbc:	06d1      	lsls	r1, r2, #27
 8001cbe:	bf44      	itt	mi
 8001cc0:	2320      	movmi	r3, #32
 8001cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001cc6:	0713      	lsls	r3, r2, #28
 8001cc8:	bf44      	itt	mi
 8001cca:	232b      	movmi	r3, #43	@ 0x2b
 8001ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8001cd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001cd6:	d015      	beq.n	8001d04 <_vfiprintf_r+0x120>
 8001cd8:	9a07      	ldr	r2, [sp, #28]
 8001cda:	4654      	mov	r4, sl
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f04f 0c0a 	mov.w	ip, #10
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ce8:	3b30      	subs	r3, #48	@ 0x30
 8001cea:	2b09      	cmp	r3, #9
 8001cec:	d94b      	bls.n	8001d86 <_vfiprintf_r+0x1a2>
 8001cee:	b1b0      	cbz	r0, 8001d1e <_vfiprintf_r+0x13a>
 8001cf0:	9207      	str	r2, [sp, #28]
 8001cf2:	e014      	b.n	8001d1e <_vfiprintf_r+0x13a>
 8001cf4:	eba0 0308 	sub.w	r3, r0, r8
 8001cf8:	fa09 f303 	lsl.w	r3, r9, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	9304      	str	r3, [sp, #16]
 8001d00:	46a2      	mov	sl, r4
 8001d02:	e7d2      	b.n	8001caa <_vfiprintf_r+0xc6>
 8001d04:	9b03      	ldr	r3, [sp, #12]
 8001d06:	1d19      	adds	r1, r3, #4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	9103      	str	r1, [sp, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bfbb      	ittet	lt
 8001d10:	425b      	neglt	r3, r3
 8001d12:	f042 0202 	orrlt.w	r2, r2, #2
 8001d16:	9307      	strge	r3, [sp, #28]
 8001d18:	9307      	strlt	r3, [sp, #28]
 8001d1a:	bfb8      	it	lt
 8001d1c:	9204      	strlt	r2, [sp, #16]
 8001d1e:	7823      	ldrb	r3, [r4, #0]
 8001d20:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d22:	d10a      	bne.n	8001d3a <_vfiprintf_r+0x156>
 8001d24:	7863      	ldrb	r3, [r4, #1]
 8001d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d28:	d132      	bne.n	8001d90 <_vfiprintf_r+0x1ac>
 8001d2a:	9b03      	ldr	r3, [sp, #12]
 8001d2c:	1d1a      	adds	r2, r3, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	9203      	str	r2, [sp, #12]
 8001d32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001d36:	3402      	adds	r4, #2
 8001d38:	9305      	str	r3, [sp, #20]
 8001d3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001e10 <_vfiprintf_r+0x22c>
 8001d3e:	7821      	ldrb	r1, [r4, #0]
 8001d40:	2203      	movs	r2, #3
 8001d42:	4650      	mov	r0, sl
 8001d44:	f7fe fa64 	bl	8000210 <memchr>
 8001d48:	b138      	cbz	r0, 8001d5a <_vfiprintf_r+0x176>
 8001d4a:	9b04      	ldr	r3, [sp, #16]
 8001d4c:	eba0 000a 	sub.w	r0, r0, sl
 8001d50:	2240      	movs	r2, #64	@ 0x40
 8001d52:	4082      	lsls	r2, r0
 8001d54:	4313      	orrs	r3, r2
 8001d56:	3401      	adds	r4, #1
 8001d58:	9304      	str	r3, [sp, #16]
 8001d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d5e:	4829      	ldr	r0, [pc, #164]	@ (8001e04 <_vfiprintf_r+0x220>)
 8001d60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001d64:	2206      	movs	r2, #6
 8001d66:	f7fe fa53 	bl	8000210 <memchr>
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	d03f      	beq.n	8001dee <_vfiprintf_r+0x20a>
 8001d6e:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <_vfiprintf_r+0x224>)
 8001d70:	bb1b      	cbnz	r3, 8001dba <_vfiprintf_r+0x1d6>
 8001d72:	9b03      	ldr	r3, [sp, #12]
 8001d74:	3307      	adds	r3, #7
 8001d76:	f023 0307 	bic.w	r3, r3, #7
 8001d7a:	3308      	adds	r3, #8
 8001d7c:	9303      	str	r3, [sp, #12]
 8001d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d80:	443b      	add	r3, r7
 8001d82:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d84:	e76a      	b.n	8001c5c <_vfiprintf_r+0x78>
 8001d86:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	e7a8      	b.n	8001ce2 <_vfiprintf_r+0xfe>
 8001d90:	2300      	movs	r3, #0
 8001d92:	3401      	adds	r4, #1
 8001d94:	9305      	str	r3, [sp, #20]
 8001d96:	4619      	mov	r1, r3
 8001d98:	f04f 0c0a 	mov.w	ip, #10
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001da2:	3a30      	subs	r2, #48	@ 0x30
 8001da4:	2a09      	cmp	r2, #9
 8001da6:	d903      	bls.n	8001db0 <_vfiprintf_r+0x1cc>
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0c6      	beq.n	8001d3a <_vfiprintf_r+0x156>
 8001dac:	9105      	str	r1, [sp, #20]
 8001dae:	e7c4      	b.n	8001d3a <_vfiprintf_r+0x156>
 8001db0:	fb0c 2101 	mla	r1, ip, r1, r2
 8001db4:	4604      	mov	r4, r0
 8001db6:	2301      	movs	r3, #1
 8001db8:	e7f0      	b.n	8001d9c <_vfiprintf_r+0x1b8>
 8001dba:	ab03      	add	r3, sp, #12
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	462a      	mov	r2, r5
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <_vfiprintf_r+0x228>)
 8001dc2:	a904      	add	r1, sp, #16
 8001dc4:	4630      	mov	r0, r6
 8001dc6:	f3af 8000 	nop.w
 8001dca:	4607      	mov	r7, r0
 8001dcc:	1c78      	adds	r0, r7, #1
 8001dce:	d1d6      	bne.n	8001d7e <_vfiprintf_r+0x19a>
 8001dd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001dd2:	07d9      	lsls	r1, r3, #31
 8001dd4:	d405      	bmi.n	8001de2 <_vfiprintf_r+0x1fe>
 8001dd6:	89ab      	ldrh	r3, [r5, #12]
 8001dd8:	059a      	lsls	r2, r3, #22
 8001dda:	d402      	bmi.n	8001de2 <_vfiprintf_r+0x1fe>
 8001ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001dde:	f7ff fce3 	bl	80017a8 <__retarget_lock_release_recursive>
 8001de2:	89ab      	ldrh	r3, [r5, #12]
 8001de4:	065b      	lsls	r3, r3, #25
 8001de6:	f53f af1f 	bmi.w	8001c28 <_vfiprintf_r+0x44>
 8001dea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001dec:	e71e      	b.n	8001c2c <_vfiprintf_r+0x48>
 8001dee:	ab03      	add	r3, sp, #12
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	462a      	mov	r2, r5
 8001df4:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <_vfiprintf_r+0x228>)
 8001df6:	a904      	add	r1, sp, #16
 8001df8:	4630      	mov	r0, r6
 8001dfa:	f000 f879 	bl	8001ef0 <_printf_i>
 8001dfe:	e7e4      	b.n	8001dca <_vfiprintf_r+0x1e6>
 8001e00:	080025a6 	.word	0x080025a6
 8001e04:	080025b0 	.word	0x080025b0
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	08001bc1 	.word	0x08001bc1
 8001e10:	080025ac 	.word	0x080025ac

08001e14 <_printf_common>:
 8001e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e18:	4616      	mov	r6, r2
 8001e1a:	4698      	mov	r8, r3
 8001e1c:	688a      	ldr	r2, [r1, #8]
 8001e1e:	690b      	ldr	r3, [r1, #16]
 8001e20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001e24:	4293      	cmp	r3, r2
 8001e26:	bfb8      	it	lt
 8001e28:	4613      	movlt	r3, r2
 8001e2a:	6033      	str	r3, [r6, #0]
 8001e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001e30:	4607      	mov	r7, r0
 8001e32:	460c      	mov	r4, r1
 8001e34:	b10a      	cbz	r2, 8001e3a <_printf_common+0x26>
 8001e36:	3301      	adds	r3, #1
 8001e38:	6033      	str	r3, [r6, #0]
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	0699      	lsls	r1, r3, #26
 8001e3e:	bf42      	ittt	mi
 8001e40:	6833      	ldrmi	r3, [r6, #0]
 8001e42:	3302      	addmi	r3, #2
 8001e44:	6033      	strmi	r3, [r6, #0]
 8001e46:	6825      	ldr	r5, [r4, #0]
 8001e48:	f015 0506 	ands.w	r5, r5, #6
 8001e4c:	d106      	bne.n	8001e5c <_printf_common+0x48>
 8001e4e:	f104 0a19 	add.w	sl, r4, #25
 8001e52:	68e3      	ldr	r3, [r4, #12]
 8001e54:	6832      	ldr	r2, [r6, #0]
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	42ab      	cmp	r3, r5
 8001e5a:	dc26      	bgt.n	8001eaa <_printf_common+0x96>
 8001e5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001e60:	6822      	ldr	r2, [r4, #0]
 8001e62:	3b00      	subs	r3, #0
 8001e64:	bf18      	it	ne
 8001e66:	2301      	movne	r3, #1
 8001e68:	0692      	lsls	r2, r2, #26
 8001e6a:	d42b      	bmi.n	8001ec4 <_printf_common+0xb0>
 8001e6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001e70:	4641      	mov	r1, r8
 8001e72:	4638      	mov	r0, r7
 8001e74:	47c8      	blx	r9
 8001e76:	3001      	adds	r0, #1
 8001e78:	d01e      	beq.n	8001eb8 <_printf_common+0xa4>
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	6922      	ldr	r2, [r4, #16]
 8001e7e:	f003 0306 	and.w	r3, r3, #6
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	bf02      	ittt	eq
 8001e86:	68e5      	ldreq	r5, [r4, #12]
 8001e88:	6833      	ldreq	r3, [r6, #0]
 8001e8a:	1aed      	subeq	r5, r5, r3
 8001e8c:	68a3      	ldr	r3, [r4, #8]
 8001e8e:	bf0c      	ite	eq
 8001e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e94:	2500      	movne	r5, #0
 8001e96:	4293      	cmp	r3, r2
 8001e98:	bfc4      	itt	gt
 8001e9a:	1a9b      	subgt	r3, r3, r2
 8001e9c:	18ed      	addgt	r5, r5, r3
 8001e9e:	2600      	movs	r6, #0
 8001ea0:	341a      	adds	r4, #26
 8001ea2:	42b5      	cmp	r5, r6
 8001ea4:	d11a      	bne.n	8001edc <_printf_common+0xc8>
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	e008      	b.n	8001ebc <_printf_common+0xa8>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	4652      	mov	r2, sl
 8001eae:	4641      	mov	r1, r8
 8001eb0:	4638      	mov	r0, r7
 8001eb2:	47c8      	blx	r9
 8001eb4:	3001      	adds	r0, #1
 8001eb6:	d103      	bne.n	8001ec0 <_printf_common+0xac>
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ec0:	3501      	adds	r5, #1
 8001ec2:	e7c6      	b.n	8001e52 <_printf_common+0x3e>
 8001ec4:	18e1      	adds	r1, r4, r3
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	2030      	movs	r0, #48	@ 0x30
 8001eca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001ece:	4422      	add	r2, r4
 8001ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001ed4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001ed8:	3302      	adds	r3, #2
 8001eda:	e7c7      	b.n	8001e6c <_printf_common+0x58>
 8001edc:	2301      	movs	r3, #1
 8001ede:	4622      	mov	r2, r4
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	4638      	mov	r0, r7
 8001ee4:	47c8      	blx	r9
 8001ee6:	3001      	adds	r0, #1
 8001ee8:	d0e6      	beq.n	8001eb8 <_printf_common+0xa4>
 8001eea:	3601      	adds	r6, #1
 8001eec:	e7d9      	b.n	8001ea2 <_printf_common+0x8e>
	...

08001ef0 <_printf_i>:
 8001ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ef4:	7e0f      	ldrb	r7, [r1, #24]
 8001ef6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001ef8:	2f78      	cmp	r7, #120	@ 0x78
 8001efa:	4691      	mov	r9, r2
 8001efc:	4680      	mov	r8, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	469a      	mov	sl, r3
 8001f02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001f06:	d807      	bhi.n	8001f18 <_printf_i+0x28>
 8001f08:	2f62      	cmp	r7, #98	@ 0x62
 8001f0a:	d80a      	bhi.n	8001f22 <_printf_i+0x32>
 8001f0c:	2f00      	cmp	r7, #0
 8001f0e:	f000 80d1 	beq.w	80020b4 <_printf_i+0x1c4>
 8001f12:	2f58      	cmp	r7, #88	@ 0x58
 8001f14:	f000 80b8 	beq.w	8002088 <_printf_i+0x198>
 8001f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001f20:	e03a      	b.n	8001f98 <_printf_i+0xa8>
 8001f22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001f26:	2b15      	cmp	r3, #21
 8001f28:	d8f6      	bhi.n	8001f18 <_printf_i+0x28>
 8001f2a:	a101      	add	r1, pc, #4	@ (adr r1, 8001f30 <_printf_i+0x40>)
 8001f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f30:	08001f89 	.word	0x08001f89
 8001f34:	08001f9d 	.word	0x08001f9d
 8001f38:	08001f19 	.word	0x08001f19
 8001f3c:	08001f19 	.word	0x08001f19
 8001f40:	08001f19 	.word	0x08001f19
 8001f44:	08001f19 	.word	0x08001f19
 8001f48:	08001f9d 	.word	0x08001f9d
 8001f4c:	08001f19 	.word	0x08001f19
 8001f50:	08001f19 	.word	0x08001f19
 8001f54:	08001f19 	.word	0x08001f19
 8001f58:	08001f19 	.word	0x08001f19
 8001f5c:	0800209b 	.word	0x0800209b
 8001f60:	08001fc7 	.word	0x08001fc7
 8001f64:	08002055 	.word	0x08002055
 8001f68:	08001f19 	.word	0x08001f19
 8001f6c:	08001f19 	.word	0x08001f19
 8001f70:	080020bd 	.word	0x080020bd
 8001f74:	08001f19 	.word	0x08001f19
 8001f78:	08001fc7 	.word	0x08001fc7
 8001f7c:	08001f19 	.word	0x08001f19
 8001f80:	08001f19 	.word	0x08001f19
 8001f84:	0800205d 	.word	0x0800205d
 8001f88:	6833      	ldr	r3, [r6, #0]
 8001f8a:	1d1a      	adds	r2, r3, #4
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6032      	str	r2, [r6, #0]
 8001f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e09c      	b.n	80020d6 <_printf_i+0x1e6>
 8001f9c:	6833      	ldr	r3, [r6, #0]
 8001f9e:	6820      	ldr	r0, [r4, #0]
 8001fa0:	1d19      	adds	r1, r3, #4
 8001fa2:	6031      	str	r1, [r6, #0]
 8001fa4:	0606      	lsls	r6, r0, #24
 8001fa6:	d501      	bpl.n	8001fac <_printf_i+0xbc>
 8001fa8:	681d      	ldr	r5, [r3, #0]
 8001faa:	e003      	b.n	8001fb4 <_printf_i+0xc4>
 8001fac:	0645      	lsls	r5, r0, #25
 8001fae:	d5fb      	bpl.n	8001fa8 <_printf_i+0xb8>
 8001fb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001fb4:	2d00      	cmp	r5, #0
 8001fb6:	da03      	bge.n	8001fc0 <_printf_i+0xd0>
 8001fb8:	232d      	movs	r3, #45	@ 0x2d
 8001fba:	426d      	negs	r5, r5
 8001fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001fc0:	4858      	ldr	r0, [pc, #352]	@ (8002124 <_printf_i+0x234>)
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	e011      	b.n	8001fea <_printf_i+0xfa>
 8001fc6:	6821      	ldr	r1, [r4, #0]
 8001fc8:	6833      	ldr	r3, [r6, #0]
 8001fca:	0608      	lsls	r0, r1, #24
 8001fcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8001fd0:	d402      	bmi.n	8001fd8 <_printf_i+0xe8>
 8001fd2:	0649      	lsls	r1, r1, #25
 8001fd4:	bf48      	it	mi
 8001fd6:	b2ad      	uxthmi	r5, r5
 8001fd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8001fda:	4852      	ldr	r0, [pc, #328]	@ (8002124 <_printf_i+0x234>)
 8001fdc:	6033      	str	r3, [r6, #0]
 8001fde:	bf14      	ite	ne
 8001fe0:	230a      	movne	r3, #10
 8001fe2:	2308      	moveq	r3, #8
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001fea:	6866      	ldr	r6, [r4, #4]
 8001fec:	60a6      	str	r6, [r4, #8]
 8001fee:	2e00      	cmp	r6, #0
 8001ff0:	db05      	blt.n	8001ffe <_printf_i+0x10e>
 8001ff2:	6821      	ldr	r1, [r4, #0]
 8001ff4:	432e      	orrs	r6, r5
 8001ff6:	f021 0104 	bic.w	r1, r1, #4
 8001ffa:	6021      	str	r1, [r4, #0]
 8001ffc:	d04b      	beq.n	8002096 <_printf_i+0x1a6>
 8001ffe:	4616      	mov	r6, r2
 8002000:	fbb5 f1f3 	udiv	r1, r5, r3
 8002004:	fb03 5711 	mls	r7, r3, r1, r5
 8002008:	5dc7      	ldrb	r7, [r0, r7]
 800200a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800200e:	462f      	mov	r7, r5
 8002010:	42bb      	cmp	r3, r7
 8002012:	460d      	mov	r5, r1
 8002014:	d9f4      	bls.n	8002000 <_printf_i+0x110>
 8002016:	2b08      	cmp	r3, #8
 8002018:	d10b      	bne.n	8002032 <_printf_i+0x142>
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	07df      	lsls	r7, r3, #31
 800201e:	d508      	bpl.n	8002032 <_printf_i+0x142>
 8002020:	6923      	ldr	r3, [r4, #16]
 8002022:	6861      	ldr	r1, [r4, #4]
 8002024:	4299      	cmp	r1, r3
 8002026:	bfde      	ittt	le
 8002028:	2330      	movle	r3, #48	@ 0x30
 800202a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800202e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002032:	1b92      	subs	r2, r2, r6
 8002034:	6122      	str	r2, [r4, #16]
 8002036:	f8cd a000 	str.w	sl, [sp]
 800203a:	464b      	mov	r3, r9
 800203c:	aa03      	add	r2, sp, #12
 800203e:	4621      	mov	r1, r4
 8002040:	4640      	mov	r0, r8
 8002042:	f7ff fee7 	bl	8001e14 <_printf_common>
 8002046:	3001      	adds	r0, #1
 8002048:	d14a      	bne.n	80020e0 <_printf_i+0x1f0>
 800204a:	f04f 30ff 	mov.w	r0, #4294967295
 800204e:	b004      	add	sp, #16
 8002050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	f043 0320 	orr.w	r3, r3, #32
 800205a:	6023      	str	r3, [r4, #0]
 800205c:	4832      	ldr	r0, [pc, #200]	@ (8002128 <_printf_i+0x238>)
 800205e:	2778      	movs	r7, #120	@ 0x78
 8002060:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	6831      	ldr	r1, [r6, #0]
 8002068:	061f      	lsls	r7, r3, #24
 800206a:	f851 5b04 	ldr.w	r5, [r1], #4
 800206e:	d402      	bmi.n	8002076 <_printf_i+0x186>
 8002070:	065f      	lsls	r7, r3, #25
 8002072:	bf48      	it	mi
 8002074:	b2ad      	uxthmi	r5, r5
 8002076:	6031      	str	r1, [r6, #0]
 8002078:	07d9      	lsls	r1, r3, #31
 800207a:	bf44      	itt	mi
 800207c:	f043 0320 	orrmi.w	r3, r3, #32
 8002080:	6023      	strmi	r3, [r4, #0]
 8002082:	b11d      	cbz	r5, 800208c <_printf_i+0x19c>
 8002084:	2310      	movs	r3, #16
 8002086:	e7ad      	b.n	8001fe4 <_printf_i+0xf4>
 8002088:	4826      	ldr	r0, [pc, #152]	@ (8002124 <_printf_i+0x234>)
 800208a:	e7e9      	b.n	8002060 <_printf_i+0x170>
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	f023 0320 	bic.w	r3, r3, #32
 8002092:	6023      	str	r3, [r4, #0]
 8002094:	e7f6      	b.n	8002084 <_printf_i+0x194>
 8002096:	4616      	mov	r6, r2
 8002098:	e7bd      	b.n	8002016 <_printf_i+0x126>
 800209a:	6833      	ldr	r3, [r6, #0]
 800209c:	6825      	ldr	r5, [r4, #0]
 800209e:	6961      	ldr	r1, [r4, #20]
 80020a0:	1d18      	adds	r0, r3, #4
 80020a2:	6030      	str	r0, [r6, #0]
 80020a4:	062e      	lsls	r6, r5, #24
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	d501      	bpl.n	80020ae <_printf_i+0x1be>
 80020aa:	6019      	str	r1, [r3, #0]
 80020ac:	e002      	b.n	80020b4 <_printf_i+0x1c4>
 80020ae:	0668      	lsls	r0, r5, #25
 80020b0:	d5fb      	bpl.n	80020aa <_printf_i+0x1ba>
 80020b2:	8019      	strh	r1, [r3, #0]
 80020b4:	2300      	movs	r3, #0
 80020b6:	6123      	str	r3, [r4, #16]
 80020b8:	4616      	mov	r6, r2
 80020ba:	e7bc      	b.n	8002036 <_printf_i+0x146>
 80020bc:	6833      	ldr	r3, [r6, #0]
 80020be:	1d1a      	adds	r2, r3, #4
 80020c0:	6032      	str	r2, [r6, #0]
 80020c2:	681e      	ldr	r6, [r3, #0]
 80020c4:	6862      	ldr	r2, [r4, #4]
 80020c6:	2100      	movs	r1, #0
 80020c8:	4630      	mov	r0, r6
 80020ca:	f7fe f8a1 	bl	8000210 <memchr>
 80020ce:	b108      	cbz	r0, 80020d4 <_printf_i+0x1e4>
 80020d0:	1b80      	subs	r0, r0, r6
 80020d2:	6060      	str	r0, [r4, #4]
 80020d4:	6863      	ldr	r3, [r4, #4]
 80020d6:	6123      	str	r3, [r4, #16]
 80020d8:	2300      	movs	r3, #0
 80020da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020de:	e7aa      	b.n	8002036 <_printf_i+0x146>
 80020e0:	6923      	ldr	r3, [r4, #16]
 80020e2:	4632      	mov	r2, r6
 80020e4:	4649      	mov	r1, r9
 80020e6:	4640      	mov	r0, r8
 80020e8:	47d0      	blx	sl
 80020ea:	3001      	adds	r0, #1
 80020ec:	d0ad      	beq.n	800204a <_printf_i+0x15a>
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	079b      	lsls	r3, r3, #30
 80020f2:	d413      	bmi.n	800211c <_printf_i+0x22c>
 80020f4:	68e0      	ldr	r0, [r4, #12]
 80020f6:	9b03      	ldr	r3, [sp, #12]
 80020f8:	4298      	cmp	r0, r3
 80020fa:	bfb8      	it	lt
 80020fc:	4618      	movlt	r0, r3
 80020fe:	e7a6      	b.n	800204e <_printf_i+0x15e>
 8002100:	2301      	movs	r3, #1
 8002102:	4632      	mov	r2, r6
 8002104:	4649      	mov	r1, r9
 8002106:	4640      	mov	r0, r8
 8002108:	47d0      	blx	sl
 800210a:	3001      	adds	r0, #1
 800210c:	d09d      	beq.n	800204a <_printf_i+0x15a>
 800210e:	3501      	adds	r5, #1
 8002110:	68e3      	ldr	r3, [r4, #12]
 8002112:	9903      	ldr	r1, [sp, #12]
 8002114:	1a5b      	subs	r3, r3, r1
 8002116:	42ab      	cmp	r3, r5
 8002118:	dcf2      	bgt.n	8002100 <_printf_i+0x210>
 800211a:	e7eb      	b.n	80020f4 <_printf_i+0x204>
 800211c:	2500      	movs	r5, #0
 800211e:	f104 0619 	add.w	r6, r4, #25
 8002122:	e7f5      	b.n	8002110 <_printf_i+0x220>
 8002124:	080025b7 	.word	0x080025b7
 8002128:	080025c8 	.word	0x080025c8

0800212c <__swbuf_r>:
 800212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212e:	460e      	mov	r6, r1
 8002130:	4614      	mov	r4, r2
 8002132:	4605      	mov	r5, r0
 8002134:	b118      	cbz	r0, 800213e <__swbuf_r+0x12>
 8002136:	6a03      	ldr	r3, [r0, #32]
 8002138:	b90b      	cbnz	r3, 800213e <__swbuf_r+0x12>
 800213a:	f7ff fa3d 	bl	80015b8 <__sinit>
 800213e:	69a3      	ldr	r3, [r4, #24]
 8002140:	60a3      	str	r3, [r4, #8]
 8002142:	89a3      	ldrh	r3, [r4, #12]
 8002144:	071a      	lsls	r2, r3, #28
 8002146:	d501      	bpl.n	800214c <__swbuf_r+0x20>
 8002148:	6923      	ldr	r3, [r4, #16]
 800214a:	b943      	cbnz	r3, 800215e <__swbuf_r+0x32>
 800214c:	4621      	mov	r1, r4
 800214e:	4628      	mov	r0, r5
 8002150:	f000 f82a 	bl	80021a8 <__swsetup_r>
 8002154:	b118      	cbz	r0, 800215e <__swbuf_r+0x32>
 8002156:	f04f 37ff 	mov.w	r7, #4294967295
 800215a:	4638      	mov	r0, r7
 800215c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	6922      	ldr	r2, [r4, #16]
 8002162:	1a98      	subs	r0, r3, r2
 8002164:	6963      	ldr	r3, [r4, #20]
 8002166:	b2f6      	uxtb	r6, r6
 8002168:	4283      	cmp	r3, r0
 800216a:	4637      	mov	r7, r6
 800216c:	dc05      	bgt.n	800217a <__swbuf_r+0x4e>
 800216e:	4621      	mov	r1, r4
 8002170:	4628      	mov	r0, r5
 8002172:	f7ff fcbd 	bl	8001af0 <_fflush_r>
 8002176:	2800      	cmp	r0, #0
 8002178:	d1ed      	bne.n	8002156 <__swbuf_r+0x2a>
 800217a:	68a3      	ldr	r3, [r4, #8]
 800217c:	3b01      	subs	r3, #1
 800217e:	60a3      	str	r3, [r4, #8]
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	6022      	str	r2, [r4, #0]
 8002186:	701e      	strb	r6, [r3, #0]
 8002188:	6962      	ldr	r2, [r4, #20]
 800218a:	1c43      	adds	r3, r0, #1
 800218c:	429a      	cmp	r2, r3
 800218e:	d004      	beq.n	800219a <__swbuf_r+0x6e>
 8002190:	89a3      	ldrh	r3, [r4, #12]
 8002192:	07db      	lsls	r3, r3, #31
 8002194:	d5e1      	bpl.n	800215a <__swbuf_r+0x2e>
 8002196:	2e0a      	cmp	r6, #10
 8002198:	d1df      	bne.n	800215a <__swbuf_r+0x2e>
 800219a:	4621      	mov	r1, r4
 800219c:	4628      	mov	r0, r5
 800219e:	f7ff fca7 	bl	8001af0 <_fflush_r>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d0d9      	beq.n	800215a <__swbuf_r+0x2e>
 80021a6:	e7d6      	b.n	8002156 <__swbuf_r+0x2a>

080021a8 <__swsetup_r>:
 80021a8:	b538      	push	{r3, r4, r5, lr}
 80021aa:	4b29      	ldr	r3, [pc, #164]	@ (8002250 <__swsetup_r+0xa8>)
 80021ac:	4605      	mov	r5, r0
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	460c      	mov	r4, r1
 80021b2:	b118      	cbz	r0, 80021bc <__swsetup_r+0x14>
 80021b4:	6a03      	ldr	r3, [r0, #32]
 80021b6:	b90b      	cbnz	r3, 80021bc <__swsetup_r+0x14>
 80021b8:	f7ff f9fe 	bl	80015b8 <__sinit>
 80021bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021c0:	0719      	lsls	r1, r3, #28
 80021c2:	d422      	bmi.n	800220a <__swsetup_r+0x62>
 80021c4:	06da      	lsls	r2, r3, #27
 80021c6:	d407      	bmi.n	80021d8 <__swsetup_r+0x30>
 80021c8:	2209      	movs	r2, #9
 80021ca:	602a      	str	r2, [r5, #0]
 80021cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021d0:	81a3      	strh	r3, [r4, #12]
 80021d2:	f04f 30ff 	mov.w	r0, #4294967295
 80021d6:	e033      	b.n	8002240 <__swsetup_r+0x98>
 80021d8:	0758      	lsls	r0, r3, #29
 80021da:	d512      	bpl.n	8002202 <__swsetup_r+0x5a>
 80021dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80021de:	b141      	cbz	r1, 80021f2 <__swsetup_r+0x4a>
 80021e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80021e4:	4299      	cmp	r1, r3
 80021e6:	d002      	beq.n	80021ee <__swsetup_r+0x46>
 80021e8:	4628      	mov	r0, r5
 80021ea:	f7ff fafd 	bl	80017e8 <_free_r>
 80021ee:	2300      	movs	r3, #0
 80021f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80021f2:	89a3      	ldrh	r3, [r4, #12]
 80021f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80021f8:	81a3      	strh	r3, [r4, #12]
 80021fa:	2300      	movs	r3, #0
 80021fc:	6063      	str	r3, [r4, #4]
 80021fe:	6923      	ldr	r3, [r4, #16]
 8002200:	6023      	str	r3, [r4, #0]
 8002202:	89a3      	ldrh	r3, [r4, #12]
 8002204:	f043 0308 	orr.w	r3, r3, #8
 8002208:	81a3      	strh	r3, [r4, #12]
 800220a:	6923      	ldr	r3, [r4, #16]
 800220c:	b94b      	cbnz	r3, 8002222 <__swsetup_r+0x7a>
 800220e:	89a3      	ldrh	r3, [r4, #12]
 8002210:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002218:	d003      	beq.n	8002222 <__swsetup_r+0x7a>
 800221a:	4621      	mov	r1, r4
 800221c:	4628      	mov	r0, r5
 800221e:	f000 f883 	bl	8002328 <__smakebuf_r>
 8002222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002226:	f013 0201 	ands.w	r2, r3, #1
 800222a:	d00a      	beq.n	8002242 <__swsetup_r+0x9a>
 800222c:	2200      	movs	r2, #0
 800222e:	60a2      	str	r2, [r4, #8]
 8002230:	6962      	ldr	r2, [r4, #20]
 8002232:	4252      	negs	r2, r2
 8002234:	61a2      	str	r2, [r4, #24]
 8002236:	6922      	ldr	r2, [r4, #16]
 8002238:	b942      	cbnz	r2, 800224c <__swsetup_r+0xa4>
 800223a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800223e:	d1c5      	bne.n	80021cc <__swsetup_r+0x24>
 8002240:	bd38      	pop	{r3, r4, r5, pc}
 8002242:	0799      	lsls	r1, r3, #30
 8002244:	bf58      	it	pl
 8002246:	6962      	ldrpl	r2, [r4, #20]
 8002248:	60a2      	str	r2, [r4, #8]
 800224a:	e7f4      	b.n	8002236 <__swsetup_r+0x8e>
 800224c:	2000      	movs	r0, #0
 800224e:	e7f7      	b.n	8002240 <__swsetup_r+0x98>
 8002250:	20000018 	.word	0x20000018

08002254 <_raise_r>:
 8002254:	291f      	cmp	r1, #31
 8002256:	b538      	push	{r3, r4, r5, lr}
 8002258:	4605      	mov	r5, r0
 800225a:	460c      	mov	r4, r1
 800225c:	d904      	bls.n	8002268 <_raise_r+0x14>
 800225e:	2316      	movs	r3, #22
 8002260:	6003      	str	r3, [r0, #0]
 8002262:	f04f 30ff 	mov.w	r0, #4294967295
 8002266:	bd38      	pop	{r3, r4, r5, pc}
 8002268:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800226a:	b112      	cbz	r2, 8002272 <_raise_r+0x1e>
 800226c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002270:	b94b      	cbnz	r3, 8002286 <_raise_r+0x32>
 8002272:	4628      	mov	r0, r5
 8002274:	f000 f830 	bl	80022d8 <_getpid_r>
 8002278:	4622      	mov	r2, r4
 800227a:	4601      	mov	r1, r0
 800227c:	4628      	mov	r0, r5
 800227e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002282:	f000 b817 	b.w	80022b4 <_kill_r>
 8002286:	2b01      	cmp	r3, #1
 8002288:	d00a      	beq.n	80022a0 <_raise_r+0x4c>
 800228a:	1c59      	adds	r1, r3, #1
 800228c:	d103      	bne.n	8002296 <_raise_r+0x42>
 800228e:	2316      	movs	r3, #22
 8002290:	6003      	str	r3, [r0, #0]
 8002292:	2001      	movs	r0, #1
 8002294:	e7e7      	b.n	8002266 <_raise_r+0x12>
 8002296:	2100      	movs	r1, #0
 8002298:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800229c:	4620      	mov	r0, r4
 800229e:	4798      	blx	r3
 80022a0:	2000      	movs	r0, #0
 80022a2:	e7e0      	b.n	8002266 <_raise_r+0x12>

080022a4 <raise>:
 80022a4:	4b02      	ldr	r3, [pc, #8]	@ (80022b0 <raise+0xc>)
 80022a6:	4601      	mov	r1, r0
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	f7ff bfd3 	b.w	8002254 <_raise_r>
 80022ae:	bf00      	nop
 80022b0:	20000018 	.word	0x20000018

080022b4 <_kill_r>:
 80022b4:	b538      	push	{r3, r4, r5, lr}
 80022b6:	4d07      	ldr	r5, [pc, #28]	@ (80022d4 <_kill_r+0x20>)
 80022b8:	2300      	movs	r3, #0
 80022ba:	4604      	mov	r4, r0
 80022bc:	4608      	mov	r0, r1
 80022be:	4611      	mov	r1, r2
 80022c0:	602b      	str	r3, [r5, #0]
 80022c2:	f000 f8b7 	bl	8002434 <_kill>
 80022c6:	1c43      	adds	r3, r0, #1
 80022c8:	d102      	bne.n	80022d0 <_kill_r+0x1c>
 80022ca:	682b      	ldr	r3, [r5, #0]
 80022cc:	b103      	cbz	r3, 80022d0 <_kill_r+0x1c>
 80022ce:	6023      	str	r3, [r4, #0]
 80022d0:	bd38      	pop	{r3, r4, r5, pc}
 80022d2:	bf00      	nop
 80022d4:	200001c4 	.word	0x200001c4

080022d8 <_getpid_r>:
 80022d8:	f000 b894 	b.w	8002404 <_getpid>

080022dc <__swhatbuf_r>:
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	460c      	mov	r4, r1
 80022e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022e4:	2900      	cmp	r1, #0
 80022e6:	b096      	sub	sp, #88	@ 0x58
 80022e8:	4615      	mov	r5, r2
 80022ea:	461e      	mov	r6, r3
 80022ec:	da0d      	bge.n	800230a <__swhatbuf_r+0x2e>
 80022ee:	89a3      	ldrh	r3, [r4, #12]
 80022f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80022f4:	f04f 0100 	mov.w	r1, #0
 80022f8:	bf14      	ite	ne
 80022fa:	2340      	movne	r3, #64	@ 0x40
 80022fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002300:	2000      	movs	r0, #0
 8002302:	6031      	str	r1, [r6, #0]
 8002304:	602b      	str	r3, [r5, #0]
 8002306:	b016      	add	sp, #88	@ 0x58
 8002308:	bd70      	pop	{r4, r5, r6, pc}
 800230a:	466a      	mov	r2, sp
 800230c:	f000 f848 	bl	80023a0 <_fstat_r>
 8002310:	2800      	cmp	r0, #0
 8002312:	dbec      	blt.n	80022ee <__swhatbuf_r+0x12>
 8002314:	9901      	ldr	r1, [sp, #4]
 8002316:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800231a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800231e:	4259      	negs	r1, r3
 8002320:	4159      	adcs	r1, r3
 8002322:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002326:	e7eb      	b.n	8002300 <__swhatbuf_r+0x24>

08002328 <__smakebuf_r>:
 8002328:	898b      	ldrh	r3, [r1, #12]
 800232a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800232c:	079d      	lsls	r5, r3, #30
 800232e:	4606      	mov	r6, r0
 8002330:	460c      	mov	r4, r1
 8002332:	d507      	bpl.n	8002344 <__smakebuf_r+0x1c>
 8002334:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002338:	6023      	str	r3, [r4, #0]
 800233a:	6123      	str	r3, [r4, #16]
 800233c:	2301      	movs	r3, #1
 800233e:	6163      	str	r3, [r4, #20]
 8002340:	b003      	add	sp, #12
 8002342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002344:	ab01      	add	r3, sp, #4
 8002346:	466a      	mov	r2, sp
 8002348:	f7ff ffc8 	bl	80022dc <__swhatbuf_r>
 800234c:	9f00      	ldr	r7, [sp, #0]
 800234e:	4605      	mov	r5, r0
 8002350:	4639      	mov	r1, r7
 8002352:	4630      	mov	r0, r6
 8002354:	f7ff fabc 	bl	80018d0 <_malloc_r>
 8002358:	b948      	cbnz	r0, 800236e <__smakebuf_r+0x46>
 800235a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800235e:	059a      	lsls	r2, r3, #22
 8002360:	d4ee      	bmi.n	8002340 <__smakebuf_r+0x18>
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	f043 0302 	orr.w	r3, r3, #2
 800236a:	81a3      	strh	r3, [r4, #12]
 800236c:	e7e2      	b.n	8002334 <__smakebuf_r+0xc>
 800236e:	89a3      	ldrh	r3, [r4, #12]
 8002370:	6020      	str	r0, [r4, #0]
 8002372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002376:	81a3      	strh	r3, [r4, #12]
 8002378:	9b01      	ldr	r3, [sp, #4]
 800237a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800237e:	b15b      	cbz	r3, 8002398 <__smakebuf_r+0x70>
 8002380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002384:	4630      	mov	r0, r6
 8002386:	f000 f81d 	bl	80023c4 <_isatty_r>
 800238a:	b128      	cbz	r0, 8002398 <__smakebuf_r+0x70>
 800238c:	89a3      	ldrh	r3, [r4, #12]
 800238e:	f023 0303 	bic.w	r3, r3, #3
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	81a3      	strh	r3, [r4, #12]
 8002398:	89a3      	ldrh	r3, [r4, #12]
 800239a:	431d      	orrs	r5, r3
 800239c:	81a5      	strh	r5, [r4, #12]
 800239e:	e7cf      	b.n	8002340 <__smakebuf_r+0x18>

080023a0 <_fstat_r>:
 80023a0:	b538      	push	{r3, r4, r5, lr}
 80023a2:	4d07      	ldr	r5, [pc, #28]	@ (80023c0 <_fstat_r+0x20>)
 80023a4:	2300      	movs	r3, #0
 80023a6:	4604      	mov	r4, r0
 80023a8:	4608      	mov	r0, r1
 80023aa:	4611      	mov	r1, r2
 80023ac:	602b      	str	r3, [r5, #0]
 80023ae:	f000 f821 	bl	80023f4 <_fstat>
 80023b2:	1c43      	adds	r3, r0, #1
 80023b4:	d102      	bne.n	80023bc <_fstat_r+0x1c>
 80023b6:	682b      	ldr	r3, [r5, #0]
 80023b8:	b103      	cbz	r3, 80023bc <_fstat_r+0x1c>
 80023ba:	6023      	str	r3, [r4, #0]
 80023bc:	bd38      	pop	{r3, r4, r5, pc}
 80023be:	bf00      	nop
 80023c0:	200001c4 	.word	0x200001c4

080023c4 <_isatty_r>:
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	4d06      	ldr	r5, [pc, #24]	@ (80023e0 <_isatty_r+0x1c>)
 80023c8:	2300      	movs	r3, #0
 80023ca:	4604      	mov	r4, r0
 80023cc:	4608      	mov	r0, r1
 80023ce:	602b      	str	r3, [r5, #0]
 80023d0:	f000 f828 	bl	8002424 <_isatty>
 80023d4:	1c43      	adds	r3, r0, #1
 80023d6:	d102      	bne.n	80023de <_isatty_r+0x1a>
 80023d8:	682b      	ldr	r3, [r5, #0]
 80023da:	b103      	cbz	r3, 80023de <_isatty_r+0x1a>
 80023dc:	6023      	str	r3, [r4, #0]
 80023de:	bd38      	pop	{r3, r4, r5, pc}
 80023e0:	200001c4 	.word	0x200001c4

080023e4 <_close>:
 80023e4:	4b02      	ldr	r3, [pc, #8]	@ (80023f0 <_close+0xc>)
 80023e6:	2258      	movs	r2, #88	@ 0x58
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f04f 30ff 	mov.w	r0, #4294967295
 80023ee:	4770      	bx	lr
 80023f0:	200001c4 	.word	0x200001c4

080023f4 <_fstat>:
 80023f4:	4b02      	ldr	r3, [pc, #8]	@ (8002400 <_fstat+0xc>)
 80023f6:	2258      	movs	r2, #88	@ 0x58
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f04f 30ff 	mov.w	r0, #4294967295
 80023fe:	4770      	bx	lr
 8002400:	200001c4 	.word	0x200001c4

08002404 <_getpid>:
 8002404:	4b02      	ldr	r3, [pc, #8]	@ (8002410 <_getpid+0xc>)
 8002406:	2258      	movs	r2, #88	@ 0x58
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	f04f 30ff 	mov.w	r0, #4294967295
 800240e:	4770      	bx	lr
 8002410:	200001c4 	.word	0x200001c4

08002414 <_gettimeofday>:
 8002414:	4b02      	ldr	r3, [pc, #8]	@ (8002420 <_gettimeofday+0xc>)
 8002416:	2258      	movs	r2, #88	@ 0x58
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	f04f 30ff 	mov.w	r0, #4294967295
 800241e:	4770      	bx	lr
 8002420:	200001c4 	.word	0x200001c4

08002424 <_isatty>:
 8002424:	4b02      	ldr	r3, [pc, #8]	@ (8002430 <_isatty+0xc>)
 8002426:	2258      	movs	r2, #88	@ 0x58
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	2000      	movs	r0, #0
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	200001c4 	.word	0x200001c4

08002434 <_kill>:
 8002434:	4b02      	ldr	r3, [pc, #8]	@ (8002440 <_kill+0xc>)
 8002436:	2258      	movs	r2, #88	@ 0x58
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	f04f 30ff 	mov.w	r0, #4294967295
 800243e:	4770      	bx	lr
 8002440:	200001c4 	.word	0x200001c4

08002444 <_lseek>:
 8002444:	4b02      	ldr	r3, [pc, #8]	@ (8002450 <_lseek+0xc>)
 8002446:	2258      	movs	r2, #88	@ 0x58
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	f04f 30ff 	mov.w	r0, #4294967295
 800244e:	4770      	bx	lr
 8002450:	200001c4 	.word	0x200001c4

08002454 <_read>:
 8002454:	4b02      	ldr	r3, [pc, #8]	@ (8002460 <_read+0xc>)
 8002456:	2258      	movs	r2, #88	@ 0x58
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	f04f 30ff 	mov.w	r0, #4294967295
 800245e:	4770      	bx	lr
 8002460:	200001c4 	.word	0x200001c4

08002464 <_sbrk>:
 8002464:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <_sbrk+0x14>)
 8002466:	6811      	ldr	r1, [r2, #0]
 8002468:	4603      	mov	r3, r0
 800246a:	b909      	cbnz	r1, 8002470 <_sbrk+0xc>
 800246c:	4903      	ldr	r1, [pc, #12]	@ (800247c <_sbrk+0x18>)
 800246e:	6011      	str	r1, [r2, #0]
 8002470:	6810      	ldr	r0, [r2, #0]
 8002472:	4403      	add	r3, r0
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4770      	bx	lr
 8002478:	200001d4 	.word	0x200001d4
 800247c:	200001d8 	.word	0x200001d8

08002480 <_write>:
 8002480:	4b02      	ldr	r3, [pc, #8]	@ (800248c <_write+0xc>)
 8002482:	2258      	movs	r2, #88	@ 0x58
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	f04f 30ff 	mov.w	r0, #4294967295
 800248a:	4770      	bx	lr
 800248c:	200001c4 	.word	0x200001c4

08002490 <_exit>:
 8002490:	e7fe      	b.n	8002490 <_exit>
	...

08002494 <_init>:
 8002494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002496:	bf00      	nop
 8002498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800249a:	bc08      	pop	{r3}
 800249c:	469e      	mov	lr, r3
 800249e:	4770      	bx	lr

080024a0 <_fini>:
 80024a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a2:	bf00      	nop
 80024a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a6:	bc08      	pop	{r3}
 80024a8:	469e      	mov	lr, r3
 80024aa:	4770      	bx	lr
