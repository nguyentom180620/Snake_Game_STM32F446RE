
Bare_Metal_Snake_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d44  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08000f08  08000f08  00001f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f58  08000f58  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000f58  08000f58  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000f58  08000f58  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f58  08000f58  00001f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f5c  08000f5c  00001f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000f60  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08000f6c  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000f6c  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bf0  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000222  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00002e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000112  00000000  00000000  00002fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010c7  00000000  00000000  000030d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c95  00000000  00000000  00004199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000453b  00000000  00000000  00004e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00009369  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b0  00000000  00000000  000093ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0000995c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ef0 	.word	0x08000ef0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08000ef0 	.word	0x08000ef0

08000204 <main>:
static void DisplayApple(snake_Type *snake, apple_Type *apple);

static void DisplayGame(snake_Type *snake, apple_Type *apple);

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b0a8      	sub	sp, #160	@ 0xa0
 8000208:	af00      	add	r7, sp, #0
	SetSystemClockto16MHz();
 800020a:	f000 f84b 	bl	80002a4 <SetSystemClockto16MHz>
	ConfigureTimer3();
 800020e:	f000 f899 	bl	8000344 <ConfigureTimer3>
	SPI1ClockEnable();
 8000212:	f000 f8fd 	bl	8000410 <SPI1ClockEnable>
	GPIOAClockEnable();
 8000216:	f000 f90f 	bl	8000438 <GPIOAClockEnable>

	// Now, set up user buttons
	GPIOCClockEnable();
 800021a:	f000 f921 	bl	8000460 <GPIOCClockEnable>
	MovementButtonsInit();
 800021e:	f000 fb27 	bl	8000870 <MovementButtonsInit>

	// Enable Interrupts
	NVIC_EnableIRQ(EXTI0IRQn);
 8000222:	2006      	movs	r0, #6
 8000224:	f000 fb98 	bl	8000958 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI1IRQn);
 8000228:	2007      	movs	r0, #7
 800022a:	f000 fb95 	bl	8000958 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2IRQn);
 800022e:	2008      	movs	r0, #8
 8000230:	f000 fb92 	bl	8000958 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3IRQn);
 8000234:	2009      	movs	r0, #9
 8000236:	f000 fb8f 	bl	8000958 <NVIC_EnableIRQ>

	SPI1PinsInit();
 800023a:	f000 f9e3 	bl	8000604 <SPI1PinsInit>
	SPI1Init();
 800023e:	f000 f923 	bl	8000488 <SPI1Init>

	matrixInit();
 8000242:	f000 fa59 	bl	80006f8 <matrixInit>

	// Write data here
	// Snake starts with head at (3, 2), tail at (1, 2), and size 3
	snake_Type snake;
	snake_Type *snake_Ptr = &snake;
 8000246:	f107 0308 	add.w	r3, r7, #8
 800024a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	SnakeInit(snake_Ptr);
 800024e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000252:	f000 fc28 	bl	8000aa6 <SnakeInit>

	// Apple starts at (3, 7) and will update to a random square after collected
	apple_Type apple;
	apple_Type *apple_Ptr = &apple;
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	AppleInit(apple_Ptr);
 800025c:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8000260:	f000 fde5 	bl	8000e2e <AppleInit>

	while(1)
	{
		// If dead, play the dead sequence and queue for restart
		if (alive == false)
 8000264:	4b0e      	ldr	r3, [pc, #56]	@ (80002a0 <main+0x9c>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	b2db      	uxtb	r3, r3
 800026a:	f083 0301 	eor.w	r3, r3, #1
 800026e:	b2db      	uxtb	r3, r3
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <main+0x74>
		{
			playLoseScreen();
 8000274:	f000 fcc0 	bl	8000bf8 <playLoseScreen>
		}

		// First, display to screen
		DisplayGame(snake_Ptr, apple_Ptr);
 8000278:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800027c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000280:	f000 fdf6 	bl	8000e70 <DisplayGame>

		// Next, delay by set amount (default 1 second)
		Delay(1000);
 8000284:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000288:	f000 f894 	bl	80003b4 <Delay>

		// Then, move the snake by one
		MoveSnake(snake_Ptr);
 800028c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000290:	f000 fc50 	bl	8000b34 <MoveSnake>

		// Finally, check if head is currently at an apple (then set that bool)
		// and lastly check if we are alive (Are we out of bounds or have we hit ourself)
		SnakeCheckAfterMove(snake_Ptr);
 8000294:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000298:	f000 fd72 	bl	8000d80 <SnakeCheckAfterMove>
		if (alive == false)
 800029c:	e7e2      	b.n	8000264 <main+0x60>
 800029e:	bf00      	nop
 80002a0:	20000008 	.word	0x20000008

080002a4 <SetSystemClockto16MHz>:
	}
}

void SetSystemClockto16MHz(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
	// Initialize System Clock
	uint32_t *RCC_CR_Ptr = (uint32_t*)RCC_CR;
 80002aa:	4b23      	ldr	r3, [pc, #140]	@ (8000338 <SetSystemClockto16MHz+0x94>)
 80002ac:	60fb      	str	r3, [r7, #12]
	// Turn on HSI
	*RCC_CR_Ptr |= (uint32_t)0x1;
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f043 0201 	orr.w	r2, r3, #1
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	601a      	str	r2, [r3, #0]
	// Wait for HSI Clock to be ready
	while ((*RCC_CR_Ptr & 0x2) == 0);
 80002ba:	bf00      	nop
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f003 0302 	and.w	r3, r3, #2
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0f9      	beq.n	80002bc <SetSystemClockto16MHz+0x18>

	// Configure Prescalers
	uint32_t *RCC_CFGR_Ptr = (uint32_t*)RCC_CFGR;
 80002c8:	4b1c      	ldr	r3, [pc, #112]	@ (800033c <SetSystemClockto16MHz+0x98>)
 80002ca:	60bb      	str	r3, [r7, #8]
	// HPRE
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b1111 << 4);
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	601a      	str	r2, [r3, #0]
	// PPRE1
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b111 << 10);
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	601a      	str	r2, [r3, #0]
	// PPRE2
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b111 << 13);
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	601a      	str	r2, [r3, #0]

	// Set HSI as Clock Source
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b11);
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f023 0203 	bic.w	r2, r3, #3
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	601a      	str	r2, [r3, #0]

	// Configure Flash
	uint32_t *FLASH_ACR_Ptr = (uint32_t*)FLASH_ACR;
 80002fc:	4b10      	ldr	r3, [pc, #64]	@ (8000340 <SetSystemClockto16MHz+0x9c>)
 80002fe:	607b      	str	r3, [r7, #4]
	// Latency
	*FLASH_ACR_Ptr |= (uint32_t)(0b0000 << 0);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	601a      	str	r2, [r3, #0]
	// ICEN
	*FLASH_ACR_Ptr |= (uint32_t)(0b1 << 9);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	601a      	str	r2, [r3, #0]
	// DCEN
	*FLASH_ACR_Ptr |= (uint32_t)(0b1 << 10);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	601a      	str	r2, [r3, #0]

	// Turn off HSE
	*RCC_CR_Ptr &= ~((uint32_t)0x1 << 16);
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	601a      	str	r2, [r3, #0]
}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40023800 	.word	0x40023800
 800033c:	40023808 	.word	0x40023808
 8000340:	40023c00 	.word	0x40023c00

08000344 <ConfigureTimer3>:

void ConfigureTimer3(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b087      	sub	sp, #28
 8000348:	af00      	add	r7, sp, #0
	// Enable TIM3 Clock
	uint32_t *RCC_APB1_Ptr = (uint32_t*)RCC_APB1;
 800034a:	4b15      	ldr	r3, [pc, #84]	@ (80003a0 <ConfigureTimer3+0x5c>)
 800034c:	617b      	str	r3, [r7, #20]
	*RCC_APB1_Ptr |= (uint32_t)0x2;
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f043 0202 	orr.w	r2, r3, #2
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	601a      	str	r2, [r3, #0]

	// Set Prescaler
	uint32_t *TIM3_PSC_Ptr = (uint32_t*)TIM3_PSC;
 800035a:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <ConfigureTimer3+0x60>)
 800035c:	613b      	str	r3, [r7, #16]
	*TIM3_PSC_Ptr |= (uint32_t)0xF;
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f043 020f 	orr.w	r2, r3, #15
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	601a      	str	r2, [r3, #0]

	// Set Auto-Reload
	uint32_t *TIM3_ARR_Ptr = (uint32_t*)TIM3_ARR;
 800036a:	4b0f      	ldr	r3, [pc, #60]	@ (80003a8 <ConfigureTimer3+0x64>)
 800036c:	60fb      	str	r3, [r7, #12]
	*TIM3_ARR_Ptr = (uint32_t)0x3E7;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000374:	601a      	str	r2, [r3, #0]
//	// Enable Interrupt
//	uint32_t *TIM3_DIER_Ptr = (uint32_t*)TIM3_DIER;
//	*TIM3_DIER_Ptr |= (uint32_t)0x1;

	// Clear UIF Bit
	uint32_t *TIM3_SR_Ptr = (uint32_t*)TIM3_SR;
 8000376:	4b0d      	ldr	r3, [pc, #52]	@ (80003ac <ConfigureTimer3+0x68>)
 8000378:	60bb      	str	r3, [r7, #8]
	*TIM3_SR_Ptr &= (uint32_t)0xFFFE;
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8000382:	4013      	ands	r3, r2
 8000384:	68ba      	ldr	r2, [r7, #8]
 8000386:	6013      	str	r3, [r2, #0]

//	// Enable NVIC Interrupt for Timer 3
//	NVIC_EnableIRQ(TIM3_IRQn);

	// Enable TIM3
	uint32_t *TIM3_CR1_Ptr = (uint32_t*)TIM3_CR1;
 8000388:	4b09      	ldr	r3, [pc, #36]	@ (80003b0 <ConfigureTimer3+0x6c>)
 800038a:	607b      	str	r3, [r7, #4]
	*TIM3_CR1_Ptr = (uint32_t)0b1 << 0;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2201      	movs	r2, #1
 8000390:	601a      	str	r2, [r3, #0]
}
 8000392:	bf00      	nop
 8000394:	371c      	adds	r7, #28
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40023840 	.word	0x40023840
 80003a4:	40000428 	.word	0x40000428
 80003a8:	4000042c 	.word	0x4000042c
 80003ac:	40000410 	.word	0x40000410
 80003b0:	40000400 	.word	0x40000400

080003b4 <Delay>:

void Delay(uint32_t ms)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b087      	sub	sp, #28
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	volatile uint32_t i;
	uint32_t *TIM3_CNT_Ptr = (uint32_t*)TIM3_CNT;
 80003bc:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <Delay+0x54>)
 80003be:	617b      	str	r3, [r7, #20]
	uint32_t *TIM3_SR_Ptr = (uint32_t*)TIM3_SR;
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <Delay+0x58>)
 80003c2:	613b      	str	r3, [r7, #16]
	for (i = 0; i <= ms; i++)
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	e013      	b.n	80003f2 <Delay+0x3e>
	{
		// Clear TIM3 Count
		*TIM3_CNT_Ptr = 0;
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]

		// Wait for UIF (1 cycle of 1kHz clocking)
		while((*TIM3_SR_Ptr & 0x1) == 0);	// This will make a 1ms delay
 80003d0:	bf00      	nop
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f9      	beq.n	80003d2 <Delay+0x1e>

		// Reset UIF
		*TIM3_SR_Ptr &= (uint32_t)0xFFFE;
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80003e6:	4013      	ands	r3, r2
 80003e8:	693a      	ldr	r2, [r7, #16]
 80003ea:	6013      	str	r3, [r2, #0]
	for (i = 0; i <= ms; i++)
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	3301      	adds	r3, #1
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	429a      	cmp	r2, r3
 80003f8:	d2e7      	bcs.n	80003ca <Delay+0x16>
	}
}
 80003fa:	bf00      	nop
 80003fc:	bf00      	nop
 80003fe:	371c      	adds	r7, #28
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	40000424 	.word	0x40000424
 800040c:	40000410 	.word	0x40000410

08000410 <SPI1ClockEnable>:

void SPI1ClockEnable(void)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
	// First, SPI clock through APB2 Bus
	uint32_t *RCC_APB2ENR_Ptr = (uint32_t*)RCC_APB2ENR;
 8000416:	4b07      	ldr	r3, [pc, #28]	@ (8000434 <SPI1ClockEnable+0x24>)
 8000418:	607b      	str	r3, [r7, #4]
	*RCC_APB2ENR_Ptr |= (uint32_t)(0x1 << 12);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	601a      	str	r2, [r3, #0]
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40023844 	.word	0x40023844

08000438 <GPIOAClockEnable>:

void GPIOAClockEnable(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
	// Now, Enable GPIOA Clock through AHB1 Bus
	uint32_t *RCC_AHB1ENR_Ptr = (uint32_t*)RCC_AHB1ENR;
 800043e:	4b07      	ldr	r3, [pc, #28]	@ (800045c <GPIOAClockEnable+0x24>)
 8000440:	607b      	str	r3, [r7, #4]
	*RCC_AHB1ENR_Ptr |= (uint32_t)0x1;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f043 0201 	orr.w	r2, r3, #1
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	601a      	str	r2, [r3, #0]
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40023830 	.word	0x40023830

08000460 <GPIOCClockEnable>:

void GPIOCClockEnable(void)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
	// Now, Enable GPIOC Clock through AHB1 Bus
	uint32_t *RCC_AHB1ENR_Ptr = (uint32_t*)RCC_AHB1ENR;
 8000466:	4b07      	ldr	r3, [pc, #28]	@ (8000484 <GPIOCClockEnable+0x24>)
 8000468:	607b      	str	r3, [r7, #4]
	*RCC_AHB1ENR_Ptr |= (uint32_t)0b1 << 2;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f043 0204 	orr.w	r2, r3, #4
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	601a      	str	r2, [r3, #0]
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40023830 	.word	0x40023830

08000488 <SPI1Init>:

void SPI1Init(void)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
	// Set Up SPI Init
	uint32_t *SPI1_CR1_Ptr = (uint32_t*)SPI1_CR1;
 800048e:	4b26      	ldr	r3, [pc, #152]	@ (8000528 <SPI1Init+0xa0>)
 8000490:	607b      	str	r3, [r7, #4]

	// NOTE: Simplex is basically just full duplex but we don't use MISO

	// BIDIMODE off
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 15);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	601a      	str	r2, [r3, #0]
	// CRC Calculations off
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 13);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	601a      	str	r2, [r3, #0]
	// DFF to 16 bits
	*SPI1_CR1_Ptr |= (uint32_t)(0x1 << 11);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	601a      	str	r2, [r3, #0]
	// RXOnly off since we are transferring from master to slave
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 10);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	601a      	str	r2, [r3, #0]
	// SSM Disabled
	// MSB Selected
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 7);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	601a      	str	r2, [r3, #0]
	// Baud Rate of 2 MBits/S
	*SPI1_CR1_Ptr &= ~(uint32_t)(0b111 << 3);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	601a      	str	r2, [r3, #0]
	*SPI1_CR1_Ptr |= (uint32_t)(0b010 << 3);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f043 0210 	orr.w	r2, r3, #16
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	601a      	str	r2, [r3, #0]
	// Put into Master Mode
	*SPI1_CR1_Ptr |= (uint32_t)(0x1 << 2);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 0204 	orr.w	r2, r3, #4
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	601a      	str	r2, [r3, #0]
	// Set CPOL and CPHA
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x3);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f023 0203 	bic.w	r2, r3, #3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]

	// SSOE enabled
	uint32_t *SPI1_CR2_Ptr = (uint32_t*)SPI1_CR2;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <SPI1Init+0xa4>)
 8000500:	603b      	str	r3, [r7, #0]
	*SPI1_CR2_Ptr |= 0x4;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f043 0204 	orr.w	r2, r3, #4
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	601a      	str	r2, [r3, #0]

	// Finally, enable SPI
	*SPI1_CR1_Ptr |= (uint32_t)(0x1 << 6);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	601a      	str	r2, [r3, #0]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40013000 	.word	0x40013000
 800052c:	40013004 	.word	0x40013004

08000530 <SPI1WriteToDR>:

void SPI1WriteToDR(uint16_t data)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	80fb      	strh	r3, [r7, #6]
	// Load data into SPI1 data register
	uint32_t *SPI1_DR_Ptr = (uint32_t*)SPI1_DR;
 800053a:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <SPI1WriteToDR+0x20>)
 800053c:	60fb      	str	r3, [r7, #12]
	*SPI1_DR_Ptr = (uint32_t)data;
 800053e:	88fa      	ldrh	r2, [r7, #6]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	601a      	str	r2, [r3, #0]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	4001300c 	.word	0x4001300c

08000554 <WaitForTransmissionEnd>:

void WaitForTransmissionEnd(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
	// Wait for transmission to end by checking BSY and TXE
	uint32_t *SPI1_SR_Ptr = (uint32_t*)SPI1_SR;
 800055a:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <WaitForTransmissionEnd+0x34>)
 800055c:	607b      	str	r3, [r7, #4]
	while ((*SPI1_SR_Ptr & (0b1 << 7)) != 0);
 800055e:	bf00      	nop
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000568:	2b00      	cmp	r3, #0
 800056a:	d1f9      	bne.n	8000560 <WaitForTransmissionEnd+0xc>
	while ((*SPI1_SR_Ptr & (0b1 << 1)) == 0);
 800056c:	bf00      	nop
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	2b00      	cmp	r3, #0
 8000578:	d0f9      	beq.n	800056e <WaitForTransmissionEnd+0x1a>
}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	40013008 	.word	0x40013008

0800058c <EnableSlave>:

void EnableSlave(void)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
	// Enable Slave
	uint32_t *CS_BSRR_Ptr = (uint32_t*)CS_BSRR;
 8000592:	4b07      	ldr	r3, [pc, #28]	@ (80005b0 <EnableSlave+0x24>)
 8000594:	607b      	str	r3, [r7, #4]
	*CS_BSRR_Ptr |= (uint32_t)(0b1 << (CS_Pin + 16));
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	601a      	str	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40020018 	.word	0x40020018

080005b4 <DisableSlave>:

void DisableSlave(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
	// Disable Slave
	uint32_t *CS_BSRR_Ptr = (uint32_t*)CS_BSRR;
 80005ba:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <DisableSlave+0x24>)
 80005bc:	607b      	str	r3, [r7, #4]
	*CS_BSRR_Ptr |= (uint32_t)(0b1 << CS_Pin);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f043 0210 	orr.w	r2, r3, #16
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	601a      	str	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40020018 	.word	0x40020018

080005dc <SPI1_Transmit>:

void SPI1_Transmit(uint16_t data)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
	EnableSlave();
 80005e6:	f7ff ffd1 	bl	800058c <EnableSlave>
	SPI1WriteToDR(data);
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ff9f 	bl	8000530 <SPI1WriteToDR>
	WaitForTransmissionEnd();
 80005f2:	f7ff ffaf 	bl	8000554 <WaitForTransmissionEnd>
	DisableSlave();
 80005f6:	f7ff ffdd 	bl	80005b4 <DisableSlave>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <SPI1PinsInit>:

void SPI1PinsInit(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
	// Initialize SPI GPIO Pins
	// First, PinA5 for SCLK
	uint32_t *GPIOA_MODER_Ptr = (uint32_t*)GPIOA_MODER;
 800060a:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <SPI1PinsInit+0x8c>)
 800060c:	60fb      	str	r3, [r7, #12]
	// Set to Alternate Function
	*GPIOA_MODER_Ptr &= ~(uint32_t)(0b11 << 10);
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER_Ptr |= (uint32_t)(0b10 << 10);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	601a      	str	r2, [r3, #0]
	// Next, PinA7 for MOSI
	*GPIOA_MODER_Ptr &= ~(uint32_t)(0b11 << 14);
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER_Ptr |= (uint32_t)(0b10 << 14);
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	601a      	str	r2, [r3, #0]

	// Set a GPIO Pin for CS Pin
	uint32_t *CS_Port_Ptr = (uint32_t*)CS_Port;
 800063e:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <SPI1PinsInit+0x8c>)
 8000640:	60bb      	str	r3, [r7, #8]
	// Set Pin 4 to output
	*CS_Port_Ptr &= ~(uint32_t)(0b11 << 2 * CS_Pin);
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	601a      	str	r2, [r3, #0]
	*CS_Port_Ptr |= (uint32_t)(0b01 << 2 * CS_Pin);
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	601a      	str	r2, [r3, #0]

	// Set up alternate function by selecting AF5 (According to datasheet)
	uint32_t *GPIOA_AFRL_Ptr = (uint32_t*)GPIOA_AFRL;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <SPI1PinsInit+0x90>)
 800065c:	607b      	str	r3, [r7, #4]
	*GPIOA_AFRL_Ptr |= (uint32_t)(0b0101 << 16);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f443 22a0 	orr.w	r2, r3, #327680	@ 0x50000
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL_Ptr |= (uint32_t)(0b0101 << 20);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL_Ptr |= (uint32_t)(0b0101 << 28);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f043 42a0 	orr.w	r2, r3, #1342177280	@ 0x50000000
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	601a      	str	r2, [r3, #0]
	// Initialize to High
	DisableSlave();
 8000682:	f7ff ff97 	bl	80005b4 <DisableSlave>
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40020000 	.word	0x40020000
 8000694:	40020020 	.word	0x40020020

08000698 <max7219_write>:

void max7219_write(uint8_t addr, uint8_t data)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
	uint16_t writeData = (addr << 8) | data;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	021b      	lsls	r3, r3, #8
 80006ae:	b21a      	sxth	r2, r3
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	81fb      	strh	r3, [r7, #14]
	SPI1_Transmit(writeData);
 80006ba:	89fb      	ldrh	r3, [r7, #14]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff8d 	bl	80005dc <SPI1_Transmit>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <matrixClear>:

void matrixClear(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
	for (int i = 1; i <= 8; i++)
 80006d0:	2301      	movs	r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	e008      	b.n	80006e8 <matrixClear+0x1e>
	{
		max7219_write(i, 0x00);	// Clear Screen
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ffdb 	bl	8000698 <max7219_write>
	for (int i = 1; i <= 8; i++)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3301      	adds	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b08      	cmp	r3, #8
 80006ec:	ddf3      	ble.n	80006d6 <matrixClear+0xc>
	}
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <matrixInit>:

void matrixInit(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	max7219_write(0x09, 0);		// No Decoding
 80006fc:	2100      	movs	r1, #0
 80006fe:	2009      	movs	r0, #9
 8000700:	f7ff ffca 	bl	8000698 <max7219_write>
	max7219_write(0x0A, 0x02);	// 5/32 Light Intensity
 8000704:	2102      	movs	r1, #2
 8000706:	200a      	movs	r0, #10
 8000708:	f7ff ffc6 	bl	8000698 <max7219_write>
	max7219_write(0x0B, 0x07);	// Scan all columns (Turn them all on)
 800070c:	2107      	movs	r1, #7
 800070e:	200b      	movs	r0, #11
 8000710:	f7ff ffc2 	bl	8000698 <max7219_write>
	max7219_write(0x0C, 0x01);	// Normal Operation (No shutdown mode)
 8000714:	2101      	movs	r1, #1
 8000716:	200c      	movs	r0, #12
 8000718:	f7ff ffbe 	bl	8000698 <max7219_write>
	max7219_write(0x0F, 0x00);	// No Display Test
 800071c:	2100      	movs	r1, #0
 800071e:	200f      	movs	r0, #15
 8000720:	f7ff ffba 	bl	8000698 <max7219_write>

	matrixClear();
 8000724:	f7ff ffd1 	bl	80006ca <matrixClear>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <intToHexPosition>:

uint8_t intToHexPosition(uint8_t val)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	switch (val)
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	3b01      	subs	r3, #1
 800073a:	2b07      	cmp	r3, #7
 800073c:	d822      	bhi.n	8000784 <intToHexPosition+0x58>
 800073e:	a201      	add	r2, pc, #4	@ (adr r2, 8000744 <intToHexPosition+0x18>)
 8000740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000744:	08000765 	.word	0x08000765
 8000748:	08000769 	.word	0x08000769
 800074c:	0800076d 	.word	0x0800076d
 8000750:	08000771 	.word	0x08000771
 8000754:	08000775 	.word	0x08000775
 8000758:	08000779 	.word	0x08000779
 800075c:	0800077d 	.word	0x0800077d
 8000760:	08000781 	.word	0x08000781
	{
		case 1:
			return 0x01;
 8000764:	2301      	movs	r3, #1
 8000766:	e00e      	b.n	8000786 <intToHexPosition+0x5a>
			break;
		case 2:
			return 0x02;
 8000768:	2302      	movs	r3, #2
 800076a:	e00c      	b.n	8000786 <intToHexPosition+0x5a>
			break;
		case 3:
			return 0x04;
 800076c:	2304      	movs	r3, #4
 800076e:	e00a      	b.n	8000786 <intToHexPosition+0x5a>
			break;
		case 4:
			return 0x08;
 8000770:	2308      	movs	r3, #8
 8000772:	e008      	b.n	8000786 <intToHexPosition+0x5a>
			break;
		case 5:
			return 0x10;
 8000774:	2310      	movs	r3, #16
 8000776:	e006      	b.n	8000786 <intToHexPosition+0x5a>
			break;
		case 6:
			return 0x20;
 8000778:	2320      	movs	r3, #32
 800077a:	e004      	b.n	8000786 <intToHexPosition+0x5a>
			break;
		case 7:
			return 0x40;
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	e002      	b.n	8000786 <intToHexPosition+0x5a>
			break;
		case 8:
			return 0x80;
 8000780:	2380      	movs	r3, #128	@ 0x80
 8000782:	e000      	b.n	8000786 <intToHexPosition+0x5a>
			break;
		default:
			return -1;		// Should never get this, only enter values between 1 and 8
 8000784:	23ff      	movs	r3, #255	@ 0xff
	}
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop

08000794 <positionToMatrixPos>:

void positionToMatrixPos(uint8_t x_pos[], uint8_t y_pos[], int numberOfCords, uint8_t outputArray[])
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
 80007a0:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < numberOfCords; i++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	e01d      	b.n	80007e4 <positionToMatrixPos+0x50>
	{
		uint8_t x = x_pos[i];
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	74fb      	strb	r3, [r7, #19]
		uint8_t y = y_pos[i];
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	68ba      	ldr	r2, [r7, #8]
 80007b6:	4413      	add	r3, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	74bb      	strb	r3, [r7, #18]
		x = intToHexPosition(x);
 80007bc:	7cfb      	ldrb	r3, [r7, #19]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ffb4 	bl	800072c <intToHexPosition>
 80007c4:	4603      	mov	r3, r0
 80007c6:	74fb      	strb	r3, [r7, #19]
		outputArray[y] |= x;
 80007c8:	7cbb      	ldrb	r3, [r7, #18]
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	7819      	ldrb	r1, [r3, #0]
 80007d0:	7cbb      	ldrb	r3, [r7, #18]
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	4413      	add	r3, r2
 80007d6:	7cfa      	ldrb	r2, [r7, #19]
 80007d8:	430a      	orrs	r2, r1
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < numberOfCords; i++)
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3301      	adds	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	dbdd      	blt.n	80007a8 <positionToMatrixPos+0x14>
	}
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <LEDMatrixWrite>:

void LEDMatrixWrite(uint8_t outputArray[])
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b084      	sub	sp, #16
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
	uint16_t writePos;
	for (int i = 1; i <= 8; i++)
 80007fe:	2301      	movs	r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	e012      	b.n	800082a <LEDMatrixWrite+0x34>
	{
		writePos = (i << 8) | outputArray[i];
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	b21b      	sxth	r3, r3
 8000808:	021b      	lsls	r3, r3, #8
 800080a:	b21a      	sxth	r2, r3
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	440b      	add	r3, r1
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b21b      	sxth	r3, r3
 8000816:	4313      	orrs	r3, r2
 8000818:	b21b      	sxth	r3, r3
 800081a:	817b      	strh	r3, [r7, #10]
		SPI1_Transmit(writePos);
 800081c:	897b      	ldrh	r3, [r7, #10]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fedc 	bl	80005dc <SPI1_Transmit>
	for (int i = 1; i <= 8; i++)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	3301      	adds	r3, #1
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2b08      	cmp	r3, #8
 800082e:	dde9      	ble.n	8000804 <LEDMatrixWrite+0xe>
	}
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <LEDMatrixRowWrite>:

void LEDMatrixRowWrite(uint8_t outputArray[], uint8_t row)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b084      	sub	sp, #16
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	460b      	mov	r3, r1
 8000844:	70fb      	strb	r3, [r7, #3]
	uint16_t writePos;
	writePos = (row << 8) | outputArray[row];
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	b21b      	sxth	r3, r3
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	b21a      	sxth	r2, r3
 800084e:	78fb      	ldrb	r3, [r7, #3]
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	440b      	add	r3, r1
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b21b      	sxth	r3, r3
 800085c:	81fb      	strh	r3, [r7, #14]
	SPI1_Transmit(writePos);
 800085e:	89fb      	ldrh	r3, [r7, #14]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff febb 	bl	80005dc <SPI1_Transmit>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <MovementButtonsInit>:
		SPI1_Transmit(writeRow);
	}
}

void MovementButtonsInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	@ 0x24
 8000874:	af00      	add	r7, sp, #0
	// Sets buttons as inputs
	uint32_t *GPIOC_MODER_Ptr = (uint32_t*)GPIOC_MODER;
 8000876:	4b33      	ldr	r3, [pc, #204]	@ (8000944 <MovementButtonsInit+0xd4>)
 8000878:	613b      	str	r3, [r7, #16]
	// Up Pin PC0
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (0 * 2));
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f023 0203 	bic.w	r2, r3, #3
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	601a      	str	r2, [r3, #0]
	// Right Pin PC1
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (1 * 2));
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f023 020c 	bic.w	r2, r3, #12
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	601a      	str	r2, [r3, #0]
	// Down Pin PC2
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (2 * 2));
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	601a      	str	r2, [r3, #0]
	// Left Pin PC3
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (3 * 2));
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	601a      	str	r2, [r3, #0]

	// Now set up falling edge interrupt for buttons
	// Enable SYSCFG Clock
	uint32_t *RCC_APB2ENR_Ptr = (uint32_t*)RCC_APB2ENR;
 80008aa:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <MovementButtonsInit+0xd8>)
 80008ac:	60fb      	str	r3, [r7, #12]
	*RCC_APB2ENR_Ptr |= (uint32_t)0b1 << 14;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	601a      	str	r2, [r3, #0]

	// Configure EXTI0 to EXTI3 for PC0-PC3
	uint32_t *SYSCFG_EXTICR1_Ptr = (uint32_t*)SYSCFG_EXTICR1;
 80008ba:	4b24      	ldr	r3, [pc, #144]	@ (800094c <MovementButtonsInit+0xdc>)
 80008bc:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 4; i++)
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
 80008c2:	e00c      	b.n	80008de <MovementButtonsInit+0x6e>
	{
		*SYSCFG_EXTICR1_Ptr |= (uint32_t)0b0010 << (i * 4);
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	2102      	movs	r1, #2
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	431a      	orrs	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	3301      	adds	r3, #1
 80008dc:	61fb      	str	r3, [r7, #28]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	ddef      	ble.n	80008c4 <MovementButtonsInit+0x54>
	}

	// Enable falling trigger
	uint32_t *EXTI_FTSR_Ptr = (uint32_t*)EXTI_FTSR;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MovementButtonsInit+0xe0>)
 80008e6:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	e00b      	b.n	8000906 <MovementButtonsInit+0x96>
	{
		*EXTI_FTSR_Ptr |= (uint32_t)0b1 << i;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	2101      	movs	r1, #1
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	fa01 f303 	lsl.w	r3, r1, r3
 80008fa:	431a      	orrs	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	3301      	adds	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	2b03      	cmp	r3, #3
 800090a:	ddf0      	ble.n	80008ee <MovementButtonsInit+0x7e>
	}

	// Unmask the interrupt
	uint32_t *EXTI_IMR_Ptr = (uint32_t*)EXTI_IMR;
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MovementButtonsInit+0xe4>)
 800090e:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 4; i++)
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	e00b      	b.n	800092e <MovementButtonsInit+0xbe>
	{
		*EXTI_IMR_Ptr |= (uint32_t)0b1 << i;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	2101      	movs	r1, #1
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	fa01 f303 	lsl.w	r3, r1, r3
 8000922:	431a      	orrs	r2, r3
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	3301      	adds	r3, #1
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	2b03      	cmp	r3, #3
 8000932:	ddf0      	ble.n	8000916 <MovementButtonsInit+0xa6>
	}
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3724      	adds	r7, #36	@ 0x24
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40020800 	.word	0x40020800
 8000948:	40023844 	.word	0x40023844
 800094c:	40013808 	.word	0x40013808
 8000950:	40013c0c 	.word	0x40013c0c
 8000954:	40013c00 	.word	0x40013c00

08000958 <NVIC_EnableIRQ>:

void NVIC_EnableIRQ(uint32_t IRQn)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	if (IRQn <= 96)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b60      	cmp	r3, #96	@ 0x60
 8000964:	d813      	bhi.n	800098e <NVIC_EnableIRQ+0x36>
	{
		uint32_t iserIndex = IRQn >> 5;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	095b      	lsrs	r3, r3, #5
 800096a:	60fb      	str	r3, [r7, #12]
		uint32_t iserBit = IRQn & 0x1F;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 031f 	and.w	r3, r3, #31
 8000972:	60bb      	str	r3, [r7, #8]

		NVIC->ISER[iserIndex] |= (0x1 << iserBit);
 8000974:	4a09      	ldr	r2, [pc, #36]	@ (800099c <NVIC_EnableIRQ+0x44>)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097c:	2101      	movs	r1, #1
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	fa01 f202 	lsl.w	r2, r1, r2
 8000984:	4905      	ldr	r1, [pc, #20]	@ (800099c <NVIC_EnableIRQ+0x44>)
 8000986:	431a      	orrs	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000e100 	.word	0xe000e100

080009a0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <EXTI0_IRQHandler+0x2c>)
 80009a8:	607b      	str	r3, [r7, #4]

	if (previous_direction != DOWN)
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <EXTI0_IRQHandler+0x30>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d002      	beq.n	80009b8 <EXTI0_IRQHandler+0x18>
	{
		snake_direction = UP;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <EXTI0_IRQHandler+0x34>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC0 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 0;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2201      	movs	r2, #1
 80009bc:	601a      	str	r2, [r3, #0]
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40013c14 	.word	0x40013c14
 80009d0:	20000004 	.word	0x20000004
 80009d4:	20000000 	.word	0x20000000

080009d8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <EXTI1_IRQHandler+0x2c>)
 80009e0:	607b      	str	r3, [r7, #4]

	if (previous_direction != LEFT)
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <EXTI1_IRQHandler+0x30>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d002      	beq.n	80009f0 <EXTI1_IRQHandler+0x18>
	{
		snake_direction = RIGHT;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <EXTI1_IRQHandler+0x34>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC1 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 1;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2202      	movs	r2, #2
 80009f4:	601a      	str	r2, [r3, #0]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40013c14 	.word	0x40013c14
 8000a08:	20000004 	.word	0x20000004
 8000a0c:	20000000 	.word	0x20000000

08000a10 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <EXTI2_IRQHandler+0x2c>)
 8000a18:	607b      	str	r3, [r7, #4]

	if (previous_direction != UP)
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <EXTI2_IRQHandler+0x30>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <EXTI2_IRQHandler+0x18>
	{
		snake_direction = DOWN;
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <EXTI2_IRQHandler+0x34>)
 8000a24:	2202      	movs	r2, #2
 8000a26:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC2 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 2;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	601a      	str	r2, [r3, #0]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40013c14 	.word	0x40013c14
 8000a40:	20000004 	.word	0x20000004
 8000a44:	20000000 	.word	0x20000000

08000a48 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <EXTI3_IRQHandler+0x2c>)
 8000a50:	607b      	str	r3, [r7, #4]

	if (previous_direction != RIGHT)
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <EXTI3_IRQHandler+0x30>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d002      	beq.n	8000a60 <EXTI3_IRQHandler+0x18>
	{
		snake_direction = LEFT;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <EXTI3_IRQHandler+0x34>)
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC3 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 3;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2208      	movs	r2, #8
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40013c14 	.word	0x40013c14
 8000a78:	20000004 	.word	0x20000004
 8000a7c:	20000000 	.word	0x20000000

08000a80 <DisplaySnake>:

void DisplaySnake(snake_Type *snake)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	positionToMatrixPos(snake->x_pos, snake->y_pos, snake->snakeSize, snake->outputArray);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	1d18      	adds	r0, r3, #4
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3384      	adds	r3, #132	@ 0x84
 8000a9a:	f7ff fe7b 	bl	8000794 <positionToMatrixPos>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <SnakeInit>:

void SnakeInit(snake_Type *snake)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b085      	sub	sp, #20
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	snake->snakeSize = 3;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 64; i++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	e00e      	b.n	8000ad8 <SnakeInit+0x32>
	{
		snake->x_pos[i] = 0;
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4413      	add	r3, r2
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
		snake->y_pos[i] = 0;
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	3344      	adds	r3, #68	@ 0x44
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 64; i++)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b3f      	cmp	r3, #63	@ 0x3f
 8000adc:	dded      	ble.n	8000aba <SnakeInit+0x14>
	}
	snake->x_pos[0] = 3;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	711a      	strb	r2, [r3, #4]
	snake->x_pos[1] = 2;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	715a      	strb	r2, [r3, #5]
	snake->y_pos[0] = 2;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2202      	movs	r2, #2
 8000aee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	snake->y_pos[1] = 2;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2202      	movs	r2, #2
 8000af6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	snake->x_pos[2] = 1;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2201      	movs	r2, #1
 8000afe:	719a      	strb	r2, [r3, #6]
	snake->y_pos[2] = 2;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2202      	movs	r2, #2
 8000b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	for (int i = 0; i < 9; i++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	e008      	b.n	8000b20 <SnakeInit+0x7a>
	{
		snake->outputArray[i] = 0;
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4413      	add	r3, r2
 8000b14:	3384      	adds	r3, #132	@ 0x84
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	2b08      	cmp	r3, #8
 8000b24:	ddf3      	ble.n	8000b0e <SnakeInit+0x68>
	}
}
 8000b26:	bf00      	nop
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <MoveSnake>:

void MoveSnake(snake_Type *snake)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b087      	sub	sp, #28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	uint8_t tempToPlacex = snake->x_pos[0];
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	791b      	ldrb	r3, [r3, #4]
 8000b40:	75fb      	strb	r3, [r7, #23]
	uint8_t tempToPlacey = snake->y_pos[0];
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b48:	75bb      	strb	r3, [r7, #22]
	uint8_t tempToStorex = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]
	uint8_t tempToStorey = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73bb      	strb	r3, [r7, #14]
	switch(snake_direction)
 8000b52:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <MoveSnake+0xbc>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d819      	bhi.n	8000b8e <MoveSnake+0x5a>
 8000b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b60 <MoveSnake+0x2c>)
 8000b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b60:	08000b71 	.word	0x08000b71
 8000b64:	08000b79 	.word	0x08000b79
 8000b68:	08000b81 	.word	0x08000b81
 8000b6c:	08000b89 	.word	0x08000b89
	{
		case UP:
			tempToPlacey += 1;
 8000b70:	7dbb      	ldrb	r3, [r7, #22]
 8000b72:	3301      	adds	r3, #1
 8000b74:	75bb      	strb	r3, [r7, #22]
			break;
 8000b76:	e00a      	b.n	8000b8e <MoveSnake+0x5a>
		case RIGHT:
			tempToPlacex += 1;
 8000b78:	7dfb      	ldrb	r3, [r7, #23]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	75fb      	strb	r3, [r7, #23]
			break;
 8000b7e:	e006      	b.n	8000b8e <MoveSnake+0x5a>
		case DOWN:
			tempToPlacey -= 1;
 8000b80:	7dbb      	ldrb	r3, [r7, #22]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	75bb      	strb	r3, [r7, #22]
			break;
 8000b86:	e002      	b.n	8000b8e <MoveSnake+0x5a>
		case LEFT:
			tempToPlacex -= 1;
 8000b88:	7dfb      	ldrb	r3, [r7, #23]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	75fb      	strb	r3, [r7, #23]
	}
	// Here, we would check if apple was collected.
	// If it was, add one to size and reset apple collected

	for (int i = 0; i < snake->snakeSize; i++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	e01e      	b.n	8000bd2 <MoveSnake+0x9e>
	{
		tempToStorex = snake->x_pos[i];
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	4413      	add	r3, r2
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	73fb      	strb	r3, [r7, #15]
		tempToStorey = snake->y_pos[i];
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3344      	adds	r3, #68	@ 0x44
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	73bb      	strb	r3, [r7, #14]
		snake->x_pos[i] = tempToPlacex;
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	3304      	adds	r3, #4
 8000bb4:	7dfa      	ldrb	r2, [r7, #23]
 8000bb6:	701a      	strb	r2, [r3, #0]
		snake->y_pos[i] = tempToPlacey;
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	3344      	adds	r3, #68	@ 0x44
 8000bc0:	7dba      	ldrb	r2, [r7, #22]
 8000bc2:	701a      	strb	r2, [r3, #0]
		tempToPlacex = tempToStorex;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	75fb      	strb	r3, [r7, #23]
		tempToPlacey = tempToStorey;
 8000bc8:	7bbb      	ldrb	r3, [r7, #14]
 8000bca:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < snake->snakeSize; i++)
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	dbdb      	blt.n	8000b94 <MoveSnake+0x60>
	}
	previous_direction = snake_direction;
 8000bdc:	4b04      	ldr	r3, [pc, #16]	@ (8000bf0 <MoveSnake+0xbc>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <MoveSnake+0xc0>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	371c      	adds	r7, #28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <playLoseScreen>:

void playLoseScreen(void)
{
 8000bf8:	b5b0      	push	{r4, r5, r7, lr}
 8000bfa:	b09e      	sub	sp, #120	@ 0x78
 8000bfc:	af00      	add	r7, sp, #0
	// Double X
	int doubleXSize = 16;
 8000bfe:	2310      	movs	r3, #16
 8000c00:	677b      	str	r3, [r7, #116]	@ 0x74
	uint8_t doubleX_x_pos[] = {1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8};
 8000c02:	4b55      	ldr	r3, [pc, #340]	@ (8000d58 <playLoseScreen+0x160>)
 8000c04:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8000c08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t doubleX_y_pos[] = {1,8,2,7,3,6,4,5,4,5,3,6,2,7,1,8};
 8000c0e:	4b53      	ldr	r3, [pc, #332]	@ (8000d5c <playLoseScreen+0x164>)
 8000c10:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8000c14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t doubleXoutputArray[9] = {0};
 8000c1a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	721a      	strb	r2, [r3, #8]
	positionToMatrixPos(doubleX_x_pos, doubleX_y_pos, doubleXSize, doubleXoutputArray);
 8000c26:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c2a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000c2e:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8000c32:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c34:	f7ff fdae 	bl	8000794 <positionToMatrixPos>

	LEDMatrixWrite(doubleXoutputArray);
 8000c38:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fdda 	bl	80007f6 <LEDMatrixWrite>
	Delay(500);
 8000c42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c46:	f7ff fbb5 	bl	80003b4 <Delay>
	matrixClear();
 8000c4a:	f7ff fd3e 	bl	80006ca <matrixClear>
	Delay(500);
 8000c4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c52:	f7ff fbaf 	bl	80003b4 <Delay>
	LEDMatrixWrite(doubleXoutputArray);
 8000c56:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fdcb 	bl	80007f6 <LEDMatrixWrite>
	Delay(500);
 8000c60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c64:	f7ff fba6 	bl	80003b4 <Delay>
	matrixClear();
 8000c68:	f7ff fd2f 	bl	80006ca <matrixClear>
	Delay(500);
 8000c6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c70:	f7ff fba0 	bl	80003b4 <Delay>

	// R? (Restart question)
	int RSize = 23;
 8000c74:	2317      	movs	r3, #23
 8000c76:	673b      	str	r3, [r7, #112]	@ 0x70
	uint8_t R_x_pos[] = {1,1,1,1,1,1,2,2,3,3,3,4,4,4,6,6,7,7,7,8,8,8,8};
 8000c78:	4b39      	ldr	r3, [pc, #228]	@ (8000d60 <playLoseScreen+0x168>)
 8000c7a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000c7e:	461d      	mov	r5, r3
 8000c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c84:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c88:	6020      	str	r0, [r4, #0]
 8000c8a:	3404      	adds	r4, #4
 8000c8c:	8021      	strh	r1, [r4, #0]
 8000c8e:	3402      	adds	r4, #2
 8000c90:	0c0b      	lsrs	r3, r1, #16
 8000c92:	7023      	strb	r3, [r4, #0]
	uint8_t R_y_pos[] = {1,2,3,4,5,6,4,6,3,4,6,1,2,5,5,6,1,3,6,3,4,5,6};
 8000c94:	4b33      	ldr	r3, [pc, #204]	@ (8000d64 <playLoseScreen+0x16c>)
 8000c96:	f107 0414 	add.w	r4, r7, #20
 8000c9a:	461d      	mov	r5, r3
 8000c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ca4:	6020      	str	r0, [r4, #0]
 8000ca6:	3404      	adds	r4, #4
 8000ca8:	8021      	strh	r1, [r4, #0]
 8000caa:	3402      	adds	r4, #2
 8000cac:	0c0b      	lsrs	r3, r1, #16
 8000cae:	7023      	strb	r3, [r4, #0]
	uint8_t RoutputArray[9] = {0};
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	721a      	strb	r2, [r3, #8]
	positionToMatrixPos(R_x_pos, R_y_pos, RSize, RoutputArray);
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	f107 0114 	add.w	r1, r7, #20
 8000cc4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000cc8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000cca:	f7ff fd63 	bl	8000794 <positionToMatrixPos>

	while(1)
	{
		for (volatile int i = 1; i <= 8; i++)
 8000cce:	2301      	movs	r3, #1
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	e018      	b.n	8000d06 <playLoseScreen+0x10e>
		{
			for (volatile int j = 1; j <= i; j++)
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	e00a      	b.n	8000cf0 <playLoseScreen+0xf8>
			{
				LEDMatrixRowWrite(RoutputArray, j);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fda8 	bl	800083a <LEDMatrixRowWrite>
			for (volatile int j = 1; j <= i; j++)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	ddf0      	ble.n	8000cda <playLoseScreen+0xe2>
			}
			Delay(500);
 8000cf8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cfc:	f7ff fb5a 	bl	80003b4 <Delay>
		for (volatile int i = 1; i <= 8; i++)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3301      	adds	r3, #1
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	dde3      	ble.n	8000cd4 <playLoseScreen+0xdc>
		}
		matrixClear();
 8000d0c:	f7ff fcdd 	bl	80006ca <matrixClear>
		Delay(500);
 8000d10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d14:	f7ff fb4e 	bl	80003b4 <Delay>
		LEDMatrixWrite(RoutputArray);
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fd6a 	bl	80007f6 <LEDMatrixWrite>
		Delay(500);
 8000d22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d26:	f7ff fb45 	bl	80003b4 <Delay>
		matrixClear();
 8000d2a:	f7ff fcce 	bl	80006ca <matrixClear>
		Delay(500);
 8000d2e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d32:	f7ff fb3f 	bl	80003b4 <Delay>
		LEDMatrixWrite(RoutputArray);
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fd5b 	bl	80007f6 <LEDMatrixWrite>
		Delay(4000);
 8000d40:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000d44:	f7ff fb36 	bl	80003b4 <Delay>
		matrixClear();
 8000d48:	f7ff fcbf 	bl	80006ca <matrixClear>
		Delay(500);
 8000d4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d50:	f7ff fb30 	bl	80003b4 <Delay>
		for (volatile int i = 1; i <= 8; i++)
 8000d54:	e7bb      	b.n	8000cce <playLoseScreen+0xd6>
 8000d56:	bf00      	nop
 8000d58:	08000f08 	.word	0x08000f08
 8000d5c:	08000f18 	.word	0x08000f18
 8000d60:	08000f28 	.word	0x08000f28
 8000d64:	08000f40 	.word	0x08000f40

08000d68 <SnakeDead>:
	}
}

void SnakeDead(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
	alive = false;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	@ (8000d7c <SnakeDead+0x14>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	20000008 	.word	0x20000008

08000d80 <SnakeCheckAfterMove>:

void SnakeCheckAfterMove(snake_Type *snake)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	// Check if out of bounds
	uint8_t snake_head_x = snake->x_pos[0];
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	791b      	ldrb	r3, [r3, #4]
 8000d8c:	72fb      	strb	r3, [r7, #11]
	uint8_t snake_head_y = snake->y_pos[0];
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000d94:	72bb      	strb	r3, [r7, #10]
	if (snake_head_x < 1 || snake_head_x > 8)
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <SnakeCheckAfterMove+0x22>
 8000d9c:	7afb      	ldrb	r3, [r7, #11]
 8000d9e:	2b08      	cmp	r3, #8
 8000da0:	d901      	bls.n	8000da6 <SnakeCheckAfterMove+0x26>
	{
		SnakeDead();
 8000da2:	f7ff ffe1 	bl	8000d68 <SnakeDead>
	}
	if (snake_head_y < 1 || snake_head_y > 8)
 8000da6:	7abb      	ldrb	r3, [r7, #10]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d002      	beq.n	8000db2 <SnakeCheckAfterMove+0x32>
 8000dac:	7abb      	ldrb	r3, [r7, #10]
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d901      	bls.n	8000db6 <SnakeCheckAfterMove+0x36>
	{
		SnakeDead();
 8000db2:	f7ff ffd9 	bl	8000d68 <SnakeDead>
	}
	// Check if head hits body
	for (int i = 1; i < snake->snakeSize; i++)
 8000db6:	2301      	movs	r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	e014      	b.n	8000de6 <SnakeCheckAfterMove+0x66>
	{
		if (snake_head_x == snake->x_pos[i])
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	7afa      	ldrb	r2, [r7, #11]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d109      	bne.n	8000de0 <SnakeCheckAfterMove+0x60>
		{
			if (snake_head_y == snake->y_pos[i])
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3344      	adds	r3, #68	@ 0x44
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	7aba      	ldrb	r2, [r7, #10]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d101      	bne.n	8000de0 <SnakeCheckAfterMove+0x60>
			{
				SnakeDead();
 8000ddc:	f7ff ffc4 	bl	8000d68 <SnakeDead>
	for (int i = 1; i < snake->snakeSize; i++)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3301      	adds	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbe5      	blt.n	8000dbc <SnakeCheckAfterMove+0x3c>
			}
		}
	}
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <ClearOutputArray>:

void ClearOutputArray(snake_Type *snake)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b085      	sub	sp, #20
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 9; i++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	e008      	b.n	8000e1a <ClearOutputArray+0x20>
	{
		snake->outputArray[i] = 0;
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	3384      	adds	r3, #132	@ 0x84
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3301      	adds	r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	ddf3      	ble.n	8000e08 <ClearOutputArray+0xe>
	}
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <AppleInit>:

void AppleInit(apple_Type *apple)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
	apple->x_pos[0] = 3;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2203      	movs	r2, #3
 8000e3a:	701a      	strb	r2, [r3, #0]
	apple->y_pos[0] = 7;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2207      	movs	r2, #7
 8000e40:	705a      	strb	r2, [r3, #1]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <DisplayApple>:

void DisplayApple(snake_Type *snake, apple_Type *apple)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
	positionToMatrixPos(apple->x_pos, apple->y_pos, 1, snake->outputArray);
 8000e58:	6838      	ldr	r0, [r7, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	1c59      	adds	r1, r3, #1
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3384      	adds	r3, #132	@ 0x84
 8000e62:	2201      	movs	r2, #1
 8000e64:	f7ff fc96 	bl	8000794 <positionToMatrixPos>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <DisplayGame>:

void DisplayGame(snake_Type *snake, apple_Type *apple)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
	DisplaySnake(snake);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fe00 	bl	8000a80 <DisplaySnake>
	DisplayApple(snake, apple);
 8000e80:	6839      	ldr	r1, [r7, #0]
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffe3 	bl	8000e4e <DisplayApple>
	LEDMatrixWrite(snake->outputArray);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3384      	adds	r3, #132	@ 0x84
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fcb2 	bl	80007f6 <LEDMatrixWrite>
	ClearOutputArray(snake);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffb1 	bl	8000dfa <ClearOutputArray>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea0:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ea2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea8:	480b      	ldr	r0, [pc, #44]	@ (8000ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eaa:	490c      	ldr	r1, [pc, #48]	@ (8000edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee0 <LoopForever+0xe>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a09      	ldr	r2, [pc, #36]	@ (8000ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec0:	4c09      	ldr	r4, [pc, #36]	@ (8000ee8 <LoopForever+0x16>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

  bl main
 8000ece:	f7ff f999 	bl	8000204 <main>

08000ed2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ed2:	e7fe      	b.n	8000ed2 <LoopForever>
  ldr   r0, =_estack
 8000ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ee0:	08000f60 	.word	0x08000f60
  ldr r2, =_sbss
 8000ee4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ee8:	20000028 	.word	0x20000028

08000eec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC_IRQHandler>
	...

08000ef0 <_init>:
 8000ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef2:	bf00      	nop
 8000ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ef6:	bc08      	pop	{r3}
 8000ef8:	469e      	mov	lr, r3
 8000efa:	4770      	bx	lr

08000efc <_fini>:
 8000efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efe:	bf00      	nop
 8000f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f02:	bc08      	pop	{r3}
 8000f04:	469e      	mov	lr, r3
 8000f06:	4770      	bx	lr
