
Bare_Metal_Snake_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08000e88  08000e88  00001e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ed8  08000ed8  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000ed8  08000ed8  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000ed8  08000ed8  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ed8  08000ed8  00001ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000edc  08000edc  00001edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000ee0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08000eec  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000eec  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ac5  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000222  00000000  00000000  00002b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  00002d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000fa  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010c7  00000000  00000000  00002f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c01  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000044ec  00000000  00000000  00004c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00009126  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000544  00000000  00000000  0000916c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000096b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e70 	.word	0x08000e70

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08000e70 	.word	0x08000e70

08000204 <main>:
static void MoveSnake(snake_Type *snake);
static void SnakeDead(void);
static void SnakeCheckAfterMove(snake_Type *snake);

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b0c6      	sub	sp, #280	@ 0x118
 8000208:	af20      	add	r7, sp, #128	@ 0x80
	SetSystemClockto16MHz();
 800020a:	f000 f847 	bl	800029c <SetSystemClockto16MHz>
	ConfigureTimer3();
 800020e:	f000 f895 	bl	800033c <ConfigureTimer3>
	SPI1ClockEnable();
 8000212:	f000 f8f9 	bl	8000408 <SPI1ClockEnable>
	GPIOAClockEnable();
 8000216:	f000 f90b 	bl	8000430 <GPIOAClockEnable>

	// Now, set up user buttons
	GPIOCClockEnable();
 800021a:	f000 f91d 	bl	8000458 <GPIOCClockEnable>
	MovementButtonsInit();
 800021e:	f000 fb23 	bl	8000868 <MovementButtonsInit>

	// Enable Interrupts
	NVIC_EnableIRQ(EXTI0IRQn);
 8000222:	2006      	movs	r0, #6
 8000224:	f000 fb94 	bl	8000950 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI1IRQn);
 8000228:	2007      	movs	r0, #7
 800022a:	f000 fb91 	bl	8000950 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2IRQn);
 800022e:	2008      	movs	r0, #8
 8000230:	f000 fb8e 	bl	8000950 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3IRQn);
 8000234:	2009      	movs	r0, #9
 8000236:	f000 fb8b 	bl	8000950 <NVIC_EnableIRQ>

	SPI1PinsInit();
 800023a:	f000 f9df 	bl	80005fc <SPI1PinsInit>
	SPI1Init();
 800023e:	f000 f91f 	bl	8000480 <SPI1Init>

	matrixInit();
 8000242:	f000 fa55 	bl	80006f0 <matrixInit>

	// Write data here
	// Snake Starts with head at (3, 2), tail at (2, 2), and size 2
	snake_Type snake;
	snake_Type *snake_Ptr = &snake;
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	SnakeInit(snake_Ptr);
 800024c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000250:	f000 fc2d 	bl	8000aae <SnakeInit>

	while(1)
	{
		// If dead, play the dead sequence and queue for restart
		if (alive == false)
 8000254:	4b10      	ldr	r3, [pc, #64]	@ (8000298 <main+0x94>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	b2db      	uxtb	r3, r3
 800025a:	f083 0301 	eor.w	r3, r3, #1
 800025e:	b2db      	uxtb	r3, r3
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <main+0x64>
		{
			playLoseScreen();
 8000264:	f000 fccc 	bl	8000c00 <playLoseScreen>
		}

		// First, display to screen
		DisplaySnake(snake);
 8000268:	4668      	mov	r0, sp
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2280      	movs	r2, #128	@ 0x80
 8000270:	4619      	mov	r1, r3
 8000272:	f000 fdee 	bl	8000e52 <memcpy>
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800027a:	f000 fbfd 	bl	8000a78 <DisplaySnake>

		// Next, delay by set amount (default 1 second)
		Delay(1000);
 800027e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000282:	f000 f893 	bl	80003ac <Delay>

		// Here, we would check if apple was collected.
		// If it was, add one to size and reset apple collected

		// Then, move the snake by one
		MoveSnake(snake_Ptr);
 8000286:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800028a:	f000 fc57 	bl	8000b3c <MoveSnake>

		// Finally, check if head is currently at an apple (then set that bool)
		// and lastly check if we are alive (Are we out of bounds or have we hit ourself)
		SnakeCheckAfterMove(snake_Ptr);
 800028e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000292:	f000 fd79 	bl	8000d88 <SnakeCheckAfterMove>
		if (alive == false)
 8000296:	e7dd      	b.n	8000254 <main+0x50>
 8000298:	20000008 	.word	0x20000008

0800029c <SetSystemClockto16MHz>:
	}
}

void SetSystemClockto16MHz(void)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
	// Initialize System Clock
	uint32_t *RCC_CR_Ptr = (uint32_t*)RCC_CR;
 80002a2:	4b23      	ldr	r3, [pc, #140]	@ (8000330 <SetSystemClockto16MHz+0x94>)
 80002a4:	60fb      	str	r3, [r7, #12]
	// Turn on HSI
	*RCC_CR_Ptr |= (uint32_t)0x1;
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f043 0201 	orr.w	r2, r3, #1
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	601a      	str	r2, [r3, #0]
	// Wait for HSI Clock to be ready
	while ((*RCC_CR_Ptr & 0x2) == 0);
 80002b2:	bf00      	nop
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f003 0302 	and.w	r3, r3, #2
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d0f9      	beq.n	80002b4 <SetSystemClockto16MHz+0x18>

	// Configure Prescalers
	uint32_t *RCC_CFGR_Ptr = (uint32_t*)RCC_CFGR;
 80002c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000334 <SetSystemClockto16MHz+0x98>)
 80002c2:	60bb      	str	r3, [r7, #8]
	// HPRE
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b1111 << 4);
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	601a      	str	r2, [r3, #0]
	// PPRE1
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b111 << 10);
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	601a      	str	r2, [r3, #0]
	// PPRE2
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b111 << 13);
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	601a      	str	r2, [r3, #0]

	// Set HSI as Clock Source
	*RCC_CFGR_Ptr &= ~(uint32_t)(0b11);
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f023 0203 	bic.w	r2, r3, #3
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	601a      	str	r2, [r3, #0]

	// Configure Flash
	uint32_t *FLASH_ACR_Ptr = (uint32_t*)FLASH_ACR;
 80002f4:	4b10      	ldr	r3, [pc, #64]	@ (8000338 <SetSystemClockto16MHz+0x9c>)
 80002f6:	607b      	str	r3, [r7, #4]
	// Latency
	*FLASH_ACR_Ptr |= (uint32_t)(0b0000 << 0);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	601a      	str	r2, [r3, #0]
	// ICEN
	*FLASH_ACR_Ptr |= (uint32_t)(0b1 << 9);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	601a      	str	r2, [r3, #0]
	// DCEN
	*FLASH_ACR_Ptr |= (uint32_t)(0b1 << 10);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	601a      	str	r2, [r3, #0]

	// Turn off HSE
	*RCC_CR_Ptr &= ~((uint32_t)0x1 << 16);
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	601a      	str	r2, [r3, #0]
}
 8000324:	bf00      	nop
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	40023800 	.word	0x40023800
 8000334:	40023808 	.word	0x40023808
 8000338:	40023c00 	.word	0x40023c00

0800033c <ConfigureTimer3>:

void ConfigureTimer3(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b087      	sub	sp, #28
 8000340:	af00      	add	r7, sp, #0
	// Enable TIM3 Clock
	uint32_t *RCC_APB1_Ptr = (uint32_t*)RCC_APB1;
 8000342:	4b15      	ldr	r3, [pc, #84]	@ (8000398 <ConfigureTimer3+0x5c>)
 8000344:	617b      	str	r3, [r7, #20]
	*RCC_APB1_Ptr |= (uint32_t)0x2;
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f043 0202 	orr.w	r2, r3, #2
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	601a      	str	r2, [r3, #0]

	// Set Prescaler
	uint32_t *TIM3_PSC_Ptr = (uint32_t*)TIM3_PSC;
 8000352:	4b12      	ldr	r3, [pc, #72]	@ (800039c <ConfigureTimer3+0x60>)
 8000354:	613b      	str	r3, [r7, #16]
	*TIM3_PSC_Ptr |= (uint32_t)0xF;
 8000356:	693b      	ldr	r3, [r7, #16]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f043 020f 	orr.w	r2, r3, #15
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	601a      	str	r2, [r3, #0]

	// Set Auto-Reload
	uint32_t *TIM3_ARR_Ptr = (uint32_t*)TIM3_ARR;
 8000362:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <ConfigureTimer3+0x64>)
 8000364:	60fb      	str	r3, [r7, #12]
	*TIM3_ARR_Ptr = (uint32_t)0x3E7;
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800036c:	601a      	str	r2, [r3, #0]
//	// Enable Interrupt
//	uint32_t *TIM3_DIER_Ptr = (uint32_t*)TIM3_DIER;
//	*TIM3_DIER_Ptr |= (uint32_t)0x1;

	// Clear UIF Bit
	uint32_t *TIM3_SR_Ptr = (uint32_t*)TIM3_SR;
 800036e:	4b0d      	ldr	r3, [pc, #52]	@ (80003a4 <ConfigureTimer3+0x68>)
 8000370:	60bb      	str	r3, [r7, #8]
	*TIM3_SR_Ptr &= (uint32_t)0xFFFE;
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800037a:	4013      	ands	r3, r2
 800037c:	68ba      	ldr	r2, [r7, #8]
 800037e:	6013      	str	r3, [r2, #0]

//	// Enable NVIC Interrupt for Timer 3
//	NVIC_EnableIRQ(TIM3_IRQn);

	// Enable TIM3
	uint32_t *TIM3_CR1_Ptr = (uint32_t*)TIM3_CR1;
 8000380:	4b09      	ldr	r3, [pc, #36]	@ (80003a8 <ConfigureTimer3+0x6c>)
 8000382:	607b      	str	r3, [r7, #4]
	*TIM3_CR1_Ptr = (uint32_t)0b1 << 0;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2201      	movs	r2, #1
 8000388:	601a      	str	r2, [r3, #0]
}
 800038a:	bf00      	nop
 800038c:	371c      	adds	r7, #28
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40023840 	.word	0x40023840
 800039c:	40000428 	.word	0x40000428
 80003a0:	4000042c 	.word	0x4000042c
 80003a4:	40000410 	.word	0x40000410
 80003a8:	40000400 	.word	0x40000400

080003ac <Delay>:

void Delay(uint32_t ms)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b087      	sub	sp, #28
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	volatile uint32_t i;
	uint32_t *TIM3_CNT_Ptr = (uint32_t*)TIM3_CNT;
 80003b4:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <Delay+0x54>)
 80003b6:	617b      	str	r3, [r7, #20]
	uint32_t *TIM3_SR_Ptr = (uint32_t*)TIM3_SR;
 80003b8:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <Delay+0x58>)
 80003ba:	613b      	str	r3, [r7, #16]
	for (i = 0; i <= ms; i++)
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	e013      	b.n	80003ea <Delay+0x3e>
	{
		// Clear TIM3 Count
		*TIM3_CNT_Ptr = 0;
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]

		// Wait for UIF (1 cycle of 1kHz clocking)
		while((*TIM3_SR_Ptr & 0x1) == 0);	// This will make a 1ms delay
 80003c8:	bf00      	nop
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0f9      	beq.n	80003ca <Delay+0x1e>

		// Reset UIF
		*TIM3_SR_Ptr &= (uint32_t)0xFFFE;
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80003de:	4013      	ands	r3, r2
 80003e0:	693a      	ldr	r2, [r7, #16]
 80003e2:	6013      	str	r3, [r2, #0]
	for (i = 0; i <= ms; i++)
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	3301      	adds	r3, #1
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d2e7      	bcs.n	80003c2 <Delay+0x16>
	}
}
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	371c      	adds	r7, #28
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	40000424 	.word	0x40000424
 8000404:	40000410 	.word	0x40000410

08000408 <SPI1ClockEnable>:

void SPI1ClockEnable(void)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
	// First, SPI clock through APB2 Bus
	uint32_t *RCC_APB2ENR_Ptr = (uint32_t*)RCC_APB2ENR;
 800040e:	4b07      	ldr	r3, [pc, #28]	@ (800042c <SPI1ClockEnable+0x24>)
 8000410:	607b      	str	r3, [r7, #4]
	*RCC_APB2ENR_Ptr |= (uint32_t)(0x1 << 12);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	601a      	str	r2, [r3, #0]
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40023844 	.word	0x40023844

08000430 <GPIOAClockEnable>:

void GPIOAClockEnable(void)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
	// Now, Enable GPIOA Clock through AHB1 Bus
	uint32_t *RCC_AHB1ENR_Ptr = (uint32_t*)RCC_AHB1ENR;
 8000436:	4b07      	ldr	r3, [pc, #28]	@ (8000454 <GPIOAClockEnable+0x24>)
 8000438:	607b      	str	r3, [r7, #4]
	*RCC_AHB1ENR_Ptr |= (uint32_t)0x1;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f043 0201 	orr.w	r2, r3, #1
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	601a      	str	r2, [r3, #0]
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40023830 	.word	0x40023830

08000458 <GPIOCClockEnable>:

void GPIOCClockEnable(void)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
	// Now, Enable GPIOC Clock through AHB1 Bus
	uint32_t *RCC_AHB1ENR_Ptr = (uint32_t*)RCC_AHB1ENR;
 800045e:	4b07      	ldr	r3, [pc, #28]	@ (800047c <GPIOCClockEnable+0x24>)
 8000460:	607b      	str	r3, [r7, #4]
	*RCC_AHB1ENR_Ptr |= (uint32_t)0b1 << 2;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f043 0204 	orr.w	r2, r3, #4
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	601a      	str	r2, [r3, #0]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40023830 	.word	0x40023830

08000480 <SPI1Init>:

void SPI1Init(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
	// Set Up SPI Init
	uint32_t *SPI1_CR1_Ptr = (uint32_t*)SPI1_CR1;
 8000486:	4b26      	ldr	r3, [pc, #152]	@ (8000520 <SPI1Init+0xa0>)
 8000488:	607b      	str	r3, [r7, #4]

	// NOTE: Simplex is basically just full duplex but we don't use MISO

	// BIDIMODE off
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 15);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	601a      	str	r2, [r3, #0]
	// CRC Calculations off
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 13);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	601a      	str	r2, [r3, #0]
	// DFF to 16 bits
	*SPI1_CR1_Ptr |= (uint32_t)(0x1 << 11);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	601a      	str	r2, [r3, #0]
	// RXOnly off since we are transferring from master to slave
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 10);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	601a      	str	r2, [r3, #0]
	// SSM Disabled
	// MSB Selected
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x1 << 7);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	601a      	str	r2, [r3, #0]
	// Baud Rate of 2 MBits/S
	*SPI1_CR1_Ptr &= ~(uint32_t)(0b111 << 3);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	601a      	str	r2, [r3, #0]
	*SPI1_CR1_Ptr |= (uint32_t)(0b010 << 3);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f043 0210 	orr.w	r2, r3, #16
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
	// Put into Master Mode
	*SPI1_CR1_Ptr |= (uint32_t)(0x1 << 2);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f043 0204 	orr.w	r2, r3, #4
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	601a      	str	r2, [r3, #0]
	// Set CPOL and CPHA
	*SPI1_CR1_Ptr &= ~(uint32_t)(0x3);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f023 0203 	bic.w	r2, r3, #3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	601a      	str	r2, [r3, #0]

	// SSOE enabled
	uint32_t *SPI1_CR2_Ptr = (uint32_t*)SPI1_CR2;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000524 <SPI1Init+0xa4>)
 80004f8:	603b      	str	r3, [r7, #0]
	*SPI1_CR2_Ptr |= 0x4;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f043 0204 	orr.w	r2, r3, #4
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	601a      	str	r2, [r3, #0]

	// Finally, enable SPI
	*SPI1_CR1_Ptr |= (uint32_t)(0x1 << 6);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40013000 	.word	0x40013000
 8000524:	40013004 	.word	0x40013004

08000528 <SPI1WriteToDR>:

void SPI1WriteToDR(uint16_t data)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
	// Load data into SPI1 data register
	uint32_t *SPI1_DR_Ptr = (uint32_t*)SPI1_DR;
 8000532:	4b05      	ldr	r3, [pc, #20]	@ (8000548 <SPI1WriteToDR+0x20>)
 8000534:	60fb      	str	r3, [r7, #12]
	*SPI1_DR_Ptr = (uint32_t)data;
 8000536:	88fa      	ldrh	r2, [r7, #6]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	601a      	str	r2, [r3, #0]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	4001300c 	.word	0x4001300c

0800054c <WaitForTransmissionEnd>:

void WaitForTransmissionEnd(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
	// Wait for transmission to end by checking BSY and TXE
	uint32_t *SPI1_SR_Ptr = (uint32_t*)SPI1_SR;
 8000552:	4b0b      	ldr	r3, [pc, #44]	@ (8000580 <WaitForTransmissionEnd+0x34>)
 8000554:	607b      	str	r3, [r7, #4]
	while ((*SPI1_SR_Ptr & (0b1 << 7)) != 0);
 8000556:	bf00      	nop
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1f9      	bne.n	8000558 <WaitForTransmissionEnd+0xc>
	while ((*SPI1_SR_Ptr & (0b1 << 1)) == 0);
 8000564:	bf00      	nop
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0f9      	beq.n	8000566 <WaitForTransmissionEnd+0x1a>
}
 8000572:	bf00      	nop
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40013008 	.word	0x40013008

08000584 <EnableSlave>:

void EnableSlave(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
	// Enable Slave
	uint32_t *CS_BSRR_Ptr = (uint32_t*)CS_BSRR;
 800058a:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <EnableSlave+0x24>)
 800058c:	607b      	str	r3, [r7, #4]
	*CS_BSRR_Ptr |= (uint32_t)(0b1 << (CS_Pin + 16));
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	601a      	str	r2, [r3, #0]
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40020018 	.word	0x40020018

080005ac <DisableSlave>:

void DisableSlave(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
	// Disable Slave
	uint32_t *CS_BSRR_Ptr = (uint32_t*)CS_BSRR;
 80005b2:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <DisableSlave+0x24>)
 80005b4:	607b      	str	r3, [r7, #4]
	*CS_BSRR_Ptr |= (uint32_t)(0b1 << CS_Pin);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f043 0210 	orr.w	r2, r3, #16
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	601a      	str	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40020018 	.word	0x40020018

080005d4 <SPI1_Transmit>:

void SPI1_Transmit(uint16_t data)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
	EnableSlave();
 80005de:	f7ff ffd1 	bl	8000584 <EnableSlave>
	SPI1WriteToDR(data);
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff9f 	bl	8000528 <SPI1WriteToDR>
	WaitForTransmissionEnd();
 80005ea:	f7ff ffaf 	bl	800054c <WaitForTransmissionEnd>
	DisableSlave();
 80005ee:	f7ff ffdd 	bl	80005ac <DisableSlave>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <SPI1PinsInit>:

void SPI1PinsInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
	// Initialize SPI GPIO Pins
	// First, PinA5 for SCLK
	uint32_t *GPIOA_MODER_Ptr = (uint32_t*)GPIOA_MODER;
 8000602:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <SPI1PinsInit+0x8c>)
 8000604:	60fb      	str	r3, [r7, #12]
	// Set to Alternate Function
	*GPIOA_MODER_Ptr &= ~(uint32_t)(0b11 << 10);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER_Ptr |= (uint32_t)(0b10 << 10);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	601a      	str	r2, [r3, #0]
	// Next, PinA7 for MOSI
	*GPIOA_MODER_Ptr &= ~(uint32_t)(0b11 << 14);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER_Ptr |= (uint32_t)(0b10 << 14);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	601a      	str	r2, [r3, #0]

	// Set a GPIO Pin for CS Pin
	uint32_t *CS_Port_Ptr = (uint32_t*)CS_Port;
 8000636:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <SPI1PinsInit+0x8c>)
 8000638:	60bb      	str	r3, [r7, #8]
	// Set Pin 4 to output
	*CS_Port_Ptr &= ~(uint32_t)(0b11 << 2 * CS_Pin);
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	601a      	str	r2, [r3, #0]
	*CS_Port_Ptr |= (uint32_t)(0b01 << 2 * CS_Pin);
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	601a      	str	r2, [r3, #0]

	// Set up alternate function by selecting AF5 (According to datasheet)
	uint32_t *GPIOA_AFRL_Ptr = (uint32_t*)GPIOA_AFRL;
 8000652:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <SPI1PinsInit+0x90>)
 8000654:	607b      	str	r3, [r7, #4]
	*GPIOA_AFRL_Ptr |= (uint32_t)(0b0101 << 16);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f443 22a0 	orr.w	r2, r3, #327680	@ 0x50000
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL_Ptr |= (uint32_t)(0b0101 << 20);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL_Ptr |= (uint32_t)(0b0101 << 28);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f043 42a0 	orr.w	r2, r3, #1342177280	@ 0x50000000
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	601a      	str	r2, [r3, #0]
	// Initialize to High
	DisableSlave();
 800067a:	f7ff ff97 	bl	80005ac <DisableSlave>
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40020000 	.word	0x40020000
 800068c:	40020020 	.word	0x40020020

08000690 <max7219_write>:

void max7219_write(uint8_t addr, uint8_t data)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]
	uint16_t writeData = (addr << 8) | data;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	b21a      	sxth	r2, r3
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	4313      	orrs	r3, r2
 80006ae:	b21b      	sxth	r3, r3
 80006b0:	81fb      	strh	r3, [r7, #14]
	SPI1_Transmit(writeData);
 80006b2:	89fb      	ldrh	r3, [r7, #14]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff8d 	bl	80005d4 <SPI1_Transmit>
}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <matrixClear>:

void matrixClear(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
	for (int i = 1; i <= 8; i++)
 80006c8:	2301      	movs	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	e008      	b.n	80006e0 <matrixClear+0x1e>
	{
		max7219_write(i, 0x00);	// Clear Screen
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ffdb 	bl	8000690 <max7219_write>
	for (int i = 1; i <= 8; i++)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3301      	adds	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b08      	cmp	r3, #8
 80006e4:	ddf3      	ble.n	80006ce <matrixClear+0xc>
	}
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <matrixInit>:

void matrixInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	max7219_write(0x09, 0);		// No Decoding
 80006f4:	2100      	movs	r1, #0
 80006f6:	2009      	movs	r0, #9
 80006f8:	f7ff ffca 	bl	8000690 <max7219_write>
	max7219_write(0x0A, 0x02);	// 5/32 Light Intensity
 80006fc:	2102      	movs	r1, #2
 80006fe:	200a      	movs	r0, #10
 8000700:	f7ff ffc6 	bl	8000690 <max7219_write>
	max7219_write(0x0B, 0x07);	// Scan all columns (Turn them all on)
 8000704:	2107      	movs	r1, #7
 8000706:	200b      	movs	r0, #11
 8000708:	f7ff ffc2 	bl	8000690 <max7219_write>
	max7219_write(0x0C, 0x01);	// Normal Operation (No shutdown mode)
 800070c:	2101      	movs	r1, #1
 800070e:	200c      	movs	r0, #12
 8000710:	f7ff ffbe 	bl	8000690 <max7219_write>
	max7219_write(0x0F, 0x00);	// No Display Test
 8000714:	2100      	movs	r1, #0
 8000716:	200f      	movs	r0, #15
 8000718:	f7ff ffba 	bl	8000690 <max7219_write>

	matrixClear();
 800071c:	f7ff ffd1 	bl	80006c2 <matrixClear>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <intToHexPosition>:

uint8_t intToHexPosition(uint8_t val)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	switch (val)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	3b01      	subs	r3, #1
 8000732:	2b07      	cmp	r3, #7
 8000734:	d822      	bhi.n	800077c <intToHexPosition+0x58>
 8000736:	a201      	add	r2, pc, #4	@ (adr r2, 800073c <intToHexPosition+0x18>)
 8000738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073c:	0800075d 	.word	0x0800075d
 8000740:	08000761 	.word	0x08000761
 8000744:	08000765 	.word	0x08000765
 8000748:	08000769 	.word	0x08000769
 800074c:	0800076d 	.word	0x0800076d
 8000750:	08000771 	.word	0x08000771
 8000754:	08000775 	.word	0x08000775
 8000758:	08000779 	.word	0x08000779
	{
		case 1:
			return 0x01;
 800075c:	2301      	movs	r3, #1
 800075e:	e00e      	b.n	800077e <intToHexPosition+0x5a>
			break;
		case 2:
			return 0x02;
 8000760:	2302      	movs	r3, #2
 8000762:	e00c      	b.n	800077e <intToHexPosition+0x5a>
			break;
		case 3:
			return 0x04;
 8000764:	2304      	movs	r3, #4
 8000766:	e00a      	b.n	800077e <intToHexPosition+0x5a>
			break;
		case 4:
			return 0x08;
 8000768:	2308      	movs	r3, #8
 800076a:	e008      	b.n	800077e <intToHexPosition+0x5a>
			break;
		case 5:
			return 0x10;
 800076c:	2310      	movs	r3, #16
 800076e:	e006      	b.n	800077e <intToHexPosition+0x5a>
			break;
		case 6:
			return 0x20;
 8000770:	2320      	movs	r3, #32
 8000772:	e004      	b.n	800077e <intToHexPosition+0x5a>
			break;
		case 7:
			return 0x40;
 8000774:	2340      	movs	r3, #64	@ 0x40
 8000776:	e002      	b.n	800077e <intToHexPosition+0x5a>
			break;
		case 8:
			return 0x80;
 8000778:	2380      	movs	r3, #128	@ 0x80
 800077a:	e000      	b.n	800077e <intToHexPosition+0x5a>
			break;
		default:
			return -1;		// Should never get this, only enter values between 1 and 8
 800077c:	23ff      	movs	r3, #255	@ 0xff
	}
}
 800077e:	4618      	mov	r0, r3
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop

0800078c <positionToMatrixPos>:

void positionToMatrixPos(uint8_t x_pos[], uint8_t y_pos[], int numberOfCords, uint8_t outputArray[])
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
 8000798:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < numberOfCords; i++)
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	e01d      	b.n	80007dc <positionToMatrixPos+0x50>
	{
		uint8_t x = x_pos[i];
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	4413      	add	r3, r2
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	74fb      	strb	r3, [r7, #19]
		uint8_t y = y_pos[i];
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	4413      	add	r3, r2
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	74bb      	strb	r3, [r7, #18]
		x = intToHexPosition(x);
 80007b4:	7cfb      	ldrb	r3, [r7, #19]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ffb4 	bl	8000724 <intToHexPosition>
 80007bc:	4603      	mov	r3, r0
 80007be:	74fb      	strb	r3, [r7, #19]
		outputArray[y] |= x;
 80007c0:	7cbb      	ldrb	r3, [r7, #18]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	7819      	ldrb	r1, [r3, #0]
 80007c8:	7cbb      	ldrb	r3, [r7, #18]
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	7cfa      	ldrb	r2, [r7, #19]
 80007d0:	430a      	orrs	r2, r1
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < numberOfCords; i++)
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	3301      	adds	r3, #1
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697a      	ldr	r2, [r7, #20]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	dbdd      	blt.n	80007a0 <positionToMatrixPos+0x14>
	}
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <LEDMatrixWrite>:

void LEDMatrixWrite(uint8_t outputArray[])
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b084      	sub	sp, #16
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
	uint16_t writePos;
	for (int i = 1; i <= 8; i++)
 80007f6:	2301      	movs	r3, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	e012      	b.n	8000822 <LEDMatrixWrite+0x34>
	{
		writePos = (i << 8) | outputArray[i];
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	b21b      	sxth	r3, r3
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	440b      	add	r3, r1
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b21b      	sxth	r3, r3
 800080e:	4313      	orrs	r3, r2
 8000810:	b21b      	sxth	r3, r3
 8000812:	817b      	strh	r3, [r7, #10]
		SPI1_Transmit(writePos);
 8000814:	897b      	ldrh	r3, [r7, #10]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fedc 	bl	80005d4 <SPI1_Transmit>
	for (int i = 1; i <= 8; i++)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3301      	adds	r3, #1
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2b08      	cmp	r3, #8
 8000826:	dde9      	ble.n	80007fc <LEDMatrixWrite+0xe>
	}
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <LEDMatrixRowWrite>:

void LEDMatrixRowWrite(uint8_t outputArray[], uint8_t row)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	460b      	mov	r3, r1
 800083c:	70fb      	strb	r3, [r7, #3]
	uint16_t writePos;
	writePos = (row << 8) | outputArray[row];
 800083e:	78fb      	ldrb	r3, [r7, #3]
 8000840:	b21b      	sxth	r3, r3
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	b21a      	sxth	r2, r3
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	440b      	add	r3, r1
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21b      	sxth	r3, r3
 8000854:	81fb      	strh	r3, [r7, #14]
	SPI1_Transmit(writePos);
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff febb 	bl	80005d4 <SPI1_Transmit>
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <MovementButtonsInit>:
		SPI1_Transmit(writeRow);
	}
}

void MovementButtonsInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	@ 0x24
 800086c:	af00      	add	r7, sp, #0
	// Sets buttons as inputs
	uint32_t *GPIOC_MODER_Ptr = (uint32_t*)GPIOC_MODER;
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MovementButtonsInit+0xd4>)
 8000870:	613b      	str	r3, [r7, #16]
	// Up Pin PC0
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (0 * 2));
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f023 0203 	bic.w	r2, r3, #3
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	601a      	str	r2, [r3, #0]
	// Right Pin PC1
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (1 * 2));
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f023 020c 	bic.w	r2, r3, #12
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	601a      	str	r2, [r3, #0]
	// Down Pin PC2
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (2 * 2));
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	601a      	str	r2, [r3, #0]
	// Left Pin PC3
	*GPIOC_MODER_Ptr &= ~((uint32_t)0b11 << (3 * 2));
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	601a      	str	r2, [r3, #0]

	// Now set up falling edge interrupt for buttons
	// Enable SYSCFG Clock
	uint32_t *RCC_APB2ENR_Ptr = (uint32_t*)RCC_APB2ENR;
 80008a2:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <MovementButtonsInit+0xd8>)
 80008a4:	60fb      	str	r3, [r7, #12]
	*RCC_APB2ENR_Ptr |= (uint32_t)0b1 << 14;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	601a      	str	r2, [r3, #0]

	// Configure EXTI0 to EXTI3 for PC0-PC3
	uint32_t *SYSCFG_EXTICR1_Ptr = (uint32_t*)SYSCFG_EXTICR1;
 80008b2:	4b24      	ldr	r3, [pc, #144]	@ (8000944 <MovementButtonsInit+0xdc>)
 80008b4:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 4; i++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
 80008ba:	e00c      	b.n	80008d6 <MovementButtonsInit+0x6e>
	{
		*SYSCFG_EXTICR1_Ptr |= (uint32_t)0b0010 << (i * 4);
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	2102      	movs	r1, #2
 80008c6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ca:	431a      	orrs	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	3301      	adds	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	ddef      	ble.n	80008bc <MovementButtonsInit+0x54>
	}

	// Enable falling trigger
	uint32_t *EXTI_FTSR_Ptr = (uint32_t*)EXTI_FTSR;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MovementButtonsInit+0xe0>)
 80008de:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
 80008e4:	e00b      	b.n	80008fe <MovementButtonsInit+0x96>
	{
		*EXTI_FTSR_Ptr |= (uint32_t)0b1 << i;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	2101      	movs	r1, #1
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	431a      	orrs	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	3301      	adds	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	2b03      	cmp	r3, #3
 8000902:	ddf0      	ble.n	80008e6 <MovementButtonsInit+0x7e>
	}

	// Unmask the interrupt
	uint32_t *EXTI_IMR_Ptr = (uint32_t*)EXTI_IMR;
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MovementButtonsInit+0xe4>)
 8000906:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 4; i++)
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	e00b      	b.n	8000926 <MovementButtonsInit+0xbe>
	{
		*EXTI_IMR_Ptr |= (uint32_t)0b1 << i;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	2101      	movs	r1, #1
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	431a      	orrs	r2, r3
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	3301      	adds	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	2b03      	cmp	r3, #3
 800092a:	ddf0      	ble.n	800090e <MovementButtonsInit+0xa6>
	}
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3724      	adds	r7, #36	@ 0x24
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40020800 	.word	0x40020800
 8000940:	40023844 	.word	0x40023844
 8000944:	40013808 	.word	0x40013808
 8000948:	40013c0c 	.word	0x40013c0c
 800094c:	40013c00 	.word	0x40013c00

08000950 <NVIC_EnableIRQ>:

void NVIC_EnableIRQ(uint32_t IRQn)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	if (IRQn <= 96)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b60      	cmp	r3, #96	@ 0x60
 800095c:	d813      	bhi.n	8000986 <NVIC_EnableIRQ+0x36>
	{
		uint32_t iserIndex = IRQn >> 5;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	095b      	lsrs	r3, r3, #5
 8000962:	60fb      	str	r3, [r7, #12]
		uint32_t iserBit = IRQn & 0x1F;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 031f 	and.w	r3, r3, #31
 800096a:	60bb      	str	r3, [r7, #8]

		NVIC->ISER[iserIndex] |= (0x1 << iserBit);
 800096c:	4a09      	ldr	r2, [pc, #36]	@ (8000994 <NVIC_EnableIRQ+0x44>)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000974:	2101      	movs	r1, #1
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	fa01 f202 	lsl.w	r2, r1, r2
 800097c:	4905      	ldr	r1, [pc, #20]	@ (8000994 <NVIC_EnableIRQ+0x44>)
 800097e:	431a      	orrs	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000e100 	.word	0xe000e100

08000998 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <EXTI0_IRQHandler+0x2c>)
 80009a0:	607b      	str	r3, [r7, #4]

	if (previous_direction != DOWN)
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <EXTI0_IRQHandler+0x30>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d002      	beq.n	80009b0 <EXTI0_IRQHandler+0x18>
	{
		snake_direction = UP;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <EXTI0_IRQHandler+0x34>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC0 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40013c14 	.word	0x40013c14
 80009c8:	20000004 	.word	0x20000004
 80009cc:	20000000 	.word	0x20000000

080009d0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <EXTI1_IRQHandler+0x2c>)
 80009d8:	607b      	str	r3, [r7, #4]

	if (previous_direction != LEFT)
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <EXTI1_IRQHandler+0x30>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d002      	beq.n	80009e8 <EXTI1_IRQHandler+0x18>
	{
		snake_direction = RIGHT;
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <EXTI1_IRQHandler+0x34>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC1 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 1;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2202      	movs	r2, #2
 80009ec:	601a      	str	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40013c14 	.word	0x40013c14
 8000a00:	20000004 	.word	0x20000004
 8000a04:	20000000 	.word	0x20000000

08000a08 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <EXTI2_IRQHandler+0x2c>)
 8000a10:	607b      	str	r3, [r7, #4]

	if (previous_direction != UP)
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <EXTI2_IRQHandler+0x30>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d002      	beq.n	8000a20 <EXTI2_IRQHandler+0x18>
	{
		snake_direction = DOWN;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <EXTI2_IRQHandler+0x34>)
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC2 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 2;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2204      	movs	r2, #4
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40013c14 	.word	0x40013c14
 8000a38:	20000004 	.word	0x20000004
 8000a3c:	20000000 	.word	0x20000000

08000a40 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR_Ptr = (uint32_t*)EXTI_PR;
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <EXTI3_IRQHandler+0x2c>)
 8000a48:	607b      	str	r3, [r7, #4]

	if (previous_direction != RIGHT)
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <EXTI3_IRQHandler+0x30>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d002      	beq.n	8000a58 <EXTI3_IRQHandler+0x18>
	{
		snake_direction = LEFT;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <EXTI3_IRQHandler+0x34>)
 8000a54:	2203      	movs	r2, #3
 8000a56:	601a      	str	r2, [r3, #0]
	}

	// Clear PinC3 interrupt Bit
	*EXTI_PR_Ptr = (uint32_t)0b1 << 3;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	601a      	str	r2, [r3, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40013c14 	.word	0x40013c14
 8000a70:	20000004 	.word	0x20000004
 8000a74:	20000000 	.word	0x20000000

08000a78 <DisplaySnake>:

void DisplaySnake(snake_Type snake)
{
 8000a78:	b084      	sub	sp, #16
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	f107 0c08 	add.w	ip, r7, #8
 8000a82:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	positionToMatrixPos(snake.x_pos, snake.y_pos, snake.snakeSize, snake.outputArray);
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000a8c:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8000a90:	f107 000c 	add.w	r0, r7, #12
 8000a94:	f7ff fe7a 	bl	800078c <positionToMatrixPos>
	LEDMatrixWrite(snake.outputArray);
 8000a98:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fea6 	bl	80007ee <LEDMatrixWrite>
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aaa:	b004      	add	sp, #16
 8000aac:	4770      	bx	lr

08000aae <SnakeInit>:

void SnakeInit(snake_Type *snake)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b085      	sub	sp, #20
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
	snake->snakeSize = 3;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2203      	movs	r2, #3
 8000aba:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 64; i++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	e00e      	b.n	8000ae0 <SnakeInit+0x32>
	{
		snake->x_pos[i] = 0;
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
		snake->y_pos[i] = 0;
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	3344      	adds	r3, #68	@ 0x44
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 64; i++)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3301      	adds	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ae4:	dded      	ble.n	8000ac2 <SnakeInit+0x14>
	}
	snake->x_pos[0] = 3;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2203      	movs	r2, #3
 8000aea:	711a      	strb	r2, [r3, #4]
	snake->x_pos[1] = 2;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2202      	movs	r2, #2
 8000af0:	715a      	strb	r2, [r3, #5]
	snake->y_pos[0] = 2;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2202      	movs	r2, #2
 8000af6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	snake->y_pos[1] = 2;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2202      	movs	r2, #2
 8000afe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	snake->x_pos[2] = 1;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2201      	movs	r2, #1
 8000b06:	719a      	strb	r2, [r3, #6]
	snake->y_pos[2] = 2;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	for (int i = 0; i < 9; i++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	e008      	b.n	8000b28 <SnakeInit+0x7a>
	{
		snake->outputArray[i] = 0;
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	3384      	adds	r3, #132	@ 0x84
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	3301      	adds	r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	ddf3      	ble.n	8000b16 <SnakeInit+0x68>
	}
}
 8000b2e:	bf00      	nop
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <MoveSnake>:

void MoveSnake(snake_Type *snake)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b087      	sub	sp, #28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	uint8_t tempToPlacex = snake->x_pos[0];
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	791b      	ldrb	r3, [r3, #4]
 8000b48:	75fb      	strb	r3, [r7, #23]
	uint8_t tempToPlacey = snake->y_pos[0];
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b50:	75bb      	strb	r3, [r7, #22]
	uint8_t tempToStorex = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73fb      	strb	r3, [r7, #15]
	uint8_t tempToStorey = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	73bb      	strb	r3, [r7, #14]
	switch(snake_direction)
 8000b5a:	4b27      	ldr	r3, [pc, #156]	@ (8000bf8 <MoveSnake+0xbc>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	d819      	bhi.n	8000b96 <MoveSnake+0x5a>
 8000b62:	a201      	add	r2, pc, #4	@ (adr r2, 8000b68 <MoveSnake+0x2c>)
 8000b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b68:	08000b79 	.word	0x08000b79
 8000b6c:	08000b81 	.word	0x08000b81
 8000b70:	08000b89 	.word	0x08000b89
 8000b74:	08000b91 	.word	0x08000b91
	{
		case UP:
			tempToPlacey += 1;
 8000b78:	7dbb      	ldrb	r3, [r7, #22]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	75bb      	strb	r3, [r7, #22]
			break;
 8000b7e:	e00a      	b.n	8000b96 <MoveSnake+0x5a>
		case RIGHT:
			tempToPlacex += 1;
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	3301      	adds	r3, #1
 8000b84:	75fb      	strb	r3, [r7, #23]
			break;
 8000b86:	e006      	b.n	8000b96 <MoveSnake+0x5a>
		case DOWN:
			tempToPlacey -= 1;
 8000b88:	7dbb      	ldrb	r3, [r7, #22]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	75bb      	strb	r3, [r7, #22]
			break;
 8000b8e:	e002      	b.n	8000b96 <MoveSnake+0x5a>
		case LEFT:
			tempToPlacex -= 1;
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	75fb      	strb	r3, [r7, #23]
	}
	for (int i = 0; i < snake->snakeSize; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	e01e      	b.n	8000bda <MoveSnake+0x9e>
	{
		tempToStorex = snake->x_pos[i];
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	73fb      	strb	r3, [r7, #15]
		tempToStorey = snake->y_pos[i];
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4413      	add	r3, r2
 8000bae:	3344      	adds	r3, #68	@ 0x44
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	73bb      	strb	r3, [r7, #14]
		snake->x_pos[i] = tempToPlacex;
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	4413      	add	r3, r2
 8000bba:	3304      	adds	r3, #4
 8000bbc:	7dfa      	ldrb	r2, [r7, #23]
 8000bbe:	701a      	strb	r2, [r3, #0]
		snake->y_pos[i] = tempToPlacey;
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	3344      	adds	r3, #68	@ 0x44
 8000bc8:	7dba      	ldrb	r2, [r7, #22]
 8000bca:	701a      	strb	r2, [r3, #0]
		tempToPlacex = tempToStorex;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	75fb      	strb	r3, [r7, #23]
		tempToPlacey = tempToStorey;
 8000bd0:	7bbb      	ldrb	r3, [r7, #14]
 8000bd2:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < snake->snakeSize; i++)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbdb      	blt.n	8000b9c <MoveSnake+0x60>
	}
	previous_direction = snake_direction;
 8000be4:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <MoveSnake+0xbc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <MoveSnake+0xc0>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	371c      	adds	r7, #28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000004 	.word	0x20000004

08000c00 <playLoseScreen>:

void playLoseScreen(void)
{
 8000c00:	b5b0      	push	{r4, r5, r7, lr}
 8000c02:	b09e      	sub	sp, #120	@ 0x78
 8000c04:	af00      	add	r7, sp, #0
	// Double X
	int doubleXSize = 16;
 8000c06:	2310      	movs	r3, #16
 8000c08:	677b      	str	r3, [r7, #116]	@ 0x74
	uint8_t doubleX_x_pos[] = {1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8};
 8000c0a:	4b55      	ldr	r3, [pc, #340]	@ (8000d60 <playLoseScreen+0x160>)
 8000c0c:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8000c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t doubleX_y_pos[] = {1,8,2,7,3,6,4,5,4,5,3,6,2,7,1,8};
 8000c16:	4b53      	ldr	r3, [pc, #332]	@ (8000d64 <playLoseScreen+0x164>)
 8000c18:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8000c1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t doubleXoutputArray[9] = {0};
 8000c22:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	721a      	strb	r2, [r3, #8]
	positionToMatrixPos(doubleX_x_pos, doubleX_y_pos, doubleXSize, doubleXoutputArray);
 8000c2e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c32:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000c36:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8000c3a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c3c:	f7ff fda6 	bl	800078c <positionToMatrixPos>

	LEDMatrixWrite(doubleXoutputArray);
 8000c40:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fdd2 	bl	80007ee <LEDMatrixWrite>
	Delay(500);
 8000c4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c4e:	f7ff fbad 	bl	80003ac <Delay>
	matrixClear();
 8000c52:	f7ff fd36 	bl	80006c2 <matrixClear>
	Delay(500);
 8000c56:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c5a:	f7ff fba7 	bl	80003ac <Delay>
	LEDMatrixWrite(doubleXoutputArray);
 8000c5e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fdc3 	bl	80007ee <LEDMatrixWrite>
	Delay(500);
 8000c68:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c6c:	f7ff fb9e 	bl	80003ac <Delay>
	matrixClear();
 8000c70:	f7ff fd27 	bl	80006c2 <matrixClear>
	Delay(500);
 8000c74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c78:	f7ff fb98 	bl	80003ac <Delay>

	// R? (Restart question)
	int RSize = 23;
 8000c7c:	2317      	movs	r3, #23
 8000c7e:	673b      	str	r3, [r7, #112]	@ 0x70
	uint8_t R_x_pos[] = {1,1,1,1,1,1,2,2,3,3,3,4,4,4,6,6,7,7,7,8,8,8,8};
 8000c80:	4b39      	ldr	r3, [pc, #228]	@ (8000d68 <playLoseScreen+0x168>)
 8000c82:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000c86:	461d      	mov	r5, r3
 8000c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c90:	6020      	str	r0, [r4, #0]
 8000c92:	3404      	adds	r4, #4
 8000c94:	8021      	strh	r1, [r4, #0]
 8000c96:	3402      	adds	r4, #2
 8000c98:	0c0b      	lsrs	r3, r1, #16
 8000c9a:	7023      	strb	r3, [r4, #0]
	uint8_t R_y_pos[] = {1,2,3,4,5,6,4,6,3,4,6,1,2,5,5,6,1,3,6,3,4,5,6};
 8000c9c:	4b33      	ldr	r3, [pc, #204]	@ (8000d6c <playLoseScreen+0x16c>)
 8000c9e:	f107 0414 	add.w	r4, r7, #20
 8000ca2:	461d      	mov	r5, r3
 8000ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cac:	6020      	str	r0, [r4, #0]
 8000cae:	3404      	adds	r4, #4
 8000cb0:	8021      	strh	r1, [r4, #0]
 8000cb2:	3402      	adds	r4, #2
 8000cb4:	0c0b      	lsrs	r3, r1, #16
 8000cb6:	7023      	strb	r3, [r4, #0]
	uint8_t RoutputArray[9] = {0};
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	721a      	strb	r2, [r3, #8]
	positionToMatrixPos(R_x_pos, R_y_pos, RSize, RoutputArray);
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	f107 0114 	add.w	r1, r7, #20
 8000ccc:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000cd0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000cd2:	f7ff fd5b 	bl	800078c <positionToMatrixPos>

	while(1)
	{
		for (volatile int i = 1; i <= 8; i++)
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	e018      	b.n	8000d0e <playLoseScreen+0x10e>
		{
			for (volatile int j = 1; j <= i; j++)
 8000cdc:	2301      	movs	r3, #1
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	e00a      	b.n	8000cf8 <playLoseScreen+0xf8>
			{
				LEDMatrixRowWrite(RoutputArray, j);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fda0 	bl	8000832 <LEDMatrixRowWrite>
			for (volatile int j = 1; j <= i; j++)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683a      	ldr	r2, [r7, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	ddf0      	ble.n	8000ce2 <playLoseScreen+0xe2>
			}
			Delay(500);
 8000d00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d04:	f7ff fb52 	bl	80003ac <Delay>
		for (volatile int i = 1; i <= 8; i++)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b08      	cmp	r3, #8
 8000d12:	dde3      	ble.n	8000cdc <playLoseScreen+0xdc>
		}
		matrixClear();
 8000d14:	f7ff fcd5 	bl	80006c2 <matrixClear>
		Delay(500);
 8000d18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d1c:	f7ff fb46 	bl	80003ac <Delay>
		LEDMatrixWrite(RoutputArray);
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fd62 	bl	80007ee <LEDMatrixWrite>
		Delay(500);
 8000d2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d2e:	f7ff fb3d 	bl	80003ac <Delay>
		matrixClear();
 8000d32:	f7ff fcc6 	bl	80006c2 <matrixClear>
		Delay(500);
 8000d36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d3a:	f7ff fb37 	bl	80003ac <Delay>
		LEDMatrixWrite(RoutputArray);
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fd53 	bl	80007ee <LEDMatrixWrite>
		Delay(4000);
 8000d48:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000d4c:	f7ff fb2e 	bl	80003ac <Delay>
		matrixClear();
 8000d50:	f7ff fcb7 	bl	80006c2 <matrixClear>
		Delay(500);
 8000d54:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d58:	f7ff fb28 	bl	80003ac <Delay>
		for (volatile int i = 1; i <= 8; i++)
 8000d5c:	e7bb      	b.n	8000cd6 <playLoseScreen+0xd6>
 8000d5e:	bf00      	nop
 8000d60:	08000e88 	.word	0x08000e88
 8000d64:	08000e98 	.word	0x08000e98
 8000d68:	08000ea8 	.word	0x08000ea8
 8000d6c:	08000ec0 	.word	0x08000ec0

08000d70 <SnakeDead>:
	}
}

void SnakeDead(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	alive = false;
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <SnakeDead+0x14>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	20000008 	.word	0x20000008

08000d88 <SnakeCheckAfterMove>:

void SnakeCheckAfterMove(snake_Type *snake)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	// Check if out of bounds
	uint8_t snake_head_x = snake->x_pos[0];
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	791b      	ldrb	r3, [r3, #4]
 8000d94:	72fb      	strb	r3, [r7, #11]
	uint8_t snake_head_y = snake->y_pos[0];
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000d9c:	72bb      	strb	r3, [r7, #10]
	if (snake_head_x < 1 || snake_head_x > 8)
 8000d9e:	7afb      	ldrb	r3, [r7, #11]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <SnakeCheckAfterMove+0x22>
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d901      	bls.n	8000dae <SnakeCheckAfterMove+0x26>
	{
		SnakeDead();
 8000daa:	f7ff ffe1 	bl	8000d70 <SnakeDead>
	}
	if (snake_head_y < 1 || snake_head_y > 8)
 8000dae:	7abb      	ldrb	r3, [r7, #10]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <SnakeCheckAfterMove+0x32>
 8000db4:	7abb      	ldrb	r3, [r7, #10]
 8000db6:	2b08      	cmp	r3, #8
 8000db8:	d901      	bls.n	8000dbe <SnakeCheckAfterMove+0x36>
	{
		SnakeDead();
 8000dba:	f7ff ffd9 	bl	8000d70 <SnakeDead>
	}
	// Check if head hits body
	for (int i = 1; i < snake->snakeSize; i++)
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	e014      	b.n	8000dee <SnakeCheckAfterMove+0x66>
	{
		if (snake_head_x == snake->x_pos[i])
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4413      	add	r3, r2
 8000dca:	3304      	adds	r3, #4
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	7afa      	ldrb	r2, [r7, #11]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d109      	bne.n	8000de8 <SnakeCheckAfterMove+0x60>
		{
			if (snake_head_y == snake->y_pos[i])
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	3344      	adds	r3, #68	@ 0x44
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	7aba      	ldrb	r2, [r7, #10]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d101      	bne.n	8000de8 <SnakeCheckAfterMove+0x60>
			{
				SnakeDead();
 8000de4:	f7ff ffc4 	bl	8000d70 <SnakeDead>
	for (int i = 1; i < snake->snakeSize; i++)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dbe5      	blt.n	8000dc4 <SnakeCheckAfterMove+0x3c>
			}
		}
	}
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e04:	480c      	ldr	r0, [pc, #48]	@ (8000e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e0c:	480b      	ldr	r0, [pc, #44]	@ (8000e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0e:	490c      	ldr	r1, [pc, #48]	@ (8000e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e10:	4a0c      	ldr	r2, [pc, #48]	@ (8000e44 <LoopForever+0xe>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a09      	ldr	r2, [pc, #36]	@ (8000e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e24:	4c09      	ldr	r4, [pc, #36]	@ (8000e4c <LoopForever+0x16>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

  bl main
 8000e32:	f7ff f9e7 	bl	8000204 <main>

08000e36 <LoopForever>:

LoopForever:
  b LoopForever
 8000e36:	e7fe      	b.n	8000e36 <LoopForever>
  ldr   r0, =_estack
 8000e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e44:	08000ee0 	.word	0x08000ee0
  ldr r2, =_sbss
 8000e48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e4c:	20000028 	.word	0x20000028

08000e50 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>

08000e52 <memcpy>:
 8000e52:	440a      	add	r2, r1
 8000e54:	4291      	cmp	r1, r2
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	d100      	bne.n	8000e5e <memcpy+0xc>
 8000e5c:	4770      	bx	lr
 8000e5e:	b510      	push	{r4, lr}
 8000e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000e68:	4291      	cmp	r1, r2
 8000e6a:	d1f9      	bne.n	8000e60 <memcpy+0xe>
 8000e6c:	bd10      	pop	{r4, pc}
	...

08000e70 <_init>:
 8000e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e72:	bf00      	nop
 8000e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e76:	bc08      	pop	{r3}
 8000e78:	469e      	mov	lr, r3
 8000e7a:	4770      	bx	lr

08000e7c <_fini>:
 8000e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7e:	bf00      	nop
 8000e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e82:	bc08      	pop	{r3}
 8000e84:	469e      	mov	lr, r3
 8000e86:	4770      	bx	lr
